<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023Annual Summary</title>
    <link href="/2024/01/01/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <url>/2024/01/01/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password." data-whm="Sorry, this article cannot be verified, but you can still view the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="4a6bc5cc75ff4fa981ee534177d85095ac31bd86f9d3244594e0be2214196f97"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password required</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Annual Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Annual Summary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RedisCheatSheet</title>
    <link href="/2023/09/06/RedisCheatSheet/"/>
    <url>/2023/09/06/RedisCheatSheet/</url>
    
    <content type="html"><![CDATA[<div style="text-align: center;">  <object data="./RedisCheatSheet.pdf" type="application/pdf" width="100%" height="1800px">    <p>如果无法查看PDF，请点击<a href="./SQLCheatSheet.pdf">此链接</a>进行下载。</p>  </object></div>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pdfList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDBCheatSheet</title>
    <link href="/2023/09/06/MongoDBCheatSheet/"/>
    <url>/2023/09/06/MongoDBCheatSheet/</url>
    
    <content type="html"><![CDATA[<div style="text-align: center;">  <object data="./MongoDBCheatSheet.pdf" type="application/pdf" width="100%" height="2000px">    <p>如果无法查看PDF，请点击<a href="./MongoDBCheatSheet.pdf">此链接</a>进行下载。</p>  </object></div>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pdfList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitCheatSheet</title>
    <link href="/2023/09/06/GitCheatSheet/"/>
    <url>/2023/09/06/GitCheatSheet/</url>
    
    <content type="html"><![CDATA[<div class="centered-div">  <div class="pdf-container">    <object data="./GitCheatSheet.pdf" type="application/pdf" width="100%" height="2500px">      <p>如果无法查看PDF，请点击<a href="./GitCheatSheet.pdf">此链接</a>进行下载。</p>    </object>  </div></div>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pdfList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DockerCheatSheet</title>
    <link href="/2023/09/06/DockerCheatSheet/"/>
    <url>/2023/09/06/DockerCheatSheet/</url>
    
    <content type="html"><![CDATA[<div class="centered-div">  <div class="pdf-container">    <object data="./DockerCheatSheet.pdf" type="application/pdf" width="100%" height="800px">      <p>如果无法查看PDF，请点击<a href="./DockerCheatSheet.pdf">此链接</a>进行下载。</p>    </object>  </div></div>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pdfList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLCheatSheet</title>
    <link href="/2023/09/06/SQLCheatSheet/"/>
    <url>/2023/09/06/SQLCheatSheet/</url>
    
    <content type="html"><![CDATA[<div style="text-align: center;">  <object data="./SQLCheatSheet.pdf" type="application/pdf" width="100%" height="4700px">    <p>如果无法查看PDF，请点击<a href="./SQLCheatSheet.pdf">此链接</a>进行下载。</p>  </object></div>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pdfList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RedisCommendStudy</title>
    <link href="/2023/09/04/RedisCommendStudy/"/>
    <url>/2023/09/04/RedisCommendStudy/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis常用指令"><a href="#Redis常用指令" class="headerlink" title="Redis常用指令"></a>Redis常用指令</h2><h3 id="1、字符串String"><a href="#1、字符串String" class="headerlink" title="1、字符串String"></a>1、字符串String</h3><p>redis中是使用字符串保存数值的，所以可以将数字或者布尔值也设置为value，具体的键和值都是大小写敏感的</p><h5 id="设置一个键值对"><a href="#设置一个键值对" class="headerlink" title="设置一个键值对"></a>设置一个键值对</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SET key value<br></code></pre></td></tr></table></figure><p>input: set cqupt 3G<br>receive: OK</p><h5 id="获取键对应的值"><a href="#获取键对应的值" class="headerlink" title="获取键对应的值"></a>获取键对应的值</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET key<br></code></pre></td></tr></table></figure><p>input: get cqupt<br>receive: “3G”</p><h5 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">DEL key<br></code></pre></td></tr></table></figure><p>input: del cqupt</p><p>receive:  (integer) 1</p><p>在删除后再获取</p><p>input: get cqupt<br>receive: (nil)</p><h5 id="判断一个键是否存在"><a href="#判断一个键是否存在" class="headerlink" title="判断一个键是否存在"></a>判断一个键是否存在</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">EXISTS key<br></code></pre></td></tr></table></figure><p>input: EXISTS cqupt</p><p>receive:  (integer) 0   表示不存在</p><p>重新创建之后再exists就会发现返回(integer) 1</p><h5 id="查看存在哪些键"><a href="#查看存在哪些键" class="headerlink" title="查看存在哪些键"></a>查看存在哪些键</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">KEYS pattern<br></code></pre></td></tr></table></figure><p>pattern是一个模式，支持正则表达式</p><p>例如 keys * 表示查找所有的键</p><p>keys CQ* 表示所有以CQ开头的键</p><h5 id="删除所有的键"><a href="#删除所有的键" class="headerlink" title="删除所有的键"></a>删除所有的键</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">FLUSHALL<br></code></pre></td></tr></table></figure><p>删除之后再keys * </p><p>得到(empty list or set)的回显</p><h5 id="CLI的中文显示设置"><a href="#CLI的中文显示设置" class="headerlink" title="CLI的中文显示设置"></a>CLI的中文显示设置</h5><p>可以正常存储，但是直接打开redis-cli的话只能看到对应的十六进制数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli --raw<br></code></pre></td></tr></table></figure><h5 id="清空屏幕"><a href="#清空屏幕" class="headerlink" title="清空屏幕"></a>清空屏幕</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clear<br></code></pre></td></tr></table></figure><h5 id="设置带有过期时间的键值对"><a href="#设置带有过期时间的键值对" class="headerlink" title="设置带有过期时间的键值对"></a>设置带有过期时间的键值对</h5><p>TTL: Time To Live</p><h6 id="查看过期时间"><a href="#查看过期时间" class="headerlink" title="查看过期时间"></a>查看过期时间</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">TTL key<br></code></pre></td></tr></table></figure><p>input: TTL cqupt</p><p>receive:  -1  说明没有设置过期时间</p><h6 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">TTL key duration<br></code></pre></td></tr></table></figure><p>input: TTL cqupt 10 &#x2F;&#x2F; 设置10秒后过期</p><p>receive:  1</p><p>最后TTL key，收到-2，说明键值对已经过期</p><p>最后再GET key ，没有输出，而且KEYS key也没有显示</p><h6 id="使用SETEX设置带有过期时间的键值对"><a href="#使用SETEX设置带有过期时间的键值对" class="headerlink" title="使用SETEX设置带有过期时间的键值对"></a>使用SETEX设置带有过期时间的键值对</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SETEX key duration value<br></code></pre></td></tr></table></figure><p>input: setex name 5 你好</p><p>receive: OK</p><h5 id="在键不存在时设置键的值"><a href="#在键不存在时设置键的值" class="headerlink" title="在键不存在时设置键的值"></a>在键不存在时设置键的值</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SETNX key value<br></code></pre></td></tr></table></figure><h3 id="2、列表List"><a href="#2、列表List" class="headerlink" title="2、列表List"></a>2、列表List</h3><h4 id="将元素添加到列表的头部或尾部"><a href="#将元素添加到列表的头部或尾部" class="headerlink" title="将元素添加到列表的头部或尾部"></a>将元素添加到列表的头部或尾部</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">LPUSH key value <br>RPUSH key value<br></code></pre></td></tr></table></figure><p>LPUSH letter a</p><p>LPUSH letter b</p><h4 id="获取列表内容"><a href="#获取列表内容" class="headerlink" title="获取列表内容"></a>获取列表内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">LRANGE key start stop<br></code></pre></td></tr></table></figure><p>LRANGE letter 0 -1 -1表示到最后一个元素</p><h4 id="添加多个元素"><a href="#添加多个元素" class="headerlink" title="添加多个元素"></a>添加多个元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">LPUSH key element [element ...]<br></code></pre></td></tr></table></figure><p>LPUSH letter c d e</p><p>&gt; <strong>LRANGE letter 0 -1</strong> 1) “e” 2) “d” 3) “c” 4) “c” 5) “b” 6) “a”</p><p>可以看到顺序是反的</p><h4 id="删除头部或尾部的元素"><a href="#删除头部或尾部的元素" class="headerlink" title="删除头部或尾部的元素"></a>删除头部或尾部的元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">LPOP key [count]<br>RPOP key [count]<br></code></pre></td></tr></table></figure><p>RPOP letter </p><p>一次删除多个元素</p><p>LPOP letter 2</p><h4 id="查看列表的长度"><a href="#查看列表的长度" class="headerlink" title="查看列表的长度"></a>查看列表的长度</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">LLEN key<br></code></pre></td></tr></table></figure><p>RPOPLPUSH实现一个简单的消息队列</p><p>删除列表中指定范围以外的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">LTRIM key start stop<br></code></pre></td></tr></table></figure><p>意思是只保留start和stop之内的元素</p><p>LTRIM letter 1 3</p><h3 id="3、集合Set"><a href="#3、集合Set" class="headerlink" title="3、集合Set"></a>3、集合Set</h3><h4 id="set和列表的区别"><a href="#set和列表的区别" class="headerlink" title="set和列表的区别"></a>set和列表的区别</h4><p>set是无序的，但是元素不能重复；list是有序的，元素可以重复</p><h4 id="向set中添加元素"><a href="#向set中添加元素" class="headerlink" title="向set中添加元素"></a>向set中添加元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SADD key member [member ...]<br></code></pre></td></tr></table></figure><p>例如：</p><p><strong>SADD course Redis</strong></p><p>或者：</p><p><strong>SADD course Redis MySQL</strong></p><h4 id="查看集合中的元素"><a href="#查看集合中的元素" class="headerlink" title="查看集合中的元素"></a>查看集合中的元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SMEMBERS key<br></code></pre></td></tr></table></figure><p>&gt; <strong>SMEMBERs course</strong> </p><p>1)”MySQL”</p><ol start="2"><li>“Redis”</li></ol><h4 id="判断一个元素是否在集合中"><a href="#判断一个元素是否在集合中" class="headerlink" title="判断一个元素是否在集合中"></a>判断一个元素是否在集合中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SISMEMBER key member<br></code></pre></td></tr></table></figure><h4 id="删除集合中的元素"><a href="#删除集合中的元素" class="headerlink" title="删除集合中的元素"></a>删除集合中的元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SREM key member [member ...]<br></code></pre></td></tr></table></figure><h4 id="计算集合的交集"><a href="#计算集合的交集" class="headerlink" title="计算集合的交集"></a>计算集合的交集</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SINTER key [key ...]<br></code></pre></td></tr></table></figure><h4 id="计算集合的差集"><a href="#计算集合的差集" class="headerlink" title="计算集合的差集"></a>计算集合的差集</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SDIFF key [key ...]<br></code></pre></td></tr></table></figure><h4 id="计算集合的并集"><a href="#计算集合的并集" class="headerlink" title="计算集合的并集"></a>计算集合的并集</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SUNION key [key ...]<br></code></pre></td></tr></table></figure><h3 id="4、有序集合SortedSet"><a href="#4、有序集合SortedSet" class="headerlink" title="4、有序集合SortedSet"></a>4、有序集合SortedSet</h3><p>集合中的每个元素都会关联一个浮点类型的分数，根据这个分数从小到大排序</p><p>成员是唯一的，但是分数是可以重复的</p><h4 id="向有序集合中添加元素"><a href="#向有序集合中添加元素" class="headerlink" title="向有序集合中添加元素"></a>向有序集合中添加元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZADD key [NX | XX] [GT | LT] [CH] [INCR] score member [score member ...]<br><br>Required key<br>Optional [NX | XX]<br>Optional [GT | LT]<br>Optional [CH]<br>Optional [INCR]<br>Multiple score member<br></code></pre></td></tr></table></figure><p>例如：</p><p>input: ZADD result 680 清华 660 北大 650 复旦 640 浙大</p><p> result: 4</p><h4 id="查看有序集合中的元素"><a href="#查看有序集合中的元素" class="headerlink" title="查看有序集合中的元素"></a>查看有序集合中的元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZRANGE key start stop [BYSCORE | BYLEX] [REV] [LIMIT offset count] [WITHSCORES]<br></code></pre></td></tr></table></figure><p>例如</p><p>127.0.0.1:6379&gt; ZRANGE result 0 -1<br>浙大<br>复旦<br>北大<br>清华</p><p>在输出成员的时候输出分数</p><p>127.0.0.1:6379&gt; ZRANGE result 0 -1 WITHSCORES<br>浙大<br>640<br>复旦<br>650<br>北大<br>660<br>清华<br>680</p><h4 id="查看某个成员的值"><a href="#查看某个成员的值" class="headerlink" title="查看某个成员的值"></a>查看某个成员的值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZSCORE key member<br></code></pre></td></tr></table></figure><h4 id="查看某个成员的排名"><a href="#查看某个成员的排名" class="headerlink" title="查看某个成员的排名"></a>查看某个成员的排名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZRANK key member [WITHSCORE]<br></code></pre></td></tr></table></figure><h4 id="查看从大到小的排名"><a href="#查看从大到小的排名" class="headerlink" title="查看从大到小的排名"></a>查看从大到小的排名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZREVRANK key member [WITHSCORE]<br></code></pre></td></tr></table></figure><h4 id="删除有序集合中的某个成员"><a href="#删除有序集合中的某个成员" class="headerlink" title="删除有序集合中的某个成员"></a>删除有序集合中的某个成员</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZREM key member [member ...]<br></code></pre></td></tr></table></figure><h3 id="5、哈希Hash"><a href="#5、哈希Hash" class="headerlink" title="5、哈希Hash"></a>5、哈希Hash</h3><h4 id="向hash中添加一个键值对"><a href="#向hash中添加一个键值对" class="headerlink" title="向hash中添加一个键值对"></a>向hash中添加一个键值对</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HSET key field value [field value ...]<br></code></pre></td></tr></table></figure><p>input: HSET person name WCL</p><p>input: HSET person age 20</p><p>也可以是</p><p>intput: HSET person name WCL age 20</p><h4 id="获取hash中的某个键值对"><a href="#获取hash中的某个键值对" class="headerlink" title="获取hash中的某个键值对"></a>获取hash中的某个键值对</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HGET key field<br></code></pre></td></tr></table></figure><p>input: HGET person name</p><p>result: “WCL”</p><h4 id="获取hash中的所有键值对"><a href="#获取hash中的所有键值对" class="headerlink" title="获取hash中的所有键值对"></a>获取hash中的所有键值对</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HGETALL key<br></code></pre></td></tr></table></figure><p>input: HGETALL person </p><p>result: \1) “name” 2) “WCL” 3) “age” 4) “20”</p><h4 id="删除hash中的某个键值对"><a href="#删除hash中的某个键值对" class="headerlink" title="删除hash中的某个键值对"></a>删除hash中的某个键值对</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HDEL key field [field ...]<br></code></pre></td></tr></table></figure><p>input: HDEL person age</p><h4 id="判断某个键值对是否存在"><a href="#判断某个键值对是否存在" class="headerlink" title="判断某个键值对是否存在"></a>判断某个键值对是否存在</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HEXISTS key field<br></code></pre></td></tr></table></figure><p>input: HEXISTS person name</p><h4 id="获取hash中的所有键"><a href="#获取hash中的所有键" class="headerlink" title="获取hash中的所有键"></a>获取hash中的所有键</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HKEYS key<br></code></pre></td></tr></table></figure><p>input: HKEYS person</p><p>result: 1) “name”</p><h4 id="获取所有键的数量"><a href="#获取所有键的数量" class="headerlink" title="获取所有键的数量"></a>获取所有键的数量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HLEN key<br></code></pre></td></tr></table></figure><p>input: HLEN person</p><p>result: (integer) 1</p><h3 id="6、发布订阅模式"><a href="#6、发布订阅模式" class="headerlink" title="6、发布订阅模式"></a>6、发布订阅模式</h3><p>可以有多个订阅，这样在一个频道发布消息的时候，所有的订阅频道就会收到消息</p><h4 id="订阅一个频道"><a href="#订阅一个频道" class="headerlink" title="订阅一个频道"></a>订阅一个频道</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SUBSCRIBE channel [channel ...]<br></code></pre></td></tr></table></figure><h4 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PUBLISH channel message<br></code></pre></td></tr></table></figure><h3 id="7、消息队列Stream"><a href="#7、消息队列Stream" class="headerlink" title="7、消息队列Stream"></a>7、消息队列Stream</h3><h4 id="向Stream中添加消息"><a href="#向Stream中添加消息" class="headerlink" title="向Stream中添加消息"></a>向Stream中添加消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XADD key [NOMKSTREAM] [MAXLEN | MINID [= | ~] threshold [LIMIT count]] * | id field value [field value ...]<br></code></pre></td></tr></table></figure><p>input: </p><p>XADD geekhour * course redis &#x2F;&#x2F;  * 表示让redis自己指定id，同时保证id是自增的</p><p>result: (消息id)</p><p>“1693972260450-0”</p><p>XADD geekhour * course git</p><p> “1693972263302-0”</p><p>XADD geekhour * course docker</p><p>“1693972270408-0”</p><h5 id="指定ID添加消息"><a href="#指定ID添加消息" class="headerlink" title="指定ID添加消息"></a>指定ID添加消息</h5><p>id格式是：时间戳-序列号</p><p>XADD geekhour 1-0 course git</p><p>XADD geekhour 2-0 course docker</p><p>XADD geekhour 3-0 course docker</p><h4 id="查看stream中消息的数量"><a href="#查看stream中消息的数量" class="headerlink" title="查看stream中消息的数量"></a>查看stream中消息的数量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XLEN key<br></code></pre></td></tr></table></figure><p>input:</p><p>XLEN geekhour</p><p>result:</p><p>(integer) 3</p><h4 id="查看消息的详细内容"><a href="#查看消息的详细内容" class="headerlink" title="查看消息的详细内容"></a>查看消息的详细内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XRANGE key start end [COUNT count]<br></code></pre></td></tr></table></figure><p>可以用 - + 代表全体</p><p>XRANGE geekhour - +</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230906115452722.png" alt="image-20230906115452722"></p><h4 id="删除消息"><a href="#删除消息" class="headerlink" title="删除消息"></a>删除消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XDEL key id [id ...]<br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230906115634274.png" alt="image-20230906115634274"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XTRIM key MAXLEN | MINID [= | ~] threshold [LIMIT count]<br></code></pre></td></tr></table></figure><p>XTRIM geekhour MAXLEN 0 &#x2F;&#x2F; 表示删除所有消息</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230906115847294.png" alt="image-20230906115847294"></p><h4 id="读取消息"><a href="#读取消息" class="headerlink" title="读取消息"></a>读取消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...]<br>// COUNT 是指定一次获取的消息数量<br>// BLOCK 是指定没有获取到消息时阻塞的时间，单位毫秒<br></code></pre></td></tr></table></figure><p>XREAD COUNT 2 BLOCk 1000 STREAMS geekhour 0 &#x2F;&#x2F; 0 表示从头读取</p><p>XREAD COUNT 2 BLOCk 1000 STREAMS geekhour 1 &#x2F;&#x2F; 1 表示从第二条消息开始读取</p><p>XREAD COUNT 2 BLOCk 1000 STREAMS geekhour $ &#x2F;&#x2F; $ 表示获取从现在开始最新的消息</p><p>同时这个消息可以重复读取</p><h4 id="创建消费者组"><a href="#创建消费者组" class="headerlink" title="创建消费者组"></a>创建消费者组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XGROUP CREATE key group id | $ [MKSTREAM] [ENTRIESREAD entries-read]<br></code></pre></td></tr></table></figure><p>XGROUP CREATE geekhour group1 0 &#x2F;&#x2F; 创建一个名为group1的消费者组，0 是id</p><h4 id="获取消费者组的信息"><a href="#获取消费者组的信息" class="headerlink" title="获取消费者组的信息"></a>获取消费者组的信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XINFO GROUPS key<br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230906121200896.png" alt="image-20230906121200896"></p><h4 id="向消费者组中添加消费者"><a href="#向消费者组中添加消费者" class="headerlink" title="向消费者组中添加消费者"></a>向消费者组中添加消费者</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XGROUP CREATECONSUMER key group consumer<br></code></pre></td></tr></table></figure><p>XGROUP CREATECONSUMER geekhour group1 consumer1</p><h4 id="读取消息-1"><a href="#读取消息-1" class="headerlink" title="读取消息"></a>读取消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] id [id ...]<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; &gt; 表示获取最新的消息</p><p> XREADGROUP GROUP group1 consumer1 COUNT 2 BLOCK 3000 STREAMS geekhour &gt; </p><h3 id="8、地理空间Geospatial"><a href="#8、地理空间Geospatial" class="headerlink" title="8、地理空间Geospatial"></a>8、地理空间Geospatial</h3><h4 id="添加地理位置信息"><a href="#添加地理位置信息" class="headerlink" title="添加地理位置信息"></a>添加地理位置信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GEOADD key [NX | XX] [CH] longitude latitude member [longitude latitude member ...]<br></code></pre></td></tr></table></figure><p>GEOADD city 116.405285 39.904989 beijing</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230906194821964.png" alt="image-20230906194821964"></p><p>一次添加多个地理位置信息</p><p>GEOADD city 121.472644 31.231706 shanghai 114.085947 22.547 shenzhen<br>37 23.125178 guangzhou 120.153576 30.287459 hangzhou</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230906195525624.png" alt="image-20230906195525624"></p><h4 id="获取某个地理位置的经纬度"><a href="#获取某个地理位置的经纬度" class="headerlink" title="获取某个地理位置的经纬度"></a>获取某个地理位置的经纬度</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GEOPOS key [member [member ...]]<br></code></pre></td></tr></table></figure><p>GEOPOS city beijing</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230906195619750.png" alt="image-20230906195619750"></p><h4 id="计算两个地理位置之间的距离"><a href="#计算两个地理位置之间的距离" class="headerlink" title="计算两个地理位置之间的距离"></a>计算两个地理位置之间的距离</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GEODIST key member1 member2 [M | KM | FT | MI]<br></code></pre></td></tr></table></figure><p>GEODIST city beijing shanghai</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230906195724372.png" alt="image-20230906195724372"></p><p>默认返回的单位是M，如果要返回km的话就在最后加上km</p><p>GEODIST city beijing shanghai km</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230906195845016.png" alt="image-20230906195845016"></p><h4 id="搜索指定范围内的成员（需要redis版本-gt-6-2）"><a href="#搜索指定范围内的成员（需要redis版本-gt-6-2）" class="headerlink" title="搜索指定范围内的成员（需要redis版本 &gt; 6.2）"></a>搜索指定范围内的成员（需要redis版本 &gt; 6.2）</h4><p>这个范围可以是以一个指定的经纬度或者成员的位置为中心，以圆形或者矩形的范围搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GEOSEARCH key FROMMEMBER member | FROMLONLAT longitude latitude BYRADIUS radius M | KM | FT | MI | BYBOX width height M | KM | FT | MI [ASC | DESC] [COUNT count [ANY]] [WITHCOORD] [WITHDIST] [WITHHASH]<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; BYRADIUS 表示一个圆形的范围</p><p>寻找</p><p>GEOSEARCH city FROMMEMBER shanghai BYRADIUS 300 km</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230906201117951.png" alt="image-20230906201117951"></p><h3 id="9、HyperLogLog"><a href="#9、HyperLogLog" class="headerlink" title="9、HyperLogLog"></a>9、HyperLogLog</h3><p>用于计算集合的基数</p><p>使用随机算法计算，通过牺牲一定的精确度来换取更小的内存消耗，适合用于计算基数大但是对精度要求不是很高的统计工作</p><h4 id="添加一个元素"><a href="#添加一个元素" class="headerlink" title="添加一个元素"></a>添加一个元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PFADD key [element [element ...]]<br></code></pre></td></tr></table></figure><h4 id="查看基数"><a href="#查看基数" class="headerlink" title="查看基数"></a>查看基数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PFCOUNT key [key ...]<br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230907221102331.png" alt="image-20230907221102331"></p><h4 id="合并集合"><a href="#合并集合" class="headerlink" title="合并集合"></a>合并集合</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PFMERGE destkey [sourcekey [sourcekey ...]]<br></code></pre></td></tr></table></figure><p>将sourcekey的值合并放入destkey中</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230907221353718.png" alt="image-20230907221353718"></p><h3 id="10、位图-Bitmap"><a href="#10、位图-Bitmap" class="headerlink" title="10、位图 Bitmap"></a>10、位图 Bitmap</h3><p>位图是字符串类型的扩展，可以用string数组模拟一个bit数组，数组的下标就是偏移量，值只有0和1，支持一些位运算</p><h4 id="设置偏移量的值"><a href="#设置偏移量的值" class="headerlink" title="设置偏移量的值"></a>设置偏移量的值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SETBIT key offset value<br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230907221833920.png" alt="image-20230907221833920"></p><h4 id="获取某个偏移量的值"><a href="#获取某个偏移量的值" class="headerlink" title="获取某个偏移量的值"></a>获取某个偏移量的值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GETBIT key offset<br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230907221912538.png" alt="image-20230907221912538"></p><p>但是这样一位一位的设置很麻烦，由于Bitmap实际上是字符串，所以可以直接使用字符串的命令尝试批量赋值</p><p>‘\xF0’表示的就是 1111 0000</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230907222537739.png" alt="image-20230907222537739"></p><p>所以这个实际上就是设置一个bitmap的前四位为1，后四位为0</p><h4 id="统计bitmap中有多少个1"><a href="#统计bitmap中有多少个1" class="headerlink" title="统计bitmap中有多少个1"></a>统计bitmap中有多少个1</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">BITCOUNT key<br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230907222642998.png" alt="image-20230907222642998"></p><h4 id="获取某个位置第一个出现的0或者1的位置"><a href="#获取某个位置第一个出现的0或者1的位置" class="headerlink" title="获取某个位置第一个出现的0或者1的位置"></a>获取某个位置第一个出现的0或者1的位置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">BITPOS key bit [start [end [BYTE | BIT]]]<br></code></pre></td></tr></table></figure><p>start和end可以指定一个区间，在这个区间范围内搜索</p><p>可以看到test第一个0出现在第一位，第一个1出现在第二位</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230907222825830.png" alt="image-20230907222825830"></p><h3 id="11、位域Bitfield"><a href="#11、位域Bitfield" class="headerlink" title="11、位域Bitfield"></a>11、位域Bitfield</h3><p>将很多小的整数存储到一个较大的位图中 -&gt; 为了更高效的内存使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">BITFIELD key [GET encoding offset | [OVERFLOW WRAP | SAT | FAIL] SET encoding offset value | INCRBY encoding offset increment [GET encoding offset | [OVERFLOW WRAP | SAT | FAIL] SET encoding offset value | INCRBY encoding offset increment ...]]<br></code></pre></td></tr></table></figure><h4 id="新建一个位域-gt-set"><a href="#新建一个位域-gt-set" class="headerlink" title="新建一个位域-&gt; set"></a>新建一个位域-&gt; set</h4><p>BITFIELD player:1 set u8 #0 1</p><p>u8表示是无符号uint8，#0表示第一个位置</p><p>用GET key查看内存中的情况</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909192621847.png" alt="image-20230909192621847"></p><h4 id="获取位域信息-gt-get"><a href="#获取位域信息-gt-get" class="headerlink" title="获取位域信息 -&gt; get"></a>获取位域信息 -&gt; get</h4><p>BITFIELD player:1 get u8 #0 </p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909193005187.png" alt="image-20230909193005187"></p><p>继续新建</p><p>#1 表示第二个位置</p><p>BITFIELD player:1 set u32 #1 100</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909193142016.png" alt="image-20230909193142016"></p><h4 id="增加对应的值"><a href="#增加对应的值" class="headerlink" title="增加对应的值"></a>增加对应的值</h4><p>BITFIELD player:1 incrby u32 #1 100</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909193449138.png" alt="image-20230909193449138"></p><h3 id="12、事务"><a href="#12、事务" class="headerlink" title="12、事务"></a>12、事务</h3><p>MULTI 开启一个事务</p><p>EXEC 执行一个事务</p><p>事务并不能保证所有的命令都执行成功，执行结果取决于事务中的命令</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909194400061.png" alt="image-20230909194400061"></p><p>事务中任意一个任务执行失败都不会导致其他任务的执行</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909194554484.png" alt="image-20230909194554484"></p><h3 id="13、持久化"><a href="#13、持久化" class="headerlink" title="13、持久化"></a>13、持久化</h3><p>redis实现持久化的方式有两种</p><p>1、RDB (Redis Database) 在指定时间内把redis的内存快照保存到磁盘中，更适合做备份</p><p>2、AOF (Append Only File)</p><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>RDB的参数在redis.conf文件中</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909195223242.png" alt="image-20230909195223242"></p><p>也可以用save命令直接触发快照</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909195740647.png" alt="image-20230909195740647"></p><h5 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h5><p>单独创建一个子进程，将内存中的数据写入到硬盘中</p><p>但是fork一个子进程也需要时间，在这段时间内redis不能进行其他操作</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909200046470.png" alt="image-20230909200046470"></p><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909200357580.png" alt="image-20230909200357580"></p><h3 id="14、主从复制"><a href="#14、主从复制" class="headerlink" title="14、主从复制"></a>14、主从复制</h3><p>指的是将一台redis服务器（主节点(master)）的内容复制到其他redis服务器（从节点(slave)）</p><p>主节点负责写操作，从节点负责读操作</p><p>主节点把数据变化通过异步的方式发送给从节点</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909200922665.png" alt="image-20230909200922665"></p><h3 id="15、哨兵模式Sentinel"><a href="#15、哨兵模式Sentinel" class="headerlink" title="15、哨兵模式Sentinel"></a>15、哨兵模式Sentinel</h3><p>以一个独立的进程允许在redis中，用来监控redis集群中的各个节点是否允许正常</p><p>1、监控：</p><p>​通过不断地发送命令来检查redis节点是否正常</p><p>2、通知：</p><p>​如果某个redis节点异常了，哨兵就会通过发布订阅模式来通知其他节点</p><p>3、自动故障转移：<br>    当主节点不能正常工作的时候，哨兵开始一个自动故障转移的操作，将一个从节点升级为新的主节点，然后再将其他的从节点指向新的主节点，</p><h4 id="redis-sentinel-sentinel-conf-启动哨兵节点"><a href="#redis-sentinel-sentinel-conf-启动哨兵节点" class="headerlink" title="redis -sentinel sentinel.conf 启动哨兵节点"></a>redis -sentinel sentinel.conf 启动哨兵节点</h4><p>先新建一个配置文件 sentinel.conf</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230909202158333.png" alt="image-20230909202158333"></p><p>master是主节点的名字，最后的1表示只需要一个哨兵节点同意就可以进行故障转移了</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode</title>
    <link href="/2023/09/04/leetcode/"/>
    <url>/2023/09/04/leetcode/</url>
    
    <content type="html"><![CDATA[<h3 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h3><h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">1.两数之和</a></h4><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,7,11,15]</span>, target = 9<br>输出：<span class="hljs-comment">[0,1]</span><br>解释：因为 nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> == 9 ，返回 <span class="hljs-comment">[0, 1]</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,2,4]</span>, target = 6<br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,3]</span>, target = 6<br>输出：<span class="hljs-comment">[0,1]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p><p>自己写的</p><p>单纯的C语言思想</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>length := <span class="hljs-built_in">len</span>(nums)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; length; i++ &#123;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt; length; j++ &#123;<br><span class="hljs-keyword">if</span> i == j &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">if</span> nums[i]+nums[j] == target &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;i, j&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>主要就是靠暴力，因为是两数之和，所以两层循环解决</p><p>官方暴力解法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>length := <span class="hljs-built_in">len</span>(nums)<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> nums &#123;<br><span class="hljs-keyword">for</span> j := k + <span class="hljs-number">1</span>; j &lt; length; j++ &#123;<br><span class="hljs-keyword">if</span> v+nums[j] == target &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;k, j&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>官方的更优解法</p><p>直接使用哈希表</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">思路及算法<br><br>注意到方法一的时间复杂度较高的原因是寻找 <span class="hljs-keyword">target</span> - <span class="hljs-keyword">x</span> 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。<br><br>使用哈希表，可以将寻找 <span class="hljs-keyword">target</span> - <span class="hljs-keyword">x</span> 的时间复杂度降低到从 O(N) 降低到 O(<span class="hljs-number">1</span>)。<br><br>这样我们创建一个哈希表，对于每一个 <span class="hljs-keyword">x</span>，我们首先查询哈希表中是否存在 <span class="hljs-keyword">target</span> - <span class="hljs-keyword">x</span>，然后将 <span class="hljs-keyword">x</span> 插入到哈希表中，即可保证不会让 <span class="hljs-keyword">x</span> 和自己匹配。<br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>hashTable := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i, x := <span class="hljs-keyword">range</span> nums &#123;<br><span class="hljs-keyword">if</span> p, ok := hashTable[target-x]; ok &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;p, i&#125;<br>&#125;<br>hashTable[x] = i<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h3><h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h4><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;abcabcbb&quot;</span><br><span class="hljs-section">输出: 3 </span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;bbbbb&quot;</span><br><span class="hljs-section">输出: 1</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;pwwkew&quot;</span><br><span class="hljs-section">输出: 3</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br>     请注意，你的答案必须是 子串 的长度，<span class="hljs-string">&quot;pwke&quot;</span> 是一个子序列，不是子串。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><p>chatgpt给出的答案：</p><p>用滑动窗口的方法：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">算法思路：<br><br>定义两个指针 <span class="hljs-keyword">left</span> 和 <span class="hljs-keyword">right</span>，表示当前子串的左右边界。<br>用一个哈希表（<span class="hljs-keyword">map</span>）来存储当前窗口中每个字符及其出现的位置。<br>不断移动 <span class="hljs-keyword">right</span> 指针，将字符加入窗口，并更新哈希表。<br>当窗口中出现重复字符时，移动 <span class="hljs-keyword">left</span> 指针，缩小窗口，直到窗口中没有重复字符为止。<br>在整个过程中，记录窗口的最大长度即可。<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>charMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">byte</span>]<span class="hljs-type">int</span>) <span class="hljs-comment">// 用于存储当前窗口中每个字符及其出现的位置</span><br>maxLength := <span class="hljs-number">0</span><br>left := <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> right := <span class="hljs-number">0</span>; right &lt; <span class="hljs-built_in">len</span>(s); right++ &#123;<br><span class="hljs-keyword">if</span> index, found := charMap[s[right]]; found &#123;<br><span class="hljs-comment">// 如果字符在窗口中已经出现过，则更新 left 指针，移动到重复字符的下一个位置</span><br>left = max(left, index+<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-comment">// 更新字符的最新位置</span><br>charMap[s[right]] = right<br><span class="hljs-comment">// 计算当前窗口的长度并更新最大长度</span><br>maxLength = max(maxLength, right-left+<span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-keyword">return</span> maxLength<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> a &gt; b &#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><p>官方解法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-comment">// 哈希集合，记录每个字符是否出现过</span><br>m := <span class="hljs-keyword">map</span>[<span class="hljs-type">byte</span>]<span class="hljs-type">int</span>&#123;&#125;<br>n := <span class="hljs-built_in">len</span>(s)<br><span class="hljs-comment">// 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span><br>rk, ans := <span class="hljs-number">-1</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br><span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 左指针向右移动一格，移除一个字符</span><br><span class="hljs-built_in">delete</span>(m, s[i<span class="hljs-number">-1</span>])<br>&#125;<br><span class="hljs-keyword">for</span> rk+<span class="hljs-number">1</span> &lt; n &amp;&amp; m[s[rk+<span class="hljs-number">1</span>]] == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 不断地移动右指针</span><br>m[s[rk+<span class="hljs-number">1</span>]]++<br>rk++<br>&#125;<br><span class="hljs-comment">// 第 i 到 rk 个字符是一个极长的无重复字符子串</span><br>ans = max(ans, rk-i+<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> x &lt; y &#123;<br><span class="hljs-keyword">return</span> y<br>&#125;<br><span class="hljs-keyword">return</span> x<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="day3"><a href="#day3" class="headerlink" title="day3"></a>day3</h3><h4 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a><a href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a></h4><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[2,4,3]</span>, l2 = <span class="hljs-comment">[5,6,4]</span><br>输出：<span class="hljs-comment">[7,0,8]</span><br>解释：342 + 465 = 807.<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[0]</span>, l2 = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[0]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：l1 = [<span class="hljs-number">9,9,9,9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>], l2 = [<span class="hljs-number">9,9,9,9</span>]<br>输出：[<span class="hljs-number">8,9,9,9</span>,<span class="hljs-number">0,0,0,1</span>]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><p>自己写的</p><p>可以通过大部分测试用例，但是当输入过大无法用int表示时会溢出，导致错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(l1 *ListNode, l2 *ListNode)</span></span> *ListNode &#123;<br>num1, num2, dig := <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>digit := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> l1 != <span class="hljs-literal">nil</span> &#123;<br>num1 += l1.Val * <span class="hljs-type">int</span>(math.Pow(<span class="hljs-number">10</span>, <span class="hljs-type">float64</span>(dig)))<br>dig++<br>l1 = l1.Next<br>&#125;<br>dig = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> l2 != <span class="hljs-literal">nil</span> &#123;<br>num2 += l2.Val * <span class="hljs-type">int</span>(math.Pow(<span class="hljs-number">10</span>, <span class="hljs-type">float64</span>(dig)))<br>dig++<br>l2 = l2.Next<br>&#125;<br>res := num1 + num2<br><span class="hljs-keyword">var</span> head *ListNode <span class="hljs-comment">// 链表头节点</span><br><span class="hljs-keyword">var</span> tail *ListNode <span class="hljs-comment">// 链表尾节点</span><br><span class="hljs-keyword">if</span> res == <span class="hljs-number">0</span> &#123;<br>head = &amp;ListNode&#123;Val: res&#125;<br><span class="hljs-keyword">return</span> head<br>&#125;<br><span class="hljs-keyword">for</span> res &gt; <span class="hljs-number">0</span> &#123;<br>res, digit = res/<span class="hljs-number">10</span>, res%<span class="hljs-number">10</span><br>newNode := &amp;ListNode&#123;Val: digit&#125;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> &#123;<br>head = newNode<br>tail = newNode<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tail.Next = newNode<br>tail = newNode<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> head<br>&#125;<br></code></pre></td></tr></table></figure><p>官方提供的方法：</p><p>直接把相同的位数相加，然后计算好进位处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(l1 *ListNode, l2 *ListNode)</span></span> *ListNode &#123;<br>sum, carry := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> head *ListNode <span class="hljs-comment">// 链表头节点</span><br><span class="hljs-keyword">var</span> tail *ListNode <span class="hljs-comment">// 链表尾节点</span><br><span class="hljs-keyword">for</span> l1 != <span class="hljs-literal">nil</span> || l2 != <span class="hljs-literal">nil</span> &#123; <br>n1, n2 := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> l1 != <span class="hljs-literal">nil</span> &#123;<br>n1 = l1.Val<br>l1 = l1.Next<br>&#125;<br><br><span class="hljs-keyword">if</span> l2 != <span class="hljs-literal">nil</span> &#123;<br>n2 = l2.Val<br>l2 = l2.Next<br>&#125;<br>sum = n1 + n2 + carry<br>sum, carry = sum%<span class="hljs-number">10</span>, sum/<span class="hljs-number">10</span><br>newNode := &amp;ListNode&#123;Val: sum&#125;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> &#123;<br>head = newNode<br>tail = newNode<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tail.Next = newNode<br>tail = newNode<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> carry &gt; <span class="hljs-number">0</span> &#123;<br>tail.Next = &amp;ListNode&#123;Val: carry&#125;<br>&#125;<br><span class="hljs-keyword">return</span> head<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h3><h4 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></h4><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p><p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1,3]</span>, nums2 = <span class="hljs-comment">[2]</span><br>输出：2.00000<br>解释：合并数组 = <span class="hljs-comment">[1,2,3]</span> ，中位数 2<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：<span class="hljs-symbol">nums1</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], <span class="hljs-symbol">nums2</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>输出：<span class="hljs-number">2.50000</span><br>解释：合并数组 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>] ，中位数 <span class="hljs-comment">(2 + 3)</span> / <span class="hljs-number">2</span> = <span class="hljs-number">2.5</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>nums1.length == m</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m &lt;= 1000</code></li><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= m + n &lt;= 2000</code></li><li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li></ul><p>首先这是自己写的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(nums1 []<span class="hljs-type">int</span>, nums2 []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums1)+<span class="hljs-built_in">len</span>(nums2))<br>i, j := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i &lt; <span class="hljs-built_in">len</span>(nums1) &amp;&amp; j &lt; <span class="hljs-built_in">len</span>(nums2) &#123;<br><span class="hljs-keyword">if</span> nums1[i] &lt; nums2[j] &#123;<br>res = <span class="hljs-built_in">append</span>(res, nums1[i])<br>i++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res = <span class="hljs-built_in">append</span>(res, nums2[j])<br>j++<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> i &lt; <span class="hljs-built_in">len</span>(nums1) &#123;<br>res = <span class="hljs-built_in">append</span>(res, nums1[i])<br>i++<br>&#125;<br><span class="hljs-keyword">for</span> j &lt; <span class="hljs-built_in">len</span>(nums2) &#123;<br>res = <span class="hljs-built_in">append</span>(res, nums2[j])<br>j++<br>&#125;<br><span class="hljs-keyword">return</span> median(res)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">median</span><span class="hljs-params">(s []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s)%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(s[<span class="hljs-built_in">len</span>(s)/<span class="hljs-number">2</span>]+s[(<span class="hljs-built_in">len</span>(s)/<span class="hljs-number">2</span>)<span class="hljs-number">-1</span>]) / <span class="hljs-number">2.0</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(s[(<span class="hljs-built_in">len</span>(s) / <span class="hljs-number">2</span>)])<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>经过chatgpt优化之后，消耗的时间大大减小了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(nums1 []<span class="hljs-type">int</span>, nums2 []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>m, n := <span class="hljs-built_in">len</span>(nums1), <span class="hljs-built_in">len</span>(nums2)<br>totalLen := m + n<br>res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, totalLen)<br><br>i, j, k := <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i &lt; m &amp;&amp; j &lt; n &#123;<br><span class="hljs-keyword">if</span> nums1[i] &lt; nums2[j] &#123;<br>res[k] = nums1[i]<br>i++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res[k] = nums2[j]<br>j++<br>&#125;<br>k++<br>&#125;<br><br><span class="hljs-keyword">for</span> i &lt; m &#123;<br>res[k] = nums1[i]<br>i++<br>k++<br>&#125;<br><span class="hljs-keyword">for</span> j &lt; n &#123;<br>res[k] = nums2[j]<br>j++<br>k++<br>&#125;<br><br><span class="hljs-keyword">if</span> totalLen%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(res[totalLen/<span class="hljs-number">2</span>]+res[(totalLen/<span class="hljs-number">2</span>)<span class="hljs-number">-1</span>]) / <span class="hljs-number">2.0</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(res[totalLen/<span class="hljs-number">2</span>])<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于题目要求算法的时间复杂度为log(m+n)，所以会联想到二分法</p><p>官方给的wp，将寻找中位数的操作转换为寻找第K小的数，不断地缩小数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(nums1 []<span class="hljs-type">int</span>, nums2 []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>totalLength := <span class="hljs-built_in">len</span>(nums1) + <span class="hljs-built_in">len</span>(nums2)<br><span class="hljs-keyword">if</span> totalLength%<span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123; <span class="hljs-comment">// 总长度为奇数</span><br>midIndex := totalLength / <span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(getKthElement(nums1, nums2, midIndex+<span class="hljs-number">1</span>))<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 总长度为偶数</span><br>midIndex1, midIndex2 := totalLength/<span class="hljs-number">2</span><span class="hljs-number">-1</span>, totalLength/<span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(getKthElement(nums1, nums2, midIndex1+<span class="hljs-number">1</span>)+getKthElement(nums1, nums2, midIndex2+<span class="hljs-number">1</span>)) / <span class="hljs-number">2.0</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getKthElement</span><span class="hljs-params">(nums1, nums2 []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>index1, index2 := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> index1 == <span class="hljs-built_in">len</span>(nums1) &#123;<br><span class="hljs-keyword">return</span> nums2[index2+k<span class="hljs-number">-1</span>]<br>&#125;<br><span class="hljs-keyword">if</span> index2 == <span class="hljs-built_in">len</span>(nums2) &#123;<br><span class="hljs-keyword">return</span> nums1[index1+k<span class="hljs-number">-1</span>]<br>&#125;<br><span class="hljs-keyword">if</span> k == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> min(nums1[index1], nums2[index2])<br>&#125;<br>half := k / <span class="hljs-number">2</span><br>newIndex1 := min(index1+half, <span class="hljs-built_in">len</span>(nums1)) - <span class="hljs-number">1</span><br>newIndex2 := min(index2+half, <span class="hljs-built_in">len</span>(nums2)) - <span class="hljs-number">1</span><br>pivot1, pivot2 := nums1[newIndex1], nums2[newIndex2]<br><span class="hljs-keyword">if</span> pivot1 &lt;= pivot2 &#123;<br>k -= newIndex1 - index1 + <span class="hljs-number">1</span><br>index1 = newIndex1 + <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>k -= newIndex2 - index2 + <span class="hljs-number">1</span><br>index2 = newIndex2 + <span class="hljs-number">1</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">min</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> x &lt; y &#123;<br><span class="hljs-keyword">return</span> x<br>&#125;<br><span class="hljs-keyword">return</span> y<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h3><h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h4><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;babad&quot;</span><br>输出：<span class="hljs-string">&quot;bab&quot;</span><br>解释：<span class="hljs-string">&quot;aba&quot;</span> 同样是符合题意的答案。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cbbd&quot;</span><br>输出：<span class="hljs-string">&quot;bb&quot;</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母组成</li></ul><p>用动态规划直接开始做，时间复杂度相较于暴力的O(n^3) 降低到了O(n^2)，原因就是中间那一段判断是否为回文的情况从 O(n) 优化到了O(1) </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>n := <span class="hljs-built_in">len</span>(s)<br><span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> s<br>&#125;<br>dp := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">bool</span>, n)<br><span class="hljs-comment">// 记录起始位置和字串长度</span><br>start, maxLen := <span class="hljs-number">-1</span>, <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> dp &#123;<br>dp[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">bool</span>, n)<br>dp[i][i] = <span class="hljs-literal">true</span> <span class="hljs-comment">// 单个字符是回文</span><br>&#125;<br>start, maxLen = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> Len := <span class="hljs-number">2</span>; Len &lt;= n; Len++ &#123;   <span class="hljs-comment">// 子串长度从2开始</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i+Len &lt;= n; i++ &#123; <span class="hljs-comment">// 左边界</span><br>j := i + Len - <span class="hljs-number">1</span>  <span class="hljs-comment">// 右边界</span><br><span class="hljs-keyword">if</span> s[i] != s[j] &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">if</span> Len &gt; <span class="hljs-number">2</span> &amp;&amp; !dp[i+<span class="hljs-number">1</span>][j<span class="hljs-number">-1</span>] &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>dp[i][j] = <span class="hljs-literal">true</span><br>start = i<br>maxLen = Len<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> s[start : start+maxLen]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>中心拓展法</p><p>枚举所有的「回文中心」并尝试「扩展」，直到无法扩展为止，此时的回文串长度即为此「回文中心」下的最长回文串长度。我们对所有的长度求出最大值，即可得到最终的答案。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">expandAroundCenter</span><span class="hljs-params">(s <span class="hljs-type">string</span>, left <span class="hljs-type">int</span>, right <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">for</span> left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; <span class="hljs-built_in">len</span>(s) &amp;&amp; s[left] == s[right] &#123;<br>        left--<br>        right++<br>    &#125;<br>    <span class="hljs-keyword">return</span> s[left+<span class="hljs-number">1</span> : right]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(s)<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> s<br>    &#125;<br><br>    result := <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-comment">// 以当前字符为中心的奇数长度回文子串</span><br>        oddPalin := expandAroundCenter(s, i, i)<br>        <span class="hljs-comment">// 以当前字符和下一个字符的中间为中心的偶数长度回文子串</span><br>        evenPalin := expandAroundCenter(s, i, i+<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(oddPalin) &gt; <span class="hljs-built_in">len</span>(result) &#123;<br>            result = oddPalin<br>        &#125;<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(evenPalin) &gt; <span class="hljs-built_in">len</span>(result) &#123;<br>            result = evenPalin<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day6"><a href="#day6" class="headerlink" title="day6"></a>day6</h3><h4 id="6-N-字形变换"><a href="#6-N-字形变换" class="headerlink" title="6. N 字形变换"></a><a href="https://leetcode.cn/problems/zigzag-conversion/">6. N 字形变换</a></h4><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 <code>&quot;PAYPALISHIRING&quot;</code> 行数为 <code>3</code> 时，排列如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">P</span>   <span class="hljs-selector-tag">A</span>   H   N<br><span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">P</span> L S <span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">I</span> G<br>Y   <span class="hljs-selector-tag">I</span>   R<br></code></pre></td></tr></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;PAHNAPLSIIGYIR&quot;</code>。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">convert</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s, <span class="hljs-built_in">int</span> numRows</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;PAYPALISHIRING&quot;</span>, <span class="hljs-attr">numRows</span> = <span class="hljs-number">3</span><br>输出：<span class="hljs-string">&quot;PAHNAPLSIIGYIR&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">输入：<span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;PAYPALISHIRING&quot;</span><span class="hljs-operator">,</span> <span class="hljs-variable">numRows</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span><br>输出：<span class="hljs-string">&quot;PINALSIGYAHRPI&quot;</span><br>解释：<br><span class="hljs-variable">P</span>     <span class="hljs-built_in">I</span>    <span class="hljs-built_in">N</span><br><span class="hljs-variable">A</span>   <span class="hljs-variable">L</span> <span class="hljs-variable">S</span>  <span class="hljs-built_in">I</span> <span class="hljs-variable">G</span><br><span class="hljs-variable">Y</span> <span class="hljs-variable">A</span>   <span class="hljs-variable">H</span> <span class="hljs-variable">R</span><br><span class="hljs-variable">P</span>     <span class="hljs-built_in">I</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-attr">numRows</span> = <span class="hljs-number">1</span><br>输出：<span class="hljs-string">&quot;A&quot;</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 由英文字母（小写和大写）、<code>&#39;,&#39;</code> 和 <code>&#39;.&#39;</code> 组成</li><li><code>1 &lt;= numRows &lt;= 1000</code></li></ul><p>主要的思路就是用一个[]string保存这个字符串，再定义一个方向变量和行数变量，有点像邻接链表的图</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230811114859725.png" alt="image-20230811114859725"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">convert</span><span class="hljs-params">(s <span class="hljs-type">string</span>, numRows <span class="hljs-type">int</span>)</span></span> (ans <span class="hljs-type">string</span>) &#123;<br>n := <span class="hljs-built_in">len</span>(s)<br><span class="hljs-keyword">if</span> numRows == <span class="hljs-number">1</span> || n &lt; numRows &#123;<br>ans = s<br><span class="hljs-keyword">return</span><br>&#125;<br><br>row, dir := <span class="hljs-number">0</span>, <span class="hljs-literal">false</span><br>rows := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, numRows)<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br>rows[row] += <span class="hljs-type">string</span>(v)<br><span class="hljs-keyword">if</span> row == <span class="hljs-number">0</span> || row == numRows<span class="hljs-number">-1</span> &#123;<br>dir = !dir<br>&#125;<br><span class="hljs-keyword">if</span> dir &#123;<br>row++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>row--<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> rows &#123;<br>ans += v<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day7"><a href="#day7" class="headerlink" title="day7"></a>day7</h3><h4 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7. 整数反转"></a><a href="https://leetcode.cn/problems/reverse-integer/">7. 整数反转</a></h4><p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−231, 231 − 1]</code> ，就返回 0。</p><p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：x <span class="hljs-operator">=</span> <span class="hljs-number">123</span><br>输出：<span class="hljs-number">321</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：x = <span class="hljs-string">-123</span><br>输出：<span class="hljs-string">-321</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：x <span class="hljs-operator">=</span> <span class="hljs-number">120</span><br>输出：<span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：x <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>输出：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= x &lt;= 231 - 1</code></li></ul><p>初步解答：</p><p>主要的想法是把这个整数当作字符串处理，然后逆序输出，时间复杂度为O(n)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rev</span><span class="hljs-params">(str <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>bytes := []<span class="hljs-type">byte</span>(str)<br>n := <span class="hljs-built_in">len</span>(bytes)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n/<span class="hljs-number">2</span>; i++ &#123;<br>tmp := bytes[n-i<span class="hljs-number">-1</span>]<br>bytes[n-i<span class="hljs-number">-1</span>] = bytes[i]<br>bytes[i] = tmp<br>&#125;<br>str = <span class="hljs-type">string</span>(bytes)<br>num, _ := strconv.Atoi(str)<br><span class="hljs-keyword">return</span> num<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>str := strconv.Itoa(x)<br><span class="hljs-keyword">if</span> x &gt;= <span class="hljs-number">0</span> &#123;<br>num := rev(str)<br><span class="hljs-keyword">if</span> num &gt; math.MaxInt32 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">return</span> num<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 去掉符号</span><br>str = str[<span class="hljs-number">1</span>:]<br>num := rev(str)<br><span class="hljs-keyword">if</span> num &gt; math.MaxInt32 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">return</span> -num<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>官方给的答案：</p><p>妙，直接用循环逆序了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> (rev <span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">for</span> x != <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">if</span> rev &lt; math.MinInt32/<span class="hljs-number">10</span> || rev &gt; math.MaxInt32/<span class="hljs-number">10</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        digit := x % <span class="hljs-number">10</span><br>        x /= <span class="hljs-number">10</span><br>        rev = rev*<span class="hljs-number">10</span> + digit<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="day8"><a href="#day8" class="headerlink" title="day8"></a>day8</h3><h4 id="8-字符串转换整数-atoi"><a href="#8-字符串转换整数-atoi" class="headerlink" title="8. 字符串转换整数 (atoi)"></a><a href="https://leetcode.cn/problems/string-to-integer-atoi/">8. 字符串转换整数 (atoi)</a></h4><p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&#x2F;C++ 中的 <code>atoi</code> 函数）。</p><p>函数 <code>myAtoi(string s)</code> 的算法如下：</p><ol><li>读入字符串并丢弃无用的前导空格</li><li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li><li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li><li>将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 <code>0</code> 。必要时更改符号（从步骤 2 开始）。</li><li>如果整数数超过 32 位有符号整数范围 <code>[−231, 231 − 1]</code> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <code>−231</code> 的整数应该被固定为 <code>−231</code> ，大于 <code>231 − 1</code> 的整数应该被固定为 <code>231 − 1</code> 。</li><li>返回整数作为最终结果。</li></ol><p><strong>注意：</strong></p><ul><li>本题中的空白字符只包括空格字符 <code>&#39; &#39;</code> 。</li><li>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：s = <span class="hljs-string">&quot;42&quot;</span><br>输出：<span class="hljs-number">42</span><br>解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。<br>第 <span class="hljs-number">1</span> 步：<span class="hljs-string">&quot;42&quot;</span>（当前没有读入字符，因为没有前导空格）<br>         ^<br>第 <span class="hljs-number">2</span> 步：<span class="hljs-string">&quot;42&quot;</span>（当前没有读入字符，因为这里不存在 <span class="hljs-string">&#x27;-&#x27;</span> 或者 <span class="hljs-string">&#x27;+&#x27;</span>）<br>         ^<br>第 <span class="hljs-number">3</span> 步：<span class="hljs-string">&quot;42&quot;</span>（读入 <span class="hljs-string">&quot;42&quot;</span>）<br>           ^<br>解析得到整数 <span class="hljs-number">42</span> 。<br>由于 <span class="hljs-string">&quot;42&quot;</span> 在范围 [<span class="hljs-number">-231</span>, <span class="hljs-number">231</span> - <span class="hljs-number">1</span>] 内，最终结果为 <span class="hljs-number">42</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：s = &quot;   <span class="hljs-string">-42</span>&quot;<br>输出：<span class="hljs-string">-42</span><br>解释：<br>第 1 步：&quot;   <span class="hljs-string">-42</span>&quot;（读入前导空格，但忽视掉）<br>            ^<br>第 2 步：&quot;   <span class="hljs-string">-42</span>&quot;（读入 &#x27;-&#x27; 字符，所以结果应该是负数）<br>             ^<br>第 3 步：&quot;   <span class="hljs-string">-42</span>&quot;（读入 &quot;42&quot;）<br>               ^<br>解析得到整数 <span class="hljs-string">-42</span> 。<br>由于 &quot;<span class="hljs-string">-42</span>&quot; 在范围 [<span class="hljs-string">-231</span>, 231 - 1] 内，最终结果为 <span class="hljs-string">-42</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：s = <span class="hljs-string">&quot;4193 with words&quot;</span><br>输出：<span class="hljs-number">4193</span><br>解释：<br>第 <span class="hljs-number">1</span> 步：<span class="hljs-string">&quot;4193 with words&quot;</span>（当前没有读入字符，因为没有前导空格）<br>         ^<br>第 <span class="hljs-number">2</span> 步：<span class="hljs-string">&quot;4193 with words&quot;</span>（当前没有读入字符，因为这里不存在 <span class="hljs-string">&#x27;-&#x27;</span> 或者 <span class="hljs-string">&#x27;+&#x27;</span>）<br>         ^<br>第 <span class="hljs-number">3</span> 步：<span class="hljs-string">&quot;4193 with words&quot;</span>（读入 <span class="hljs-string">&quot;4193&quot;</span>；由于下一个字符不是一个数字，所以读入停止）<br>             ^<br>解析得到整数 <span class="hljs-number">4193</span> 。<br>由于 <span class="hljs-string">&quot;4193&quot;</span> 在范围 [<span class="hljs-number">-231</span>, <span class="hljs-number">231</span> - <span class="hljs-number">1</span>] 内，最终结果为 <span class="hljs-number">4193</span> 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 200</code></li><li><code>s</code> 由英文字母（大写和小写）、数字（<code>0-9</code>）、<code>&#39; &#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;-&#39;</code> 和 <code>&#39;.&#39;</code> 组成</li></ul><p>题目坑挺多，写出来倒是很简单，就是和示例中给的三步一样，写出对应的代码就行，就是最后的溢出判断那里，不能放在循环外面，要不然会错，leetcode还有更高阶的做法，直接引入一个有限状态机</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myAtoi</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> (ans <span class="hljs-type">int</span>) &#123;<br>    ans = <span class="hljs-number">0</span><br>    n := <span class="hljs-built_in">len</span>(s)<br>    i, sign := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-comment">// 去除前导空格</span><br>    <span class="hljs-keyword">for</span> ; i &lt; n &amp;&amp; s[i] == <span class="hljs-string">&#x27; &#x27;</span>; i++ &#123;<br>    &#125;<br>    <span class="hljs-keyword">if</span> i == n &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-comment">// 读入字符</span><br>    <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;+&#x27;</span> &#123;<br>       i++<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;-&#x27;</span> &#123;<br>       sign = <span class="hljs-number">-1</span><br>       i++<br>    &#125;<br>    <span class="hljs-comment">// 读入数字</span><br>    <span class="hljs-keyword">for</span> j := i; j &lt; n &amp;&amp; s[j] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; s[j] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; j++ &#123;<br>       ans = ans*<span class="hljs-number">10</span> + sign*<span class="hljs-type">int</span>(s[j]-<span class="hljs-string">&#x27;0&#x27;</span>)<br>       <span class="hljs-comment">// 溢出判断</span><br>       <span class="hljs-keyword">if</span> ans &lt; <span class="hljs-number">0</span> &amp;&amp; ans &lt;= math.MinInt32 &#123;<br>          ans = math.MinInt32<br>       &#125;<br><br>       <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">0</span> &amp;&amp; ans &gt;= math.MaxInt32 &#123;<br>          ans = math.MaxInt32<br>       &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day9"><a href="#day9" class="headerlink" title="day9"></a>day9</h3><h4 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a><a href="https://leetcode.cn/problems/palindrome-number/">9. 回文数</a></h4><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><ul><li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">输入：<span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">121</span><br>输出：<span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">输入：<span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">-121</span><br>输出：<span class="hljs-keyword">false</span><br>解释：从左向右读<span class="hljs-punctuation">,</span> 为 <span class="hljs-number">-121</span> 。 从右向左读<span class="hljs-punctuation">,</span> 为 <span class="hljs-number">121</span>- 。因此它不是一个回文数。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">输入：<span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br>输出：<span class="hljs-keyword">false</span><br>解释：从右向左读<span class="hljs-punctuation">,</span> 为 <span class="hljs-number">01</span> 。因此它不是一个回文数。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= x &lt;= 231 - 1</code></li></ul><p>可知直接把整数转换为字符串，然后分成奇数和偶数两种情况，奇数就从中间一位的两边开始对比，偶数也类似</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>str := strconv.Itoa(x)<br>count, n := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(str)<br><span class="hljs-keyword">if</span> n%<span class="hljs-number">2</span> != <span class="hljs-number">0</span> &#123;<br>j := n/<span class="hljs-number">2</span> + <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i := n/<span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> j &gt;= n &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> str[i] == str[j] &#123;<br>count++<br>&#125;<br>j++<br>&#125;<br><span class="hljs-keyword">if</span> count*<span class="hljs-number">2</span> == n<span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br>&#125;<br><br>j := n / <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i := n/<span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br><span class="hljs-keyword">if</span> j &gt;= n &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> str[i] == str[j] &#123;<br>count++<br>&#125;<br>j++<br>&#125;<br><span class="hljs-keyword">if</span> count*<span class="hljs-number">2</span> == n &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>不转换为字符串如下：</p><p>1、首先所有的负数都不是回文数</p><p>2、以0结尾的数，除了0都不是回文数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> || (x % <span class="hljs-number">10</span> == <span class="hljs-number">0</span> &amp;&amp; x !=<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125; <br>    rev := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x &gt; rev &#123;<br>        rev = rev * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span> <span class="hljs-comment">// 获得后几位的倒序</span><br>        x /= <span class="hljs-number">10</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> x == rev || x == rev / <span class="hljs-number">10</span> <span class="hljs-comment">// rev/10是奇数，另一个是偶数</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h3><h4 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10. 正则表达式匹配"></a><a href="https://leetcode.cn/problems/regular-expression-matching/">10. 正则表达式匹配</a></h4><p>给你一个字符串 <code>s</code> 和一个字符规律 <code>p</code>，请你来实现一个支持 <code>&#39;.&#39;</code> 和 <code>&#39;*&#39;</code> 的正则表达式匹配。</p><ul><li><code>&#39;.&#39;</code> 匹配任意单个字符</li><li><code>&#39;*&#39;</code> 匹配零个或多个前面的那一个元素</li></ul><p>所谓匹配，是要涵盖 <strong>整个</strong> 字符串 <code>s</code>的，而不是部分字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-attr">p</span> = <span class="hljs-string">&quot;a&quot;</span><br>输出：<span class="hljs-literal">false</span><br>解释：<span class="hljs-string">&quot;a&quot;</span> 无法匹配 <span class="hljs-string">&quot;aa&quot;</span> 整个字符串。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入：s = <span class="hljs-string">&quot;aa&quot;</span>, p = <span class="hljs-string">&quot;a*&quot;</span><br>输出：<span class="hljs-literal">true</span><br>解释：因为 <span class="hljs-string">&#x27;*&#x27;</span> 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 <span class="hljs-string">&#x27;a&#x27;</span>。因此，字符串 <span class="hljs-string">&quot;aa&quot;</span> 可被视为 <span class="hljs-string">&#x27;a&#x27;</span> 重复了一次。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入：s = <span class="hljs-string">&quot;ab&quot;</span>, p = <span class="hljs-string">&quot;.*&quot;</span><br>输出：<span class="hljs-literal">true</span><br>解释：<span class="hljs-string">&quot;.*&quot;</span> 表示可匹配零个或多个（<span class="hljs-string">&#x27;*&#x27;</span>）任意字符（<span class="hljs-string">&#x27;.&#x27;</span>）。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 20</code></li><li><code>1 &lt;= p.length &lt;= 20</code></li><li><code>s</code> 只包含从 <code>a-z</code> 的小写字母。</li><li><code>p</code> 只包含从 <code>a-z</code> 的小写字母，以及字符 <code>.</code> 和 <code>*</code>。</li><li>保证每次出现字符 <code>*</code> 时，前面都匹配到有效的字符</li></ul><p>leetcode官方题解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isMatch</span><span class="hljs-params">(s <span class="hljs-type">string</span>, p <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>n, m := <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">len</span>(p)<br>    <br>f := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">bool</span>, n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= n; i++ &#123;<br>f[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">bool</span>, m+<span class="hljs-number">1</span>)<br>&#125;<br>    <br>matches := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i, j <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> p[j<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;.&#x27;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> s[i<span class="hljs-number">-1</span>] == p[j<span class="hljs-number">-1</span>]<br>&#125;<br>    <br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= n; i++ &#123;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= m; j++ &#123;<br><span class="hljs-keyword">if</span> p[j<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;*&#x27;</span> &#123;<br>f[i][j] = f[i][j] || f[i][j<span class="hljs-number">-2</span>]<br><span class="hljs-keyword">if</span> matches(i, j<span class="hljs-number">-1</span>) &#123;<br>f[i][j] = f[i][j] || f[i<span class="hljs-number">-1</span>][j]<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> matches(i, j) &#123;<br>f[i][j] = f[i][j] || f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> f[n][m]<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="day11"><a href="#day11" class="headerlink" title="day11"></a>day11</h3><h4 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></h4><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p><strong>说明：</strong>你不能倾斜容器。</p><p><strong>示例 1：</strong></p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="img"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：[<span class="hljs-number">1,8,6,2</span>,<span class="hljs-number">5,4,8,3</span>,<span class="hljs-number">7</span>]<br>输出：<span class="hljs-number">49</span> <br>解释：图中垂直线代表输入数组 [<span class="hljs-number">1,8,6,2</span>,<span class="hljs-number">5,4,8,3</span>,<span class="hljs-number">7</span>]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 <span class="hljs-number">49</span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">输入：height = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == height.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= height[i] &lt;= 104</code></li></ul><p>直接双指针枚举</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> a &lt; b &#123;<br><span class="hljs-keyword">return</span> b<br>&#125;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">min</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> a &lt; b &#123;<br><span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(height []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>ans := <span class="hljs-number">0</span><br>l, r := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(height)<span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> l &lt; r &#123;<br>ans = max(ans, min(height[l], height[r])*(r-l))<br><span class="hljs-keyword">if</span> height[l] &lt; height[r] &#123;<br>l++<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>r--<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day12"><a href="#day12" class="headerlink" title="day12"></a>day12</h3><h4 id="12-整数转罗马数字"><a href="#12-整数转罗马数字" class="headerlink" title="12.整数转罗马数字"></a>12.整数转罗马数字</h4><p>罗马数字包含以下七种字符： <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">字符          数值<br><span class="hljs-built_in">I</span>             <span class="hljs-number">1</span><br><span class="hljs-variable">V</span>             <span class="hljs-number">5</span><br><span class="hljs-variable">X</span>             <span class="hljs-number">10</span><br><span class="hljs-variable">L</span>             <span class="hljs-number">50</span><br><span class="hljs-built_in">C</span>             <span class="hljs-number">100</span><br><span class="hljs-built_in">D</span>             <span class="hljs-number">500</span><br><span class="hljs-variable">M</span>             <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给你一个整数，将其转为罗马数字。</p><p><strong>示例 1:</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">输入: <span class="hljs-built_in">num</span> = <span class="hljs-number">3</span><br>输出: <span class="hljs-string">&quot;III&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">输入: <span class="hljs-built_in">num</span> = <span class="hljs-number">4</span><br>输出: <span class="hljs-string">&quot;IV&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">输入: <span class="hljs-built_in">num</span> = <span class="hljs-number">9</span><br>输出: <span class="hljs-string">&quot;IX&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: num = 58</span><br><span class="hljs-section">输出: &quot;LVIII&quot;</span><br><span class="hljs-section">解释: L = 50, V = 5, III = 3.</span><br></code></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: num = 1994</span><br><span class="hljs-section">输出: &quot;MCMXCIV&quot;</span><br><span class="hljs-section">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num &lt;= 3999</code></li></ul><p>官方解法之一：</p><p>首先是将所有特殊情况都枚举出来，然后利用循环直接遍历，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> valueSymbols = []<span class="hljs-keyword">struct</span> &#123;<br>    value  <span class="hljs-type">int</span><br>    symbol <span class="hljs-type">string</span><br>&#125;&#123;<br>    &#123;<span class="hljs-number">1000</span>, <span class="hljs-string">&quot;M&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">900</span>, <span class="hljs-string">&quot;CM&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">500</span>, <span class="hljs-string">&quot;D&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">400</span>, <span class="hljs-string">&quot;CD&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">100</span>, <span class="hljs-string">&quot;C&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">90</span>, <span class="hljs-string">&quot;XC&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">50</span>, <span class="hljs-string">&quot;L&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">40</span>, <span class="hljs-string">&quot;XL&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">10</span>, <span class="hljs-string">&quot;X&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">9</span>, <span class="hljs-string">&quot;IX&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>, <span class="hljs-string">&quot;V&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">4</span>, <span class="hljs-string">&quot;IV&quot;</span>&#125;,<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-string">&quot;I&quot;</span>&#125;,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">intToRoman</span><span class="hljs-params">(num <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    roman := []<span class="hljs-type">byte</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> _, vs := <span class="hljs-keyword">range</span> valueSymbols &#123;<br>        <span class="hljs-keyword">for</span> num &gt;= vs.value &#123;<br>            num -= vs.value<br>            roman = <span class="hljs-built_in">append</span>(roman, vs.symbol...)<br>        &#125;<br>        <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(roman)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>官方解法之二：</p><p>因为题目已经告诉了1 &lt;&#x3D; num &lt;&#x3D; 3999这个条件，所以这里直接把每一位会出现的情况全部枚举出来，然后利用运算得到每一位的数字对应的符号，然后拼接起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>    thousands = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;MM&quot;</span>, <span class="hljs-string">&quot;MMM&quot;</span>&#125;<br>    hundreds  = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;CC&quot;</span>, <span class="hljs-string">&quot;CCC&quot;</span>, <span class="hljs-string">&quot;CD&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;DC&quot;</span>, <span class="hljs-string">&quot;DCC&quot;</span>, <span class="hljs-string">&quot;DCCC&quot;</span>, <span class="hljs-string">&quot;CM&quot;</span>&#125;<br>    tens      = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;XX&quot;</span>, <span class="hljs-string">&quot;XXX&quot;</span>, <span class="hljs-string">&quot;XL&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;LX&quot;</span>, <span class="hljs-string">&quot;LXX&quot;</span>, <span class="hljs-string">&quot;LXXX&quot;</span>, <span class="hljs-string">&quot;XC&quot;</span>&#125;<br>    ones      = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;II&quot;</span>, <span class="hljs-string">&quot;III&quot;</span>, <span class="hljs-string">&quot;IV&quot;</span>, <span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;VI&quot;</span>, <span class="hljs-string">&quot;VII&quot;</span>, <span class="hljs-string">&quot;VIII&quot;</span>, <span class="hljs-string">&quot;IX&quot;</span>&#125;<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">intToRoman</span><span class="hljs-params">(num <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> thousands[num/<span class="hljs-number">1000</span>] + hundreds[num%<span class="hljs-number">1000</span>/<span class="hljs-number">100</span>] + tens[num%<span class="hljs-number">100</span>/<span class="hljs-number">10</span>] + ones[num%<span class="hljs-number">10</span>]<br>&#125;<br><span class="hljs-comment">// thousand: num/1000</span><br><span class="hljs-comment">// hundred:  num%1000/100</span><br><span class="hljs-comment">// ten:      num%100/10</span><br><span class="hljs-comment">// one: num%10</span><br></code></pre></td></tr></table></figure><h3 id="day13-Leetcode-75-Start"><a href="#day13-Leetcode-75-Start" class="headerlink" title="day13 (Leetcode 75 Start)"></a>day13 (Leetcode 75 Start)</h3><h4 id="1768-交替合并字符串"><a href="#1768-交替合并字符串" class="headerlink" title="1768.交替合并字符串"></a><a href="https://leetcode.cn/problems/merge-strings-alternately/">1768.交替合并字符串</a></h4><p>给你两个字符串 <code>word1</code> 和 <code>word2</code> 。请你从 <code>word1</code> 开始，通过交替添加字母来合并字符串。如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。</p><p>返回 <strong>合并后的字符串</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：word1 = <span class="hljs-string">&quot;abc&quot;</span>, word2 = <span class="hljs-string">&quot;pqr&quot;</span><br>输出：<span class="hljs-string">&quot;apbqcr&quot;</span><br>解释：字符串合并情况如下所示：<br>word1：  <span class="hljs-selector-tag">a</span>   <span class="hljs-selector-tag">b</span>   c<br>word2：    <span class="hljs-selector-tag">p</span>   <span class="hljs-selector-tag">q</span>   r<br>合并后：  <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">q</span> c r<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：word1 = <span class="hljs-string">&quot;ab&quot;</span>, word2 = <span class="hljs-string">&quot;pqrs&quot;</span><br>输出：<span class="hljs-string">&quot;apbqrs&quot;</span><br>解释：注意，word2 比 word1 长，<span class="hljs-string">&quot;rs&quot;</span> 需要追加到合并后字符串的末尾。<br>word1：  <span class="hljs-selector-tag">a</span>   <span class="hljs-selector-tag">b</span> <br>word2：    <span class="hljs-selector-tag">p</span>   <span class="hljs-selector-tag">q</span>   r   s<br>合并后：  <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">q</span>   r   s<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：word1 = <span class="hljs-string">&quot;abcd&quot;</span>, word2 = <span class="hljs-string">&quot;pq&quot;</span><br>输出：<span class="hljs-string">&quot;apbqcd&quot;</span><br>解释：注意，word1 比 word2 长，<span class="hljs-string">&quot;cd&quot;</span> 需要追加到合并后字符串的末尾。<br>word1：  <span class="hljs-selector-tag">a</span>   <span class="hljs-selector-tag">b</span>   c   d<br>word2：    <span class="hljs-selector-tag">p</span>   <span class="hljs-selector-tag">q</span> <br>合并后：  <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">q</span> c   d<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word1.length, word2.length &lt;= 100</code></li><li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li></ul><p>非常简单的题，可以直接用下标代替append， 加快时间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeAlternately</span><span class="hljs-params">(word1 <span class="hljs-type">string</span>, word2 <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    n, m := <span class="hljs-built_in">len</span>(word1), <span class="hljs-built_in">len</span>(word2)<br>    res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, n+m)<br>    i, l := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i &lt; n || i &lt; m &#123;<br>        <span class="hljs-keyword">if</span> i &lt; n &#123;<br>            res[l] = word1[i]<br>            l++<br>        &#125;<br>        <span class="hljs-keyword">if</span> i &lt; m &#123;<br>            res[l] = word2[i]<br>            l++<br>        &#125;<br>        i++<br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(res)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h3><h4 id="1071-字符串的最大公因子"><a href="#1071-字符串的最大公因子" class="headerlink" title="1071.字符串的最大公因子"></a><a href="https://leetcode.cn/problems/greatest-common-divisor-of-strings/">1071.字符串的最大公因子</a></h4><p>对于字符串 <code>s</code> 和 <code>t</code>，只有在 <code>s = t + ... + t</code>（<code>t</code> 自身连接 1 次或多次）时，我们才认定 “<code>t</code> 能除尽 <code>s</code>”。</p><p>给定两个字符串 <code>str1</code> 和 <code>str2</code> 。返回 <em>最长字符串 <code>x</code>，要求满足 <code>x</code> 能除尽 <code>str1</code> 且 <code>x</code> 能除尽 <code>str2</code></em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">str1</span> = <span class="hljs-string">&quot;ABCABC&quot;</span>, <span class="hljs-attr">str2</span> = <span class="hljs-string">&quot;ABC&quot;</span><br>输出：<span class="hljs-string">&quot;ABC&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">str1</span> = <span class="hljs-string">&quot;ABABAB&quot;</span>, <span class="hljs-attr">str2</span> = <span class="hljs-string">&quot;ABAB&quot;</span><br>输出：<span class="hljs-string">&quot;AB&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">str1</span> = <span class="hljs-string">&quot;LEET&quot;</span>, <span class="hljs-attr">str2</span> = <span class="hljs-string">&quot;CODE&quot;</span><br>输出：<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li><li><code>str1</code> 和 <code>str2</code> 由大写英文字母组成</li></ul><p>具体的做法有点像辗转相除法</p><p>以示例1为例：</p><table><thead><tr><th>str1</th><th>str2</th><th>operation</th></tr></thead><tbody><tr><td>ABCABC</td><td>ABC</td><td>str1-str2</td></tr><tr><td>ABC</td><td>ABC</td><td>str1-str2</td></tr><tr><td>“”</td><td>ABC</td><td>swap(str1, str2)</td></tr><tr><td>ABC</td><td>“”</td><td>return str1</td></tr></tbody></table><p>示例2：</p><table><thead><tr><th>str1</th><th>str2</th><th>operation</th></tr></thead><tbody><tr><td>ABABAB</td><td>ABAB</td><td>str1-str2</td></tr><tr><td>AB</td><td>ABAB</td><td>swap(str1, str2)</td></tr><tr><td>ABAB</td><td>AB</td><td>str1-str2</td></tr><tr><td>AB</td><td>AB</td><td>str1-str2</td></tr><tr><td>“”</td><td>AB</td><td>swap(str1, str2)</td></tr><tr><td>AB</td><td>“”</td><td>return str1</td></tr></tbody></table><p>示例3：</p><table><thead><tr><th>str1</th><th>str2</th><th>operation</th></tr></thead><tbody><tr><td>LEET</td><td>CODE</td><td>return “”</td></tr></tbody></table><p>由于str1[0:len(str2)] ！&#x3D; str2，所有说明没有公因子，直接返回””</p><p>整个过程保证str1的长度要大于str2</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gcdOfStrings</span><span class="hljs-params">(str1 <span class="hljs-type">string</span>, str2 <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    n, m := <span class="hljs-built_in">len</span>(str1), <span class="hljs-built_in">len</span>(str2)<br>    <span class="hljs-comment">// 确保str1的长度要大于str2</span><br>    <span class="hljs-keyword">if</span> n &lt; m &#123;<br>        <span class="hljs-keyword">return</span> gcdOfStrings(str2, str1)<br>    &#125;<br>    <span class="hljs-comment">// 如果2是空串了就返回str1</span><br>    <span class="hljs-keyword">if</span> str2 == <span class="hljs-string">&quot;&quot;</span> &#123;<br>        <span class="hljs-keyword">return</span> str1<br>    &#125;<br>    <span class="hljs-keyword">if</span> str1[:m] != str2 &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> gcdOfStrings(str1[m:], str2)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day15"><a href="#day15" class="headerlink" title="day15"></a>day15</h3><h4 id="1431-拥有最多糖果的孩子"><a href="#1431-拥有最多糖果的孩子" class="headerlink" title="1431.拥有最多糖果的孩子"></a><a href="https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies/">1431.拥有最多糖果的孩子</a></h4><p>给你一个数组 <code>candies</code> 和一个整数 <code>extraCandies</code> ，其中 <code>candies[i]</code> 代表第 <code>i</code> 个孩子拥有的糖果数目。</p><p>对每一个孩子，检查是否存在一种方案，将额外的 <code>extraCandies</code> 个糖果分配给孩子们之后，此孩子有 <strong>最多</strong> 的糖果。注意，允许有多个孩子同时拥有 <strong>最多</strong> 的糖果数目。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：candies = [2,3,5,1,3], extraCandies = 3<br>输出：[true,true,true,false,true] <br>解释：<br>孩子<span class="hljs-number"> 1 </span>有<span class="hljs-number"> 2 </span>个糖果，如果他得到所有额外的糖果（3个），那么他总共有<span class="hljs-number"> 5 </span>个糖果，他将成为拥有最多糖果的孩子。<br>孩子<span class="hljs-number"> 2 </span>有<span class="hljs-number"> 3 </span>个糖果，如果他得到至少<span class="hljs-number"> 2 </span>个额外糖果，那么他将成为拥有最多糖果的孩子。<br>孩子<span class="hljs-number"> 3 </span>有<span class="hljs-number"> 5 </span>个糖果，他已经是拥有最多糖果的孩子。<br>孩子<span class="hljs-number"> 4 </span>有<span class="hljs-number"> 1 </span>个糖果，即使他得到所有额外的糖果，他也只有<span class="hljs-number"> 4 </span>个糖果，无法成为拥有糖果最多的孩子。<br>孩子<span class="hljs-number"> 5 </span>有<span class="hljs-number"> 3 </span>个糖果，如果他得到至少<span class="hljs-number"> 2 </span>个额外糖果，那么他将成为拥有最多糖果的孩子。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">candies</span> = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span><br>,<span class="hljs-number">2</span>], <span class="hljs-attr">extraCandies</span> = <span class="hljs-number">1</span><br>输出：[<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>] <br>解释：只有 <span class="hljs-number">1</span> 个额外糖果，所以不管额外糖果给谁，只有孩子 <span class="hljs-number">1</span> 可以成为拥有糖果最多的孩子。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">candies</span> = [<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">12</span>], <span class="hljs-attr">extraCandies</span> = <span class="hljs-number">10</span><br>输出：[<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= candies.length &lt;= 100</code></li><li><code>1 &lt;= candies[i] &lt;= 100</code></li><li><code>1 &lt;= extraCandies &lt;= 50</code></li></ul><p>题意很简单，我这里用了两个循环，第一个先找到最大值，然后依次比较</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">kidsWithCandies</span><span class="hljs-params">(candies []<span class="hljs-type">int</span>, extraCandies <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">bool</span> &#123;<br>    max, n := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(candies)<br>    res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">bool</span>, n)<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> candies &#123;<br>        <span class="hljs-keyword">if</span> v &gt;= max &#123;<br>            max = v<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> candies &#123;<br>        <span class="hljs-keyword">if</span> v+extraCandies &gt;= max &#123;<br>            res[k] = <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><p>看到官方题解学到了，我可以直接res[k] &#x3D; v+extraCandies &gt;&#x3D; maxCandies，不用判断后再赋值了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">kidsWithCandies</span><span class="hljs-params">(candies []<span class="hljs-type">int</span>, extraCandies <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">bool</span> &#123;<br>maxCandies, n := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(candies)<br>res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">bool</span>, n)<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> candies &#123;<br><span class="hljs-keyword">if</span> v &gt;= maxCandies &#123;<br>maxCandies = v<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> candies &#123;<br>res[k] = v+extraCandies &gt;= maxCandies<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day16"><a href="#day16" class="headerlink" title="day16"></a>day16</h3><h4 id="605-种花问题"><a href="#605-种花问题" class="headerlink" title="605.种花问题"></a><a href="https://leetcode.cn/problems/can-place-flowers/">605.种花问题</a></h4><p>假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p><p>给你一个整数数组 <code>flowerbed</code> 表示花坛，由若干 <code>0</code> 和 <code>1</code> 组成，其中 <code>0</code> 表示没种植花，<code>1</code> 表示种植了花。另有一个数 <code>n</code> ，能否在不打破种植规则的情况下种入 <code>n</code> 朵花？能则返回 <code>true</code> ，不能则返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">flowerbed</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], <span class="hljs-attr">n</span> = <span class="hljs-number">1</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">flowerbed</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], <span class="hljs-attr">n</span> = <span class="hljs-number">2</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= flowerbed.length &lt;= 2 * 104</code></li><li><code>flowerbed[i]</code> 为 <code>0</code> 或 <code>1</code></li><li><code>flowerbed</code> 中不存在相邻的两朵花</li><li><code>0 &lt;= n &lt;= flowerbed.length</code></li></ul><p>直接列举出所有可能的情况，然后分别作出判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">canPlaceFlowers</span><span class="hljs-params">(flowerbed []<span class="hljs-type">int</span>, n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>length := <span class="hljs-built_in">len</span>(flowerbed)<br><span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>count := <span class="hljs-number">0</span><br><span class="hljs-comment">// 遍历</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; length; i++ &#123;<br><span class="hljs-keyword">if</span> flowerbed[i] == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 第i个位置没有种花</span><br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &amp;&amp; length == <span class="hljs-number">1</span> &#123;<br>flowerbed[i] = <span class="hljs-number">1</span><br>count++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &amp;&amp; length &gt; <span class="hljs-number">1</span> &amp;&amp; flowerbed[i+<span class="hljs-number">1</span>] == <span class="hljs-number">0</span> &#123;<br>flowerbed[i] = <span class="hljs-number">1</span><br>count++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> i == length<span class="hljs-number">-1</span> &amp;&amp; flowerbed[i<span class="hljs-number">-1</span>] == <span class="hljs-number">0</span> &#123;<br>flowerbed[i] = <span class="hljs-number">1</span><br>count++<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &amp;&amp; i &lt; length &amp;&amp; flowerbed[i<span class="hljs-number">-1</span>] == <span class="hljs-number">0</span> &amp;&amp; flowerbed[i+<span class="hljs-number">1</span>] == <span class="hljs-number">0</span> &#123;<br>flowerbed[i] = <span class="hljs-number">1</span><br>count++<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> count &gt;= n &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day17"><a href="#day17" class="headerlink" title="day17"></a>day17</h3><h4 id="345-反转字符串中的元音字母"><a href="#345-反转字符串中的元音字母" class="headerlink" title="345.反转字符串中的元音字母"></a><a href="https://leetcode.cn/problems/reverse-vowels-of-a-string/">345.反转字符串中的元音字母</a></h4><p>给你一个字符串 <code>s</code> ，仅反转字符串中的所有元音字母，并返回结果字符串。</p><p>元音字母包括 <code>&#39;a&#39;</code>、<code>&#39;e&#39;</code>、<code>&#39;i&#39;</code>、<code>&#39;o&#39;</code>、<code>&#39;u&#39;</code>，且可能以大小写两种形式出现不止一次。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><br>输出：<span class="hljs-string">&quot;holle&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;leetcode&quot;</span><br>输出：<span class="hljs-string">&quot;leotcede&quot;</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 3 * 105</code></li><li><code>s</code> 由 <strong>可打印的 ASCII</strong> 字符组成</li></ul><p>利用双指针遍历，妙</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseVowels</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>res := []<span class="hljs-type">byte</span>(s)<br>n := <span class="hljs-built_in">len</span>(s)<br>i, j := <span class="hljs-number">0</span>, n<span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i &lt; j &#123;<br><span class="hljs-keyword">for</span> i &lt; n &amp;&amp; !strings.Contains(<span class="hljs-string">&quot;aeiouAEIOU&quot;</span>, <span class="hljs-type">string</span>(res[i])) &#123;<br>i++<br>&#125;<br><span class="hljs-keyword">for</span> j &gt; <span class="hljs-number">0</span> &amp;&amp; !strings.Contains(<span class="hljs-string">&quot;aeiouAEIOU&quot;</span>, <span class="hljs-type">string</span>(res[j])) &#123;<br>j--<br>&#125;<br><span class="hljs-keyword">if</span> i &lt; j &#123;<br>res[i], res[j] = res[j], res[i]<br>i++<br>j--<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(res)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day18"><a href="#day18" class="headerlink" title="day18"></a>day18</h3><h4 id="151-反转字符串中的单词"><a href="#151-反转字符串中的单词" class="headerlink" title="151.反转字符串中的单词"></a><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151.反转字符串中的单词</a></h4><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;the sky is blue&quot;</span><br>输出：<span class="hljs-string">&quot;blue is sky the&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;  hello world  &quot;</span><br>输出：<span class="hljs-string">&quot;world hello&quot;</span><br>解释：反转后的字符串中不能存在前导空格和尾随空格。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a good   example&quot;</span><br>输出：<span class="hljs-string">&quot;example good a&quot;</span><br>解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 包含英文大小写字母、数字和空格 <code>&#39; &#39;</code></li><li><code>s</code> 中 <strong>至少存在一个</strong> 单词</li></ul><p><strong>进阶：</strong>如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 <code>O(1)</code> 额外空间复杂度的 <strong>原地</strong> 解法。</p><p>使用strings自带的库函数：</p><p>首先使用strings中的Fields函数，使用该函数可切割单个&#x2F;多个空格，提取出单词</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">input</span>:<br><span class="hljs-string">&quot;a good   example&quot;</span><br>output:<br><span class="hljs-selector-attr">[a good example]</span> <span class="hljs-comment">// fmt.Println()</span><br><span class="hljs-selector-tag">a</span> <span class="hljs-comment">// for range 读取出</span><br>    good<br>    example<br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseWords</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>t := strings.Fields(s)<br>n := <span class="hljs-built_in">len</span>(t)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n/<span class="hljs-number">2</span>; i++ &#123; <span class="hljs-comment">//遍历数组的前半段直接交换</span><br>t[i], t[n<span class="hljs-number">-1</span>-i] = t[n<span class="hljs-number">-1</span>-i], t[i]<br>&#125;<br>res := strings.Join(t, <span class="hljs-string">&quot; &quot;</span>) <span class="hljs-comment">//重新使用空格连接多个单词</span><br><span class="hljs-keyword">return</span> res<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="day19"><a href="#day19" class="headerlink" title="day19"></a>day19</h3><h4 id="238-除自身以外数组的乘积"><a href="#238-除自身以外数组的乘积" class="headerlink" title="238.除自身以外数组的乘积"></a><a href="https://leetcode.cn/problems/product-of-array-except-self/">238.除自身以外数组的乘积</a></h4><p>给你一个整数数组 <code>nums</code>，返回 <em>数组 <code>answer</code> ，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积</em> 。</p><p>题目数据 <strong>保证</strong> 数组 <code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32 位</strong> 整数范围内。</p><p>请<strong>不要使用除法，</strong>且在 <code>O(*n*)</code> 时间复杂度内完成此题。</p><p><strong>示例 1:</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入: nums = [<span class="hljs-number">1,2,3,4</span>]<br>输出: [<span class="hljs-number">24,12,8,6</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: nums = <span class="hljs-comment">[-1,1,0,-3,3]</span><br>输出: <span class="hljs-comment">[0,0,9,0,0]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 105</code></li><li><code>-30 &lt;= nums[i] &lt;= 30</code></li><li><strong>保证</strong> 数组 <code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32 位</strong> 整数范围内</li></ul><p><strong>进阶：</strong>你可以在 <code>O(1)</code> 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组<strong>不被视为</strong>额外空间。）</p><p>首先最简单的想法就是直接暴力：</p><p>这样思路最浅显易懂，但是时间复杂度是O(n^2)，显然会超时</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">productExceptSelf</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n)<br>    j, mul := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">for</span> k := <span class="hljs-number">0</span>; k &lt; n; k++&#123;<br>            <span class="hljs-keyword">if</span> k == i &#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> nums[k] == <span class="hljs-number">0</span>&#123;<br>                mul = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">break</span><br>            &#125;<br>            mul *= nums[k]<br>        &#125;<br>        res[j] = mul<br>        mul = <span class="hljs-number">1</span><br>        j++<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><p>下面这种方法把整个数组分为了两部分，下标为 i 的前面部分的乘积和后面部分的乘积</p><p>例如：nums &#x3D; [1,2,3,4]</p><p>前缀之积：[1, 1, 2, 6]</p><p>后缀之积：[24, 12, 4, 1]</p><p>结果：[24, 12, 8, 6]</p><p>但是如果用两个数组分别保存前缀和后缀的话，空间复杂度会达到 O(n^2)，所以可以直接把前缀保存在res数组中，然后用tmp变量保存后缀之积，直接与对应的res相乘，就可以达到O(1)的空间复杂度</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">productExceptSelf</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n)<br>    <span class="hljs-comment">// 先求得前缀之积</span><br>    tmp := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &#123;<br>            res[i] = <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res[i] = nums[i<span class="hljs-number">-1</span>] * res[i<span class="hljs-number">-1</span>]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> i := n<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br>        <span class="hljs-keyword">if</span> i == n<span class="hljs-number">-1</span> &#123;<br>            tmp = <span class="hljs-number">1</span><br>            res[i] *= <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tmp *= nums[i+<span class="hljs-number">1</span>]<br>            res[i] *= tmp<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day-20"><a href="#day-20" class="headerlink" title="day 20"></a>day 20</h3><h4 id="334-递增的三元子序列"><a href="#334-递增的三元子序列" class="headerlink" title="334. 递增的三元子序列"></a><a href="https://leetcode.cn/problems/increasing-triplet-subsequence/">334. 递增的三元子序列</a></h4><p>给你一个整数数组 <code>nums</code> ，判断这个数组中是否存在长度为 <code>3</code> 的递增子序列。</p><p>如果存在这样的三元组下标 <code>(i, j, k)</code> 且满足 <code>i &lt; j &lt; k</code> ，使得 <code>nums[i] &lt; nums[j] &lt; nums[k]</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：nums = <span class="hljs-selector-attr">[1,2,3,4,5]</span><br>输出：true<br>解释：任何 <span class="hljs-selector-tag">i</span> &lt; j &lt; k 的三元组都满足题意<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">nums</span> = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-literal">false</span><br>解释：不存在满足题意的三元组<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,1,5,0,4,6]</span><br>输出：true<br>解释：三元组 (3, 4, 5) 满足题意，因为 nums<span class="hljs-comment">[3]</span> == 0 &lt; nums<span class="hljs-comment">[4]</span> == 4 &lt; nums<span class="hljs-comment">[5]</span> == 6<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5 * 105</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li></ul><p><strong>进阶：</strong>你能实现时间复杂度为 <code>O(n)</code> ，空间复杂度为 <code>O(1)</code> 的解决方案吗？</p><p>用贪心，直接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">increasingTriplet</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">3</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    first, second := nums[<span class="hljs-number">0</span>], <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">32</span> - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; n; i++ &#123;<br>        num := nums[i]<br>        <span class="hljs-keyword">if</span> num &gt; second &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> num &gt; first &#123;<br>            second = num<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            first = num<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day21"><a href="#day21" class="headerlink" title="day21"></a>day21</h3><h4 id="443-压缩字符串"><a href="#443-压缩字符串" class="headerlink" title="443. 压缩字符串"></a><a href="https://leetcode.cn/problems/string-compression/">443. 压缩字符串</a></h4><p>给你一个字符数组 <code>chars</code> ，请使用下述算法压缩：</p><p>从一个空字符串 <code>s</code> 开始。对于 <code>chars</code> 中的每组 <strong>连续重复字符</strong> ：</p><ul><li>如果这一组长度为 <code>1</code> ，则将字符追加到 <code>s</code> 中。</li><li>否则，需要向 <code>s</code> 追加字符，后跟这一组的长度。</li></ul><p>压缩后得到的字符串 <code>s</code> <strong>不应该直接返回</strong> ，需要转储到字符数组 <code>chars</code> 中。需要注意的是，如果组长度为 <code>10</code> 或 <code>10</code> 以上，则在 <code>chars</code> 数组中会被拆分为多个字符。</p><p>请在 <strong>修改完输入数组后</strong> ，返回该数组的新长度。</p><p>你必须设计并实现一个只使用常量额外空间的算法来解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：chars = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]<br>输出：返回 <span class="hljs-number">6</span> ，输入数组的前 <span class="hljs-number">6</span> 个字符应该是：[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>]<br>解释：<span class="hljs-string">&quot;aa&quot;</span> 被 <span class="hljs-string">&quot;a2&quot;</span> 替代。<span class="hljs-string">&quot;bb&quot;</span> 被 <span class="hljs-string">&quot;b2&quot;</span> 替代。<span class="hljs-string">&quot;ccc&quot;</span> 被 <span class="hljs-string">&quot;c3&quot;</span> 替代。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">输入：<span class="hljs-keyword">chars</span> = [<span class="hljs-string">&quot;a&quot;</span>]<br>输出：返回 <span class="hljs-number">1</span> ，输入数组的前 <span class="hljs-number">1</span> 个字符应该是：[<span class="hljs-string">&quot;a&quot;</span>]<br>解释：唯一的组是“<span class="hljs-keyword">a</span>”，它保持未压缩，因为它是一个字符。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：chars = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>]<br>输出：返回 <span class="hljs-number">4</span> ，输入数组的前 <span class="hljs-number">4</span> 个字符应该是：[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>]。<br>解释：由于字符 <span class="hljs-string">&quot;a&quot;</span> 不重复，所以不会被压缩。<span class="hljs-string">&quot;bbbbbbbbbbbb&quot;</span> 被 “b12” 替代。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= chars.length &lt;= 2000</code></li><li><code>chars[i]</code> 可以是小写英文字母、大写英文字母、数字或符号</li></ul><p>用双指针，本地测试结果是对的，但是上传到leetcode却不行，具体的问题写在最下面了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compress</span><span class="hljs-params">(chars []<span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>n := <span class="hljs-built_in">len</span>(chars)<br><span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br>s := <span class="hljs-string">&quot;&quot;</span><br>Len, j := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i += Len &#123;<br>ch := chars[i]<br>j = i + <span class="hljs-number">1</span><br>Len = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> j &lt; n &amp;&amp; ch == chars[j] &#123;<br>Len++<br>j++<br>&#125;<br><span class="hljs-keyword">if</span> Len == <span class="hljs-number">1</span> &#123;<br>s += <span class="hljs-type">string</span>(chars[i])<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s += <span class="hljs-type">string</span>(chars[i]) + strconv.Itoa(Len)<br>&#125;<br>&#125;<br><br>chars = []<span class="hljs-type">byte</span>(s) <span class="hljs-comment">// 函数内部修改，值传递，没法影响函数外部的检验</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s)<br>&#125;<br></code></pre></td></tr></table></figure><p>chatgpt修改后如下，同样是使用双指针，在读取的时候要修改前面的内容是重点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compress</span><span class="hljs-params">(chars []<span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(chars)<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span> &#123;<br>        <span class="hljs-keyword">return</span> n<br>    &#125;<br>    <br>    writeIdx := <span class="hljs-number">0</span> <span class="hljs-comment">// 写入位置的索引</span><br>    readIdx := <span class="hljs-number">0</span>  <span class="hljs-comment">// 读取位置的索引</span><br>    <br>    <span class="hljs-keyword">for</span> readIdx &lt; n &#123;<br>        ch := chars[readIdx]<br>        count := <span class="hljs-number">0</span><br>        <br>        <span class="hljs-comment">// 统计连续相同字符的数量</span><br>        <span class="hljs-keyword">for</span> readIdx &lt; n &amp;&amp; chars[readIdx] == ch &#123;<br>            readIdx++<br>            count++<br>        &#125;<br>        <br>        chars[writeIdx] = ch<br>        writeIdx++<br>        <br>        <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">1</span> &#123;<br>            countStr := strconv.Itoa(count)<br>            <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(countStr); i++ &#123;<br>                chars[writeIdx] = countStr[i]<br>                writeIdx++<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> writeIdx<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="day22"><a href="#day22" class="headerlink" title="day22"></a>day22</h3><h4 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h4><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入: nums = <span class="hljs-string">[0,1,0,3,12]</span><br>输出: <span class="hljs-string">[1,3,12,0,0]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: nums = <span class="hljs-comment">[0]</span><br>输出: <span class="hljs-comment">[0]</span><br></code></pre></td></tr></table></figure><p><strong>提示</strong>:</p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li></ul><p><strong>进阶：</strong>你能尽量减少完成的操作次数吗？</p><p>使用双指针，left指向当前已经处理好的序列的尾部，right指向待处理序列的头部。</p><p>在碰到0之前，left &#x3D;&#x3D; right，碰到0之后，right向后移动一位，然后交换，这样就逐渐把0移动到了最后</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span>  &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    left, right := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> right &lt; n &#123;<br>        <span class="hljs-keyword">if</span> nums[right] != <span class="hljs-number">0</span> &#123;<br>            nums[left], nums[right] = nums[right], nums[left]<br>            left++<br>        &#125;<br>        right++<br>    &#125;<br>    <span class="hljs-keyword">return</span> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day23"><a href="#day23" class="headerlink" title="day23"></a>day23</h3><h4 id="392-判断子序列"><a href="#392-判断子序列" class="headerlink" title="392. 判断子序列"></a><a href="https://leetcode.cn/problems/is-subsequence/">392. 判断子序列</a></h4><p>给定字符串 <strong>s</strong> 和 <strong>t</strong> ，判断 <strong>s</strong> 是否为 <strong>t</strong> 的子序列。</p><p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，<code>&quot;ace&quot;</code>是<code>&quot;abcde&quot;</code>的一个子序列，而<code>&quot;aec&quot;</code>不是）。</p><p><strong>进阶：</strong></p><p>如果有大量输入的 S，称作 S1, S2, … , Sk 其中 k &gt;&#x3D; 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-attr">t</span> = <span class="hljs-string">&quot;ahbgdc&quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;axc&quot;</span>, <span class="hljs-attr">t</span> = <span class="hljs-string">&quot;ahbgdc&quot;</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 100</code></li><li><code>0 &lt;= t.length &lt;= 10^4</code></li><li>两个字符串都只由小写字符组成。</li></ul><p>直接双指针遍历</p><p>自己写的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isSubsequence</span><span class="hljs-params">(s <span class="hljs-type">string</span>, t <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>n, m := <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">len</span>(t)<br>j := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; m; i++ &#123;<br><span class="hljs-keyword">if</span> j &lt; n &amp;&amp; t[i] == s[j] &#123;<br>j++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> j == n<br>&#125;<br></code></pre></td></tr></table></figure><p>官方题解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isSubsequence</span><span class="hljs-params">(s <span class="hljs-type">string</span>, t <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n, m := <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">len</span>(t)<br>    i, j := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i &lt; n &amp;&amp; j &lt; m &#123;<br>        <span class="hljs-keyword">if</span> s[i] == t[j] &#123;<br>            i++<br>        &#125;<br>        j++<br>    &#125;<br>    <span class="hljs-keyword">return</span> i == n<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day24"><a href="#day24" class="headerlink" title="day24"></a>day24</h3><h4 id="1679-K-和数对的最大数目"><a href="#1679-K-和数对的最大数目" class="headerlink" title="1679. K 和数对的最大数目"></a><a href="https://leetcode.cn/problems/max-number-of-k-sum-pairs/">1679. K 和数对的最大数目</a></h4><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>每一步操作中，你需要从数组中选出和为 <code>k</code> 的两个整数，并将它们移出数组。</p><p>返回你可以对数组执行的最大操作数。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1,2,3,4], k = 5<br>输出：2<br>解释：开始时 nums = [1,2,3,4]：<br>- 移出<span class="hljs-number"> 1 </span>和<span class="hljs-number"> 4 </span>，之后 nums = [2,3]<br>- 移出<span class="hljs-number"> 2 </span>和<span class="hljs-number"> 3 </span>，之后 nums = []<br>不再有和为<span class="hljs-number"> 5 </span>的数对，因此最多执行<span class="hljs-number"> 2 </span>次操作。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,1,3,4,3]</span>, k = 6<br>输出：1<br>解释：开始时 nums = <span class="hljs-comment">[3,1,3,4,3]</span>：<br>- 移出前两个 3 ，之后nums = <span class="hljs-comment">[1,4,3]</span><br>不再有和为 6 的数对，因此最多执行 1 次操作。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li><li><code>1 &lt;= k &lt;= 109</code></li></ul><p>先把数组排序，然后双指针遍历，当nums[i] + nums[j] &gt; k， 就把右指针左移一个，反之就把左指针右移一个。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxOperations</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    i, j := <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>    ans := <span class="hljs-number">0</span><br>    sort.Ints(nums)<br><br>    <span class="hljs-keyword">for</span> i &lt; j &#123;<br>        tmp := nums[i] + nums[j]<br>        <span class="hljs-keyword">if</span> tmp &gt; k &#123;<br>            j--<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> tmp &lt; k &#123;<br>            i++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i++<br>            j--<br>            ans++<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day25"><a href="#day25" class="headerlink" title="day25"></a>day25</h3><h4 id="643-子数组最大平均数-I"><a href="#643-子数组最大平均数-I" class="headerlink" title="643. 子数组最大平均数 I"></a><a href="https://leetcode.cn/problems/maximum-average-subarray-i/">643. 子数组最大平均数 I</a></h4><p>给你一个由 <code>n</code> 个元素组成的整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>请你找出平均数最大且 <strong>长度为 <code>k</code></strong> 的连续子数组，并输出该最大平均数。</p><p>任何误差小于 <code>10-5</code> 的答案都将被视为正确答案。</p><p><strong>示例 1：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：nums = [1,12,<span class="hljs-string">-5</span>,<span class="hljs-string">-6</span>,50,3], k = 4<br>输出：12.75<br>解释：最大平均数 (12<span class="hljs-string">-5</span><span class="hljs-string">-6</span><span class="hljs-string">+50</span>)/4 = 51/4 = 12.75<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">5</span>], k = <span class="hljs-number">1</span><br>输出：<span class="hljs-number">5.00000</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= k &lt;= n &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><p>像这样一味的使用暴力是不行的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findMaxAverage</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>n := <span class="hljs-built_in">len</span>(nums)<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(nums[<span class="hljs-number">0</span>])<br>&#125;<br><span class="hljs-keyword">if</span> k == n &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>sum += nums[i]<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(sum) / <span class="hljs-type">float64</span>(k)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= n-k; i++ &#123;<br>tmp := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; k; j++ &#123;<br>tmp += nums[i+j]<br><br>&#125;<br><span class="hljs-keyword">if</span> tmp &gt; sum &#123;<br>sum = tmp<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(sum) / <span class="hljs-type">float64</span>(k)<br>&#125;<br></code></pre></td></tr></table></figure><p>官方的题解是使用滑动窗口</p><p><img src="https://assets.leetcode-cn.com/solution-static/643/1.png" alt="img"></p><p><img src="https://assets.leetcode-cn.com/solution-static/643/2.png" alt="img"></p><p><img src="https://assets.leetcode-cn.com/solution-static/643/3.png" alt="img"></p><p><img src="https://assets.leetcode-cn.com/solution-static/643/4.png" alt="img"></p><p><img src="https://assets.leetcode-cn.com/solution-static/643/5.png" alt="img"></p><p><img src="https://assets.leetcode-cn.com/solution-static/643/6.png" alt="img"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findMaxAverage</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>    sum := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums[:k] &#123;<br>        sum += v<br>    &#125;<br>    maxSum := sum<br>    <span class="hljs-keyword">for</span> i := k; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;<br>        sum = sum - nums[i-k] + nums[i]<br>        maxSum = max(maxSum, sum)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(maxSum) / <span class="hljs-type">float64</span>(k)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &gt; b &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="day25-1"><a href="#day25-1" class="headerlink" title="day25"></a>day25</h3><h4 id="1456-定长子串中元音的最大数目"><a href="#1456-定长子串中元音的最大数目" class="headerlink" title="1456. 定长子串中元音的最大数目"></a><a href="https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/">1456. 定长子串中元音的最大数目</a></h4><p>给你字符串 <code>s</code> 和整数 <code>k</code> 。</p><p>请返回字符串 <code>s</code> 中长度为 <code>k</code> 的单个子字符串中可能包含的最大元音字母数。</p><p>英文中的 <strong>元音字母</strong> 为（<code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>）。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;abciiidef&quot;</span>, <span class="hljs-attr">k</span> = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">3</span><br>解释：子字符串 <span class="hljs-string">&quot;iii&quot;</span> 包含 <span class="hljs-number">3</span> 个元音字母。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：s = &quot;aeiou&quot;, k = 2<br>输出：2<br>解释：任意长度为<span class="hljs-number"> 2 </span>的子字符串都包含<span class="hljs-number"> 2 </span>个元音字母。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;leetcode&quot;</span>, <span class="hljs-attr">k</span> = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">2</span><br>解释：<span class="hljs-string">&quot;lee&quot;</span>、<span class="hljs-string">&quot;eet&quot;</span> 和 <span class="hljs-string">&quot;ode&quot;</span> 都包含 <span class="hljs-number">2</span> 个元音字母。<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;rhythms&quot;</span>, <span class="hljs-attr">k</span> = <span class="hljs-number">4</span><br>输出：<span class="hljs-number">0</span><br>解释：字符串 s 中不含任何元音字母。<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;tryhard&quot;</span>, <span class="hljs-attr">k</span> = <span class="hljs-number">4</span><br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 由小写英文字母组成</li><li><code>1 &lt;= k &lt;= s.length</code></li></ul><p>第一次写的，虽然结果正确但是超时了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxVowels</span><span class="hljs-params">(s <span class="hljs-type">string</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>Max := <span class="hljs-number">0</span><br>i, j := <span class="hljs-number">0</span>, k<span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> j &lt; <span class="hljs-built_in">len</span>(s) &#123;<br>count := Calc(s[i:j+<span class="hljs-number">1</span>], k)<br><span class="hljs-keyword">if</span> Max &lt; count &#123;<br>Max = count<br>&#125;<br>i++<br>j++<br>&#125;<br><span class="hljs-keyword">return</span> Max<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Calc</span><span class="hljs-params">(res <span class="hljs-type">string</span>, k <span class="hljs-type">int</span>)</span></span> (count <span class="hljs-type">int</span>) &#123;<br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; k; i++ &#123;<br><span class="hljs-keyword">if</span> strings.Contains(<span class="hljs-string">&quot;aeiou&quot;</span>, <span class="hljs-type">string</span>(res[i])) &#123;<br>count++<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>考虑到其实不需要每次都单独计算res中有多少个元音字母，只需要在上一个的基础上加减</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxVowels</span><span class="hljs-params">(s <span class="hljs-type">string</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    count := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; k; i++ &#123;<br><span class="hljs-keyword">if</span> strings.Contains(<span class="hljs-string">&quot;aeiou&quot;</span>, <span class="hljs-type">string</span>(s[i])) &#123;<br>count++<br>&#125;<br>    &#125;<br>    Max := count<br>    <span class="hljs-keyword">for</span> i := k; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br>        <span class="hljs-keyword">if</span> strings.Contains(<span class="hljs-string">&quot;aeiou&quot;</span>, <span class="hljs-type">string</span>(s[i])) &#123;<br>count++<br>&#125;<br>        <span class="hljs-keyword">if</span> strings.Contains(<span class="hljs-string">&quot;aeiou&quot;</span>, <span class="hljs-type">string</span>(s[i-k])) &#123;<br>count--<br>&#125;<br>        <span class="hljs-keyword">if</span> count &gt; Max &#123;<br>            Max = count<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Max<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">时间</span><br><span class="hljs-comment">24ms</span><br><span class="hljs-comment">击败 28.44%使用 Go 的用户</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">内存</span><br><span class="hljs-comment">4.49MB</span><br><span class="hljs-comment">击败 31.74%使用 Go 的用户</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>上一个使用了strings的函数判断，这样时间和空间的消耗会增加不少，下面的方法用if直接判断，进一步优化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxVowels</span><span class="hljs-params">(s <span class="hljs-type">string</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    count := <span class="hljs-number">0</span><br>    <span class="hljs-comment">// 计算第一个窗口的元音数量</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; k; i++ &#123;<br>        <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;a&#x27;</span> || s[i] == <span class="hljs-string">&#x27;e&#x27;</span> || s[i] == <span class="hljs-string">&#x27;i&#x27;</span> || s[i] == <span class="hljs-string">&#x27;o&#x27;</span> || s[i] == <span class="hljs-string">&#x27;u&#x27;</span> &#123;<br>            count++<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 初始化最大值</span><br>    maxcount := count<br>    <span class="hljs-comment">// 遍历</span><br>    <span class="hljs-keyword">for</span> i := k; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br>        <span class="hljs-comment">// 如果窗口第一个数为元音，减1</span><br>        <span class="hljs-keyword">if</span> s[i-k] == <span class="hljs-string">&#x27;a&#x27;</span> || s[i-k] == <span class="hljs-string">&#x27;e&#x27;</span> || s[i-k] == <span class="hljs-string">&#x27;i&#x27;</span> || s[i-k] == <span class="hljs-string">&#x27;o&#x27;</span> || s[i-k] == <span class="hljs-string">&#x27;u&#x27;</span> &#123;<br>            count--<br>        &#125;<br>        <span class="hljs-comment">// 如果下一个窗口的下一个数值为元音，加1</span><br>        <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;a&#x27;</span> || s[i] == <span class="hljs-string">&#x27;e&#x27;</span> || s[i] == <span class="hljs-string">&#x27;i&#x27;</span> || s[i] == <span class="hljs-string">&#x27;o&#x27;</span> || s[i] == <span class="hljs-string">&#x27;u&#x27;</span> &#123;<br>            count++<br>        &#125;<br>        <span class="hljs-comment">// 更新最大值</span><br>        <span class="hljs-keyword">if</span> maxcount &lt; count &#123;<br>            maxcount = count<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 返回最大值</span><br>    <span class="hljs-keyword">return</span> maxcount<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">时间</span><br><span class="hljs-comment">8ms</span><br><span class="hljs-comment">击败 85.33%使用 Go 的用户</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">内存</span><br><span class="hljs-comment">4.44MB</span><br><span class="hljs-comment">击败 75.45%使用 Go 的用户</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h3 id="day26"><a href="#day26" class="headerlink" title="day26"></a>day26</h3><h4 id="1004-最大连续1的个数-III"><a href="#1004-最大连续1的个数-III" class="headerlink" title="1004. 最大连续1的个数 III"></a><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/">1004. 最大连续1的个数 III</a></h4><p>给定一个二进制数组 <code>nums</code> 和一个整数 <code>k</code>，如果可以翻转最多 <code>k</code> 个 <code>0</code> ，则返回 <em>数组中连续 <code>1</code> 的最大个数</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">1,1,1,0</span>,<span class="hljs-number">0,0,1,1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>], K = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">6</span><br>解释：[<span class="hljs-number">1,1,1,0</span>,<span class="hljs-number">0,1,1,1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>粗体数字从 <span class="hljs-number">0</span> 翻转到 <span class="hljs-number">1</span>，最长的子数组长度为 <span class="hljs-number">6</span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">0,0,1,1</span>,<span class="hljs-number">0,0,1,1</span>,<span class="hljs-number">1,0,1,1</span>,<span class="hljs-number">0,0,0,1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>], K = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">10</span><br>解释：[<span class="hljs-number">0,0,1,1</span>,<span class="hljs-number">1,1,1,1</span>,<span class="hljs-number">1,1,1,1</span>,<span class="hljs-number">0,0,0,1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>粗体数字从 <span class="hljs-number">0</span> 翻转到 <span class="hljs-number">1</span>，最长的子数组长度为 <span class="hljs-number">10</span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></li><li><code>0 &lt;= k &lt;= nums.length</code></li></ul><p>chatgpt给的解释</p><ol><li>使用两个指针 <code>left</code> 和 <code>right</code> 来表示一个窗口，初始时两者都指向数组的起始位置。</li><li>移动 <code>right</code> 指针，每次检查 <code>nums[right]</code> 是否为0。如果是0，表示可以进行一次翻转，将 <code>cnt</code>（翻转次数）加1。</li><li>如果 <code>cnt</code> 大于 <code>k</code>，说明窗口内的0已经超过了允许的翻转次数，需要移动 <code>left</code> 指针来缩小窗口，直到 <code>cnt</code> 不大于 <code>k</code> 为止，这样就可以继续向右移动 <code>right</code> 指针。</li><li>在每次移动 <code>right</code> 指针的过程中，都更新 <code>res</code>（记录连续1的最大个数），即 <code>res</code> 等于当前窗口的大小 <code>right - left</code>。</li><li>重复上述步骤，直到 <code>right</code> 指针遍历完整个数组。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longestOnes</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, k <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    res := <span class="hljs-number">0</span><br>    left, right := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    cnt := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> right &lt; <span class="hljs-built_in">len</span>(nums) &#123;<br>        <span class="hljs-keyword">if</span> nums[right] == <span class="hljs-number">0</span> &#123;<br>            cnt++<br>        &#125;<br>        right++<br><br>        <span class="hljs-keyword">for</span> cnt &gt; k &#123;<br>            <span class="hljs-keyword">if</span> nums[left] == <span class="hljs-number">0</span> &#123;<br>                cnt--<br>            &#125;<br>            left++<br>        &#125;<br>        res = max(res, right-left)<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &gt; b &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day27"><a href="#day27" class="headerlink" title="day27"></a>day27</h3><h4 id="1493-删掉一个元素以后全为-1-的最长子数组"><a href="#1493-删掉一个元素以后全为-1-的最长子数组" class="headerlink" title="1493. 删掉一个元素以后全为 1 的最长子数组"></a><a href="https://leetcode.cn/problems/longest-subarray-of-1s-after-deleting-one-element/">1493. 删掉一个元素以后全为 1 的最长子数组</a></h4><p>给你一个二进制数组 <code>nums</code> ，你需要从中删掉一个元素。</p><p>请你在删掉元素的结果数组中，返回最长的且只包含 1 的非空子数组的长度。</p><p>如果不存在这样的子数组，请返回 0 。</p><p><strong>提示 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1,1,0,1]<br>输出：3<br>解释：删掉位置<span class="hljs-number"> 2 </span>的数后，[1,1,1] 包含<span class="hljs-number"> 3 </span>个<span class="hljs-number"> 1 </span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">0,1,1,1</span>,<span class="hljs-number">0,1,1,0</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">5</span><br>解释：删掉位置 <span class="hljs-number">4</span> 的数字后，[<span class="hljs-number">0,1,1,1</span>,<span class="hljs-number">1,1,0,1</span>] 的最长全 <span class="hljs-number">1</span> 子数组为 [<span class="hljs-number">1,1,1,1</span>,<span class="hljs-number">1</span>] 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：nums </span>=<span class="hljs-string"> [1,1,1]</span><br><span class="hljs-string">输出：2</span><br><span class="hljs-string">解释：你必须要删除一个元素。</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>nums[i]</code> 要么是 <code>0</code> 要么是 <code>1</code> 。</li></ul><p>和上一道题完全是一模一样的做法，只不过需要在最后减1，确保只统计一个0</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longestSubarray</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    left, right := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    n := <span class="hljs-built_in">len</span>(nums)<br>    maxLen := <span class="hljs-number">0</span><br>    cnt := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> right &lt; n &#123;<br>        <span class="hljs-keyword">if</span> nums[right] == <span class="hljs-number">0</span> &#123;<br>            cnt++<br>        &#125;<br>        <span class="hljs-keyword">for</span> cnt &gt; <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">if</span> nums[left] == <span class="hljs-number">0</span> &#123;<br>                cnt--<br>            &#125;<br>            left++<br>        &#125;<br>        right++<br>        maxLen = max(maxLen, right - left - <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxLen<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &gt; b &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day28"><a href="#day28" class="headerlink" title="day28"></a>day28</h3><h4 id="1732-找到最高海拔"><a href="#1732-找到最高海拔" class="headerlink" title="1732. 找到最高海拔"></a><a href="https://leetcode.cn/problems/find-the-highest-altitude/">1732. 找到最高海拔</a></h4><p>有一个自行车手打算进行一场公路骑行，这条路线总共由 <code>n + 1</code> 个不同海拔的点组成。自行车手从海拔为 <code>0</code> 的点 <code>0</code> 开始骑行。</p><p>给你一个长度为 <code>n</code> 的整数数组 <code>gain</code> ，其中 <code>gain[i]</code> 是点 <code>i</code> 和点 <code>i + 1</code> 的 <strong>净海拔高度差</strong>（<code>0 &lt;= i &lt; n</code>）。请你返回 <strong>最高点的海拔</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：gain = [<span class="hljs-string">-5</span>,1,5,0,<span class="hljs-string">-7</span>]<br>输出：1<br>解释：海拔高度依次为 [0,<span class="hljs-string">-5</span>,<span class="hljs-string">-4</span>,1,1,<span class="hljs-string">-6</span>] 。最高海拔为 1 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：gain = [<span class="hljs-string">-4</span>,<span class="hljs-string">-3</span>,<span class="hljs-string">-2</span>,<span class="hljs-string">-1</span>,4,3,2]<br>输出：0<br>解释：海拔高度依次为 [0,<span class="hljs-string">-4</span>,<span class="hljs-string">-7</span>,<span class="hljs-string">-9</span>,<span class="hljs-string">-10</span>,<span class="hljs-string">-6</span>,<span class="hljs-string">-3</span>,<span class="hljs-string">-1</span>] 。最高海拔为 0 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == gain.length</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>-100 &lt;= gain[i] &lt;= 100</code></li></ul><p>用空间复杂度为O(n)的算法直接两次遍历解决</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">largestAltitude</span><span class="hljs-params">(gain []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-built_in">real</span> := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(gain)+<span class="hljs-number">1</span>)<br>    n, m := <span class="hljs-built_in">len</span>(<span class="hljs-built_in">real</span>), <span class="hljs-built_in">len</span>(gain)<br>    <span class="hljs-built_in">real</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    k := <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i &lt; m; i++ &#123;<br>        <span class="hljs-keyword">if</span> k &lt; n &#123;<br>            <span class="hljs-built_in">real</span>[k] = gain[i] + <span class="hljs-built_in">real</span>[k<span class="hljs-number">-1</span>]   <br>            k++<br>        &#125;<br>    &#125;<br>    maxGain := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">real</span>[i] &gt; maxGain &#123;<br>            maxGain = <span class="hljs-built_in">real</span>[i]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxGain<br>&#125;<br></code></pre></td></tr></table></figure><p>空间复杂度为O(1)的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">largestAltitude</span><span class="hljs-params">(gain []<span class="hljs-type">int</span>)</span></span> (ans <span class="hljs-type">int</span>) &#123;<br>    total := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, x := <span class="hljs-keyword">range</span> gain &#123;<br>        total += x<br>        ans = max(ans, total)<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &gt; b &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day29"><a href="#day29" class="headerlink" title="day29"></a>day29</h3><h4 id="724-寻找数组的中心下标"><a href="#724-寻找数组的中心下标" class="headerlink" title="724. 寻找数组的中心下标"></a><a href="https://leetcode.cn/problems/find-pivot-index/">724. 寻找数组的中心下标</a></h4><p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标</strong> 。</p><p>数组 <strong>中心下标</strong> 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p><p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p><p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1, 7, 3, 6, 5, 6]<br>输出：3<br>解释：<br>中心下标是<span class="hljs-number"> 3 </span>。<br>左侧数之和 sum = nums[0] + nums[1] + nums[2] =<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 7 </span>+<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 11 </span>，<br>右侧数之和 sum = nums[4] + nums[5] =<span class="hljs-number"> 5 </span>+<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 11 </span>，二者相等。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：nums </span>=<span class="hljs-string"> [1, 2, 3]</span><br><span class="hljs-string">输出：-1</span><br><span class="hljs-string">解释：</span><br><span class="hljs-string">数组中不存在满足此条件的中心下标。</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [2, 1, -1]<br>输出：0<br>解释：<br>中心下标是<span class="hljs-number"> 0 </span>。<br>左侧数之和 sum =<span class="hljs-number"> 0 </span>，（下标<span class="hljs-number"> 0 </span>左侧不存在元素），<br>右侧数之和 sum = nums[1] + nums[2] =<span class="hljs-number"> 1 </span>+ -1 =<span class="hljs-number"> 0 </span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li></ul><p>官方题解</p><p>记数组的全部元素之和为 total，<br>当遍历到第 i 个元素时，设其左侧元素之和为<br>sum，则其右侧元素之和为 total- nums; - sum。左右侧元素相等即为 sum &#x3D;<br>total- nums; - sum,即 2 x sum + nums; &#x3D; total。<br>当中心索引左侧或右侧没有元素时，即为零个项相加，这在数学上称作[空和]<br>(empty sum)。在程序设计中我们约定[空和是零]</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pivotIndex</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>total := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums &#123;<br>        total += v<br>    &#125;<br><br>    sum := <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> nums &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">2</span>*sum+v == total &#123;<br>            <span class="hljs-keyword">return</span> i<br>        &#125;<br>        sum += v<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day-30"><a href="#day-30" class="headerlink" title="day 30"></a>day 30</h3><h4 id="2215-找出两数组的不同"><a href="#2215-找出两数组的不同" class="headerlink" title="2215. 找出两数组的不同"></a><a href="https://leetcode.cn/problems/find-the-difference-of-two-arrays/">2215. 找出两数组的不同</a></h4><p>给你两个下标从 <code>0</code> 开始的整数数组 <code>nums1</code> 和 <code>nums2</code> ，请你返回一个长度为 <code>2</code> 的列表 <code>answer</code> ，其中：</p><ul><li><code>answer[0]</code> 是 <code>nums1</code> 中所有 <strong>不</strong> 存在于 <code>nums2</code> 中的 <strong>不同</strong> 整数组成的列表。</li><li><code>answer[1]</code> 是 <code>nums2</code> 中所有 <strong>不</strong> 存在于 <code>nums1</code> 中的 <strong>不同</strong> 整数组成的列表。</li></ul><p><strong>注意：</strong>列表中的整数可以按 <strong>任意</strong> 顺序返回。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1,2,3]</span>, nums2 = <span class="hljs-comment">[2,4,6]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[1,3]</span>,<span class="hljs-comment">[4,6]</span>]</span><br>解释：<br>对于 nums1 ，nums1<span class="hljs-comment">[1]</span> = 2 出现在 nums2 中下标 0 处，然而 nums1<span class="hljs-comment">[0]</span> = 1 和 nums1<span class="hljs-comment">[2]</span> = 3 没有出现在 nums2 中。因此，answer<span class="hljs-comment">[0]</span> = <span class="hljs-comment">[1,3]</span>。<br>对于 nums2 ，nums2<span class="hljs-comment">[0]</span> = 2 出现在 nums1 中下标 1 处，然而 nums2<span class="hljs-comment">[1]</span> = 4 和 nums2<span class="hljs-comment">[2]</span> = 6 没有出现在 nums2 中。因此，answer<span class="hljs-comment">[1]</span> = <span class="hljs-comment">[4,6]</span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1,2,3,3]</span>, nums2 = <span class="hljs-comment">[1,1,2,2]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[3]</span>,<span class="hljs-comment">[]</span>]</span><br>解释：<br>对于 nums1 ，nums1<span class="hljs-comment">[2]</span> 和 nums1<span class="hljs-comment">[3]</span> 没有出现在 nums2 中。由于 nums1<span class="hljs-comment">[2]</span> == nums1<span class="hljs-comment">[3]</span> ，二者的值只需要在 answer<span class="hljs-comment">[0]</span> 中出现一次，故 answer<span class="hljs-comment">[0]</span> = <span class="hljs-comment">[3]</span>。<br>nums2 中的每个整数都在 nums1 中出现，因此，answer<span class="hljs-comment">[1]</span> = <span class="hljs-comment">[]</span> 。 <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>-1000 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findDifference</span><span class="hljs-params">(nums1 []<span class="hljs-type">int</span>, nums2 []<span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br>    set1, set2 := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>&#123;&#125;, <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums1 &#123;<br>        set1[v] = <span class="hljs-literal">true</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums2 &#123;<br>        set2[v] = <span class="hljs-literal">true</span><br>    &#125;<br><br>    <span class="hljs-keyword">var</span> a, b []<span class="hljs-type">int</span><br>    <span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> set1 &#123;<br>        <span class="hljs-keyword">if</span> !set2[v] &#123;<br>            a = <span class="hljs-built_in">append</span>(a, v)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> set2 &#123;<br>        <span class="hljs-keyword">if</span> !set1[v] &#123;<br>            b = <span class="hljs-built_in">append</span>(b, v)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [][]<span class="hljs-type">int</span>&#123;a, b&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>补充：go map的增删改查以及初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 字面量初始化</span><br>    test := <span class="hljs-built_in">make</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-number">1</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-number">2</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-number">3</span>: <span class="hljs-literal">false</span>,<br>    &#125;<br>    <br>    <span class="hljs-comment">// 内置函数make()初始化</span><br>    test1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br>    test1[<span class="hljs-string">&quot;apple&quot;</span>] = <span class="hljs-number">2</span><br>    test1[<span class="hljs-string">&quot;banana&quot;</span>] = <span class="hljs-number">3</span><br> <br>    <span class="hljs-comment">// 增</span><br>    test1[<span class="hljs-string">&quot;red&quot;</span>] = <span class="hljs-number">4</span><br>    <span class="hljs-comment">// 改</span><br>    test1[<span class="hljs-string">&quot;red&quot;</span>] = <span class="hljs-number">5</span><br>    <span class="hljs-comment">// 删</span><br>    <span class="hljs-built_in">delete</span>(test1, <span class="hljs-string">&quot;red&quot;</span>)<br>    <span class="hljs-comment">// 查</span><br>    v, exist := test1[<span class="hljs-string">&quot;red&quot;</span>]<br>    <span class="hljs-comment">// 如果&quot;red&quot;在map test1之中，返回的v是&quot;red&quot;对应的值，exist = true</span><br><span class="hljs-comment">// 如果&quot;red&quot;不在map test1之中，返回的v是0，exist = false   </span><br>    <br>    <span class="hljs-comment">// 遍历</span><br>    <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> test1 &#123;<br>        fmt.Println(k, v) <br>    &#125;<br>    <span class="hljs-comment">// 输出示例：</span><br>    <span class="hljs-comment">// apple 2</span><br>    <span class="hljs-comment">// banana 3</span><br>    <br>    <span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> test1 &#123;<br>        fmt.Println(k)<br>    &#125;<br><span class="hljs-comment">// 输出示例</span><br>    <span class="hljs-comment">// apple</span><br>    <span class="hljs-comment">// banana</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day31"><a href="#day31" class="headerlink" title="day31"></a>day31</h3><h4 id="1207-独一无二的出现次数"><a href="#1207-独一无二的出现次数" class="headerlink" title="1207. 独一无二的出现次数"></a><a href="https://leetcode.cn/problems/unique-number-of-occurrences/">1207. 独一无二的出现次数</a></h4><p>给你一个整数数组 <code>arr</code>，请你帮忙统计数组中每个数的出现次数。</p><p>如果每个数的出现次数都是独一无二的，就返回 <code>true</code>；否则返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：arr = [1,2,2,1,1,3]<br>输出：true<br>解释：在该数组中，1 出现了<span class="hljs-number"> 3 </span>次，2 出现了<span class="hljs-number"> 2 </span>次，3 只出现了<span class="hljs-number"> 1 </span>次。没有两个数的出现次数相同。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">arr</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：arr = [<span class="hljs-string">-3</span>,0,1,<span class="hljs-string">-3</span>,1,1,1,<span class="hljs-string">-3</span>,10,0]<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= arr.length &lt;= 1000</code></li><li><code>-1000 &lt;= arr[i] &lt;= 1000</code></li></ul><p>官方题解</p><p><code>times := map[int]struct&#123;&#125;&#123;&#125;</code>：创建一个空的整数到空结构体的映射，这个映射将用于记录不同的出现次数。<code>times</code> 的键是不同的出现次数，而值是空结构体。这种技巧通常用于检查集合中的唯一性，因为 Go 语言中的映射不能包含重复的键，所以通过这种方式来判断不同的出现次数是否唯一。</p><p>使用循环遍历 <code>hash</code> 中的值（即不同元素的出现次数），并将这些值作为键添加到 <code>times</code> 映射中，对应的值是一个空结构体。由于 Go 语言的映射不能包含重复的键，因此如果相同的出现次数出现多次，只有一个会被记录在 <code>times</code> 中。这意味着最终 <code>times</code> 中的键是不同的出现次数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">uniqueOccurrences</span><span class="hljs-params">(arr []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    hash := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> arr &#123;<br>        hash[v]++<br>    &#125;<br>    times := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>    <span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> hash &#123;<br>        times[c] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(times) == <span class="hljs-built_in">len</span>(hash)<br>&#125;<br></code></pre></td></tr></table></figure><p>用hash记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">uniqueOccurrences</span><span class="hljs-params">(arr []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    hash := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> arr &#123;<br>        hash[v]++<br>    &#125;<br>    res := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>)<br>    <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> hash &#123;<br>        <span class="hljs-keyword">if</span> res[v] == <span class="hljs-number">0</span> &#123;<br>            res[v] = k<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day32"><a href="#day32" class="headerlink" title="day32"></a>day32</h3><h4 id="1657-确定两个字符串是否接近"><a href="#1657-确定两个字符串是否接近" class="headerlink" title="1657. 确定两个字符串是否接近"></a><a href="https://leetcode.cn/problems/determine-if-two-strings-are-close/">1657. 确定两个字符串是否接近</a></h4><p>如果可以使用以下操作从一个字符串得到另一个字符串，则认为两个字符串 <strong>接近</strong> ：</p><ul><li><p>操作 1：交换任意两个现有字符。</p><ul><li>例如，<code>a**b**cd**e** -&gt; a**e**cd**b**</code></li></ul></li><li><p>操作 2：将一个<strong>现有</strong>字符的每次出现转换为另一个<strong>现有</strong>字符，并对另一个字符执行相同的操作。</p><ul><li>例如，<code>**aa**c**abb** -&gt; **bb**c**baa**</code>（所有 <code>a</code> 转化为 <code>b</code> ，而所有的 <code>b</code> 转换为 <code>a</code> ）</li></ul></li></ul><p>你可以根据需要对任意一个字符串多次使用这两种操作。</p><p>给你两个字符串，<code>word1</code> 和 <code>word2</code> 。如果 <code>word1</code> 和 <code>word2</code> <strong>接近</strong> ，就返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入：word1 = <span class="hljs-string">&quot;abc&quot;</span>, word2 = <span class="hljs-string">&quot;bca&quot;</span><br>输出：<span class="hljs-literal">true</span><br>解释：<span class="hljs-number">2</span> 次操作从 word1 获得 word2 。<br>执行操作 <span class="hljs-number">1</span>：<span class="hljs-string">&quot;abc&quot;</span> -&gt; <span class="hljs-string">&quot;acb&quot;</span><br>执行操作 <span class="hljs-number">1</span>：<span class="hljs-string">&quot;acb&quot;</span> -&gt; <span class="hljs-string">&quot;bca&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">word1</span> = <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-attr">word2</span> = <span class="hljs-string">&quot;aa&quot;</span><br>输出：<span class="hljs-literal">false</span><br>解释：不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入：word1 = <span class="hljs-string">&quot;cabbba&quot;</span>, word2 = <span class="hljs-string">&quot;abbccc&quot;</span><br>输出：<span class="hljs-literal">true</span><br>解释：<span class="hljs-number">3</span> 次操作从 word1 获得 word2 。<br>执行操作 <span class="hljs-number">1</span>：<span class="hljs-string">&quot;cabbba&quot;</span> -&gt; <span class="hljs-string">&quot;caabbb&quot;</span><br>执行操作 <span class="hljs-number">2</span>：<span class="hljs-string">&quot;caabbb&quot;</span> -&gt; <span class="hljs-string">&quot;baaccc&quot;</span><br>执行操作 <span class="hljs-number">2</span>：<span class="hljs-string">&quot;baaccc&quot;</span> -&gt; <span class="hljs-string">&quot;abbccc&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">word1</span> = <span class="hljs-string">&quot;cabbba&quot;</span>, <span class="hljs-attr">word2</span> = <span class="hljs-string">&quot;aabbss&quot;</span><br>输出：<span class="hljs-literal">false</span><br>解释：不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word1.length, word2.length &lt;= 105</code></li><li><code>word1</code> 和 <code>word2</code> 仅包含小写英文字母</li></ul><p>把题意翻译成充要条件就是：</p><ol><li>两字符串的长度相同</li><li>两字符串的字符种类相同， 例如，对于某个字符，要么都有，要么都没有。</li></ol><p>符合：word1&#x3D;abbccc，word2&#x3D;caabbb，都有 a、b、c</p><p>不符合：word1&#x3D;abbccc，word2&#x3D;abbccd，word1 只有3类字符a、b、c，无论如何转换 不出有4类字符的 word2</p><ol><li>字符频次相同。跟具体是什么字符无关，只要频次相同即可。</li></ol><p>符合：word1&#x3D;abbccc，word2&#x3D;caabbb，都有1、2、3频次</p><p>不符合，word1&#x3D;abbccc，word2&#x3D;aabbcc，word1 频次有1、2、3，word2 的频次只有2</p><p>所以： 解题过程实际上在验证是否满足3个条件，而不是寻求满足 word1 转换到 word2 的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">closeStrings</span><span class="hljs-params">(word1 <span class="hljs-type">string</span>, word2 <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n, m := <span class="hljs-built_in">len</span>(word1), <span class="hljs-built_in">len</span>(word2)<br>    <span class="hljs-keyword">if</span> n != m &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> word1 &#123;<br>        <span class="hljs-keyword">if</span> !strings.Contains(word2, <span class="hljs-type">string</span>(v)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br><br>    hash1, hash2 := <span class="hljs-keyword">map</span>[<span class="hljs-type">rune</span>]<span class="hljs-type">int</span>&#123;&#125;, <span class="hljs-keyword">map</span>[<span class="hljs-type">rune</span>]<span class="hljs-type">int</span>&#123;&#125;<br>   <br>    arr1, arr2 := []<span class="hljs-type">int</span>&#123;&#125;, []<span class="hljs-type">int</span>&#123;&#125;<br><br>    <span class="hljs-comment">//记录每个字符出现的次数</span><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> word1 &#123;<br>        _, ok := hash1[v]<br>        <span class="hljs-keyword">if</span> ok &#123;<br>            hash1[v]++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            hash1[v] = <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> hash1 &#123;<br>        arr1 = <span class="hljs-built_in">append</span>(arr1, v)<br>    &#125;<br>    sort.Ints(arr1)<br><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> word2 &#123;<br>        _, ok := hash2[v]<br>        <span class="hljs-keyword">if</span> ok &#123;<br>            hash2[v]++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            hash2[v] = <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> hash2 &#123;<br>        arr2 = <span class="hljs-built_in">append</span>(arr2, v)<br>    &#125;<br>    sort.Ints(arr2)<br><br>    <span class="hljs-keyword">if</span> reflect.DeepEqual(arr1, arr2) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day33"><a href="#day33" class="headerlink" title="day33"></a>day33</h3><h4 id="2352-相等行列对"><a href="#2352-相等行列对" class="headerlink" title="2352. 相等行列对"></a><a href="https://leetcode.cn/problems/equal-row-and-column-pairs/">2352. 相等行列对</a></h4><p>给你一个下标从 <strong>0</strong> 开始、大小为 <code>n x n</code> 的整数矩阵 <code>grid</code> ，返回满足 <code>Ri</code> 行和 <code>Cj</code> 列相等的行列对 <code>(Ri, Cj)</code> 的数目<em>。</em></p><p>如果行和列以相同的顺序包含相同的元素（即相等的数组），则认为二者是相等的。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/06/01/ex1.jpg" alt="img"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：grid = <span class="hljs-string">[[3,2,1],[1,7,6],[2,7,7]]</span><br>输出：<span class="hljs-number">1</span><br>解释：存在一对相等行列对：<br>- (第 <span class="hljs-number">2</span> 行，第 <span class="hljs-number">1</span> 列)：<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/06/01/ex2.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：grid = <span class="hljs-comment">[<span class="hljs-comment">[3,1,2,2]</span>,<span class="hljs-comment">[1,4,4,5]</span>,<span class="hljs-comment">[2,4,2,2]</span>,<span class="hljs-comment">[2,4,2,2]</span>]</span><br>输出：3<br>解释：存在三对相等行列对：<br>- (第 0 行，第 0 列)：<span class="hljs-comment">[3,1,2,2]</span><br>- (第 2 行, 第 2 列)：<span class="hljs-comment">[2,4,2,2]</span><br>- (第 3 行, 第 2 列)：<span class="hljs-comment">[2,4,2,2]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == grid.length == grid[i].length</code></li><li><code>1 &lt;= n &lt;= 200</code></li><li><code>1 &lt;= grid[i][j] &lt;= 105</code></li></ul><p>官方题解：</p><p>首先将矩阵的行放入哈希表中统计次数，哈希表的键可以是将行拼接后的字符串，也可以用各语言内置的数据结构，然后分别统计每一列相等的行有多少，求和即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">equalPairs</span><span class="hljs-params">(grid [][]<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(grid)<br>    cnt := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>    <span class="hljs-keyword">for</span> _, row := <span class="hljs-keyword">range</span> grid &#123;<br>        cnt[fmt.Sprint(row)]++<br>    &#125;<br>    res := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; n; j++ &#123;<br>        <span class="hljs-keyword">var</span> arr []<span class="hljs-type">int</span><br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>            arr = <span class="hljs-built_in">append</span>(arr, grid[i][j])<br>        &#125;<br>        <span class="hljs-keyword">if</span> val, ok := cnt[fmt.Sprint(arr)]; ok &#123;<br>            res += val<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2390-从字符串中移除星号"><a href="#2390-从字符串中移除星号" class="headerlink" title="2390. 从字符串中移除星号"></a><a href="https://leetcode.cn/problems/removing-stars-from-a-string/">2390. 从字符串中移除星号</a></h4><p>给你一个包含若干星号 <code>*</code> 的字符串 <code>s</code> 。</p><p>在一步操作中，你可以：</p><ul><li>选中 <code>s</code> 中的一个星号。</li><li>移除星号 <strong>左侧</strong> 最近的那个 <strong>非星号</strong> 字符，并移除该星号自身。</li></ul><p>返回移除 <strong>所有</strong> 星号之后的字符串<strong>。</strong></p><p><strong>注意：</strong></p><ul><li>生成的输入保证总是可以执行题面中描述的操作。</li><li>可以证明结果字符串是唯一的。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：s = <span class="hljs-string">&quot;leet**cod*e&quot;</span><br>输出：<span class="hljs-string">&quot;lecoe&quot;</span><br>解释：从左到右执行移除操作：<br>- 距离第 <span class="hljs-number">1</span> 个星号最近的字符是 <span class="hljs-string">&quot;leet**cod*e&quot;</span> 中的 &#x27;t&#x27; ，s 变为 <span class="hljs-string">&quot;lee*cod*e&quot;</span> 。<br>- 距离第 <span class="hljs-number">2</span> 个星号最近的字符是 <span class="hljs-string">&quot;lee*cod*e&quot;</span> 中的 &#x27;e&#x27; ，s 变为 <span class="hljs-string">&quot;lecod*e&quot;</span> 。<br>- 距离第 <span class="hljs-number">3</span> 个星号最近的字符是 <span class="hljs-string">&quot;lecod*e&quot;</span> 中的 &#x27;d&#x27; ，s 变为 <span class="hljs-string">&quot;lecoe&quot;</span> 。<br>不存在其他星号，返回 <span class="hljs-string">&quot;lecoe&quot;</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;erase*****&quot;</span><br>输出：<span class="hljs-string">&quot;&quot;</span><br>解释：整个字符串都会被移除，所以返回空字符串。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s</code> 由小写英文字母和星号 <code>*</code> 组成</li><li><code>s</code> 可以执行上述操作</li></ul><p>根本不需要用队列，直接用切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeStars</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    st := []<span class="hljs-type">rune</span>&#123;&#125;<br><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br>        <span class="hljs-keyword">if</span> v == <span class="hljs-string">&#x27;*&#x27;</span> &#123;<br>            st = st[:<span class="hljs-built_in">len</span>(st)<span class="hljs-number">-1</span>]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            st = <span class="hljs-built_in">append</span>(st, v)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(st)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day34"><a href="#day34" class="headerlink" title="day34"></a>day34</h3><h4 id="735-Asteroid-Collision"><a href="#735-Asteroid-Collision" class="headerlink" title="735. Asteroid Collision"></a><a href="https://leetcode.cn/problems/asteroid-collision/">735. Asteroid Collision</a></h4><p>We are given an array <code>asteroids</code> of integers representing asteroids in a row.</p><p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p><p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p><p><strong>Example 1:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: asteroids =<span class="hljs-meta"> [5,10,-5]</span><br><span class="hljs-attribute">Output</span>:<span class="hljs-meta"> [5,10]</span><br><span class="hljs-attribute">Explanation</span>: The <span class="hljs-number">10</span> and -<span class="hljs-number">5</span> collide resulting in <span class="hljs-number">10</span>. The <span class="hljs-number">5</span> and <span class="hljs-number">10</span> never collide.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: asteroids =<span class="hljs-meta"> [8,-8]</span><br><span class="hljs-attribute">Output</span>:<span class="hljs-meta"> []</span><br><span class="hljs-attribute">Explanation</span>: The <span class="hljs-number">8</span> and -<span class="hljs-number">8</span> collide exploding each other.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: asteroids =<span class="hljs-meta"> [10,2,-5]</span><br><span class="hljs-attribute">Output</span>:<span class="hljs-meta"> [10]</span><br><span class="hljs-attribute">Explanation</span>: The <span class="hljs-number">2</span> and -<span class="hljs-number">5</span> collide resulting in -<span class="hljs-number">5</span>. The <span class="hljs-number">10</span> and -<span class="hljs-number">5</span> collide resulting in <span class="hljs-number">10</span>.<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= asteroids.length &lt;= 104</code></li><li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li><li><code>asteroids[i] != 0</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">asteroidCollision</span><span class="hljs-params">(asteroids []<span class="hljs-type">int</span>)</span></span> (st []<span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">for</span> _, aster := <span class="hljs-keyword">range</span> asteroids &#123;<br>        alive := <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">for</span> alive &amp;&amp; aster &lt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">len</span>(st) &gt; <span class="hljs-number">0</span> &amp;&amp; st[<span class="hljs-built_in">len</span>(st)<span class="hljs-number">-1</span>] &gt; <span class="hljs-number">0</span> &#123;<br>            alive = st[<span class="hljs-built_in">len</span>(st)<span class="hljs-number">-1</span>] &lt; -aster<br>            <span class="hljs-keyword">if</span> st[<span class="hljs-built_in">len</span>(st)<span class="hljs-number">-1</span>] &lt;= -aster &#123;<br>                st = st[:<span class="hljs-built_in">len</span>(st)<span class="hljs-number">-1</span>]<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> alive &#123;<br>            st = <span class="hljs-built_in">append</span>(st, aster)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>看了一个视频讲解：</p><p><a href="https://www.bilibili.com/video/BV1oY4y177WD/?spm_id_from=333.337.search-card.all.click&vd_source=a6399ceb541c152f6fdd163573a7e845">【Leetcode】735. 行星碰撞（写了一坨屎，但是优化 ）【每日一题系列20220713】(py &amp; C++)_哔哩哔哩_bilibili</a></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/image-20230910132036401.png" alt="image-20230910132036401"></p><p>思路清晰，用go模仿了一个</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">asteroidCollision</span><span class="hljs-params">(asteroids []<span class="hljs-type">int</span>)</span></span> (st []<span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> asteroids &#123;<br>        <span class="hljs-comment">// 当栈为空或者是元素是正数</span><br>        <span class="hljs-keyword">if</span> value &gt; <span class="hljs-number">0</span> || <span class="hljs-built_in">len</span>(st) == <span class="hljs-number">0</span> &#123;<br>            st = <span class="hljs-built_in">append</span>(st, value)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            flag := <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(st) != <span class="hljs-number">0</span> &amp;&amp; value &lt; <span class="hljs-number">0</span> &amp;&amp; st[<span class="hljs-built_in">len</span>(st)<span class="hljs-number">-1</span>] &gt; <span class="hljs-number">0</span> &#123;<br>                <span class="hljs-keyword">if</span> st[<span class="hljs-built_in">len</span>(st)<span class="hljs-number">-1</span>] &gt; -value &#123;<br>                    flag = <span class="hljs-literal">false</span><br>                    <span class="hljs-keyword">break</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> st[<span class="hljs-built_in">len</span>(st)<span class="hljs-number">-1</span>] &lt; -value &#123;<br>                    st = st[:<span class="hljs-built_in">len</span>(st)<span class="hljs-number">-1</span>]<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    st = st[:<span class="hljs-built_in">len</span>(st)<span class="hljs-number">-1</span>]<br>                    flag = <span class="hljs-literal">false</span><br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> flag &#123;<br>                st = <span class="hljs-built_in">append</span>(st, value)<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day35"><a href="#day35" class="headerlink" title="day35"></a>day35</h3><h4 id="394-Decode-String"><a href="#394-Decode-String" class="headerlink" title="394.Decode String"></a><a href="https://leetcode.cn/problems/decode-string/description/?envType=study-plan-v2&envId=leetcode-75">394.Decode String</a></h4><p>Given an encoded string, return its decoded string.</p><p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p><p>The test cases are generated so that the length of the output will never exceed <code>105</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> s = <span class="hljs-string">&quot;3[a]2[bc]&quot;</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-string">&quot;aaabcbc&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> s = <span class="hljs-string">&quot;3[a2[c]]&quot;</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-string">&quot;accaccacc&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> s = <span class="hljs-string">&quot;2[abc]3[cd]ef&quot;</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-string">&quot;abcabccdcdcdef&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 30</code></li><li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>&#39;[]&#39;</code>.</li><li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li><li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li></ul><p>Simulate the stack with slice </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">decodeString</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>strStack := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">0</span>)<br>numStack := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>)<br>currentStr := <span class="hljs-string">&quot;&quot;</span><br>currentNum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br>char := <span class="hljs-type">string</span>(s[i])<br><span class="hljs-keyword">if</span> char &gt;= <span class="hljs-string">&quot;0&quot;</span> &amp;&amp; char &lt;= <span class="hljs-string">&quot;9&quot;</span> &#123; <span class="hljs-comment">// 数字</span><br>num, _ := strconv.Atoi(char)<br>currentNum = currentNum*<span class="hljs-number">10</span> + num<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> char == <span class="hljs-string">&quot;[&quot;</span> &#123; <span class="hljs-comment">// 左括号</span><br><span class="hljs-comment">// 入栈并重置</span><br>numStack = <span class="hljs-built_in">append</span>(numStack, currentNum)<br>strStack = <span class="hljs-built_in">append</span>(strStack, currentStr)<br>currentNum = <span class="hljs-number">0</span><br>currentStr = <span class="hljs-string">&quot;&quot;</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> char == <span class="hljs-string">&quot;]&quot;</span> &#123; <span class="hljs-comment">// 右括号</span><br><span class="hljs-comment">// 出栈并解码</span><br>num := numStack[<span class="hljs-built_in">len</span>(numStack)<span class="hljs-number">-1</span>]<br>numStack = numStack[:<span class="hljs-built_in">len</span>(numStack)<span class="hljs-number">-1</span>]<br><br>prevStr := strStack[<span class="hljs-built_in">len</span>(strStack)<span class="hljs-number">-1</span>]<br>strStack = strStack[:<span class="hljs-built_in">len</span>(strStack)<span class="hljs-number">-1</span>]<br><br>currentStr = prevStr + strings.Repeat(currentStr, num)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>currentStr += char<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> currentStr<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="933-Number-of-Recent-Calls"><a href="#933-Number-of-Recent-Calls" class="headerlink" title="933. Number of Recent Calls"></a><a href="https://leetcode.cn/problems/number-of-recent-calls/">933. Number of Recent Calls</a></h4><p>You have a <code>RecentCounter</code> class which counts the number of recent requests within a certain time frame.</p><p>Implement the <code>RecentCounter</code> class:</p><ul><li><code>RecentCounter()</code> Initializes the counter with zero recent requests.</li><li><code>int ping(int t)</code> Adds a new request at time <code>t</code>, where <code>t</code> represents some time in milliseconds, and returns the number of requests that has happened in the past <code>3000</code> milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range <code>[t - 3000, t]</code>.</li></ul><p>It is <strong>guaranteed</strong> that every call to <code>ping</code> uses a strictly larger value of <code>t</code> than the previous call.</p><p><strong>Example 1:</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">Input</span><br>[<span class="hljs-string">&quot;RecentCounter&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>]<br>[[], [<span class="hljs-number">1</span>], [<span class="hljs-number">100</span>], [<span class="hljs-number">3001</span>], [<span class="hljs-number">3002</span>]]<br><span class="hljs-symbol">Output</span><br>[null, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-symbol">Explanation</span><br><span class="hljs-symbol">RecentCounter</span> recentCounter = new <span class="hljs-symbol">RecentCounter</span>();<br>recentCounter.ping(<span class="hljs-number">1</span>);     // requests = [<span class="hljs-number">1</span>], range is [<span class="hljs-number">-2999</span>,<span class="hljs-number">1</span>], return <span class="hljs-number">1</span><br>recentCounter.ping(<span class="hljs-number">100</span>);   // requests = [<span class="hljs-number">1</span>, <span class="hljs-number">100</span>], range is [<span class="hljs-number">-2900</span>,<span class="hljs-number">100</span>], return <span class="hljs-number">2</span><br>recentCounter.ping(<span class="hljs-number">3001</span>);  // requests = [<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">3001</span>], range is [<span class="hljs-number">1</span>,<span class="hljs-number">3001</span>], return <span class="hljs-number">3</span><br>recentCounter.ping(<span class="hljs-number">3002</span>);  // requests = [<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">3001</span>, <span class="hljs-number">3002</span>], range is [<span class="hljs-number">2</span>,<span class="hljs-number">3002</span>], return <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= t &lt;= 109</code></li><li>Each test case will call <code>ping</code> with <strong>strictly increasing</strong> values of <code>t</code>.</li><li>At most <code>104</code> calls will be made to <code>ping</code>.</li></ul><p>Simulate the queue with slice</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> RecentCounter <span class="hljs-keyword">struct</span> &#123;<br>request []<span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span></span> RecentCounter &#123;<br><span class="hljs-keyword">return</span> RecentCounter&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *RecentCounter)</span></span> Ping(t <span class="hljs-type">int</span>) <span class="hljs-type">int</span> &#123;<br><span class="hljs-comment">// 将新的时间戳加入队列</span><br>c.request = <span class="hljs-built_in">append</span>(c.request, t)<br><br><span class="hljs-comment">// 删除超出时间范围的时间戳</span><br><span class="hljs-keyword">for</span> c.request[<span class="hljs-number">0</span>] &lt; t<span class="hljs-number">-3000</span> &#123;<br>c.request = c.request[<span class="hljs-number">1</span>:]<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(c.request)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL</title>
    <link href="/2023/08/22/SQL/"/>
    <url>/2023/08/22/SQL/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL语法查漏补缺"><a href="#SQL语法查漏补缺" class="headerlink" title="SQL语法查漏补缺"></a>SQL语法查漏补缺</h1><p>所有示例均来自于<a href="http://sqlmother.yupi.icu/#/learn">SQL之母 - SQL自学网站 (yupi.icu)</a></p><h3 id="1、常量和运算"><a href="#1、常量和运算" class="headerlink" title="1、常量和运算"></a>1、常量和运算</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>假设有一张名为 <code>orders</code> 的数据表，它存储了订单信息，包括订单编号（order_id）、商品单价（unit_price）、购买数量（quantity）等：</p><p>数据表<code>orders</code>：</p><table><thead><tr><th>order_id</th><th>unit_price</th><th>quantity</th></tr></thead><tbody><tr><td>1001</td><td>10.00</td><td>5</td></tr><tr><td>1002</td><td>20.00</td><td>3</td></tr><tr><td>1003</td><td>15.00</td><td>2</td></tr><tr><td>1004</td><td>25.00</td><td>4</td></tr></tbody></table><p>现在，我们需要计算每个订单的总金额（total_amount），即商品单价（unit_price）乘以购买数量（quantity）。</p><p>SQL 查询语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> order_id, unit_price, quantity, unit_price <span class="hljs-operator">*</span> quantity <span class="hljs-keyword">as</span> total_amount <span class="hljs-keyword">from</span> orders;<br></code></pre></td></tr></table></figure><p>查询结果如下，其中 total_amount 是计算出来的新列：</p><table><thead><tr><th>order_id</th><th>unit_price</th><th>quantity</th><th>total_amount</th></tr></thead><tbody><tr><td>1001</td><td>10.00</td><td>5</td><td>50.00</td></tr><tr><td>1002</td><td>20.00</td><td>3</td><td>60.00</td></tr><tr><td>1003</td><td>15.00</td><td>2</td><td>30.00</td></tr><tr><td>1004</td><td>25.00</td><td>4</td><td>100.00</td></tr></tbody></table><p>此外，SQL 可以直接把常量作为列名，比如执行下列 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">200</span>, <span class="hljs-string">&#x27;篮球&#x27;</span> <span class="hljs-keyword">as</span> hobby;<br></code></pre></td></tr></table></figure><p>查询结果如下：</p><table><thead><tr><th>200</th><th>hobby</th></tr></thead><tbody><tr><td>200</td><td>篮球</td></tr></tbody></table><h3 id="2、模糊查询"><a href="#2、模糊查询" class="headerlink" title="2、模糊查询"></a>2、模糊查询</h3><p>模糊查询是一种特殊的条件查询，它允许我们根据模式匹配来查找符合特定条件的数据，可以使用 LIKE 关键字实现模糊查询。</p><p>在 LIKE 模糊查询中，我们使用通配符来代表零个或多个字符，从而能够快速地找到匹配的数据。</p><p>有如下 2 种通配符：</p><ul><li>百分号（%）：表示任意长度的任意字符序列。</li><li>下划线（_）：表示任意单个字符。</li></ul><p>模糊查询的应用场景：假设你是一名侦探，你需要根据目标人物的一部分线索信息来找到匹配的目标，比如你可以根据目标的名字中包含的关键字或字符来查找。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>假设有一张名为<code>employees</code>的数据表，它存储了员工信息，包括员工姓名（name）、年龄（age）、职位（position）等：</p><p>数据表<code>employees</code>：</p><table><thead><tr><th>name</th><th>age</th><th>position</th></tr></thead><tbody><tr><td>张三</td><td>25</td><td>软件工程师</td></tr><tr><td>李四</td><td>30</td><td>数据分析师</td></tr><tr><td>王五</td><td>28</td><td>产品经理</td></tr><tr><td>小明</td><td>22</td><td>软件测试工程师</td></tr></tbody></table><p>现在，我们<u>使用 LIKE 模糊查询来找出姓名（name）中包含关键字 “张” 的员工信息：</u></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- SQL查询语句</span><br><span class="hljs-keyword">select</span> name, age, position <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%张%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>name</th><th>age</th><th>position</th></tr></thead><tbody><tr><td>张三</td><td>25</td><td>软件工程师</td></tr></tbody></table><p>还可以使用模糊查询匹配开头和结尾：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 只查询以 &quot;张&quot; 开头的数据行</span><br><span class="hljs-keyword">select</span> name, age, position <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;张%&#x27;</span>;<br><br><span class="hljs-comment">-- 只查询以 &quot;张&quot; 结尾的数据行</span><br><span class="hljs-keyword">select</span> name, age, position <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%张&#x27;</span>;<br></code></pre></td></tr></table></figure><p>同理，可以使用 <code>not like</code> 来查询不包含某关键字的信息。</p><p>比如使用 LIKE 模糊查询来找出姓名（name）中不包含关键字 “李” 的员工信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name, age, position <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%李%&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="3、去重"><a href="#3、去重" class="headerlink" title="3、去重"></a>3、去重</h3><p>在数据表中，可能存在重复的数据记录，但如果我们想要过滤掉重复的记录，只保留不同的记录，就要使用 SQL 的去重功能。</p><p>在 SQL 中，我们可以使用 <code>DISTINCT</code> 关键字来实现去重操作。</p><p>举个应用场景：假设你是班长，要统计班级中有哪些不同的学生，而不关心他们重复出现的次数，就可以使用去重。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>假设有一张名为<code>students</code>的数据表，它存储了学生信息，包括学生姓名（name）、班级ID（class_id）、考试编号（exam_num）、成绩（score）等：</p><p>数据表<code>students</code>：</p><table><thead><tr><th>name</th><th>class_id</th><th>exam_num</th><th>score</th></tr></thead><tbody><tr><td>张三</td><td>1</td><td>1</td><td>90</td></tr><tr><td>李四</td><td>2</td><td>2</td><td>85</td></tr><tr><td>王五</td><td>1</td><td>1</td><td>92</td></tr><tr><td>李四</td><td>2</td><td>3</td><td>88</td></tr></tbody></table><p>现在，我们使用<code>DISTINCT</code>关键字来找出不同的班级 ID：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- SQL 查询语句</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> class_id <span class="hljs-keyword">from</span> students;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>class_id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table><p>除了按照单字段去重外，<code>DISTINCT</code> 关键字还支持根据多个字段的组合来进行去重操作，确保多个字段的组合是唯一的。</p><p>示例语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">distinct</span> 字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, 字段<span class="hljs-number">3</span>, ...<br></code></pre></td></tr></table></figure><h3 id="4、排序"><a href="#4、排序" class="headerlink" title="4、排序"></a>4、排序</h3><p>在查询数据时，我们有时希望对结果按照某个字段的值进行排序，以便更好地查看数据。</p><p>在 SQL 中，我们可以使用 <code>ORDER BY</code> 关键字来实现排序操作。<code>ORDER BY</code> 后面跟上需要排序的字段，</p><p>可以选择<u>升序（ASC）或降序（DESC）排列</u>。</p><p>SQL默认是升序排列，如果直接order by element 的话，默认就是按照element字段的数据升序排列</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p>假设有一张名为 <code>students</code> 的数据表，它存储了学生信息，包括学生姓名（name）、年龄（age）和成绩（score）等：</p><p>数据表 <code>students</code> ：</p><table><thead><tr><th>name</th><th>age</th><th>score</th></tr></thead><tbody><tr><td>张三</td><td>18</td><td>90</td></tr><tr><td>李四</td><td>20</td><td>85</td></tr><tr><td>王五</td><td>19</td><td>92</td></tr><tr><td>赵六</td><td>20</td><td>88</td></tr></tbody></table><p>现在，我们使用<code>ORDER BY</code>关键字来对学生表进行排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- SQL 查询语句 1</span><br><span class="hljs-keyword">select</span> name, age <span class="hljs-keyword">from</span> students <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span>;<br><br><span class="hljs-comment">-- SQL 查询语句 2</span><br><span class="hljs-keyword">select</span> name, score <span class="hljs-keyword">from</span> students <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>查询语句 1 结果，按照年龄升序（从小到大）：</p><table><thead><tr><th>name</th><th>age</th></tr></thead><tbody><tr><td>张三</td><td>18</td></tr><tr><td>王五</td><td>19</td></tr><tr><td>李四</td><td>20</td></tr><tr><td>赵六</td><td>20</td></tr></tbody></table><p>查询语句 2 结果，按照分数降序（从大到小）：</p><table><thead><tr><th>name</th><th>score</th></tr></thead><tbody><tr><td>王五</td><td>92</td></tr><tr><td>张三</td><td>90</td></tr><tr><td>赵六</td><td>88</td></tr><tr><td>李四</td><td>85</td></tr></tbody></table><p>在排序的基础上，我们还可以根据多个字段的值进行排序。当第一个字段的值相同时，再按照第二个字段的值进行排序，以此类推。</p><p>示例语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段<span class="hljs-number">1</span> [升序<span class="hljs-operator">/</span>降序], 字段<span class="hljs-number">2</span> [升序<span class="hljs-operator">/</span>降序], ...<br></code></pre></td></tr></table></figure><h3 id="5、截断和偏移"><a href="#5、截断和偏移" class="headerlink" title="5、截断和偏移"></a>5、截断和偏移</h3><p>在 SQL 中，我们使用 <code>LIMIT</code> 关键字来实现数据的截断和偏移。</p><p>截断和偏移的一个典型的应用场景是分页，即网站内容很多时，用户可以根据页号每次只看部分数据。</p><p>– LIMIT 后跟 2 个整数，依次表示从第几条数据开始、一次获取几条</p><p>注意 limit 2, 2 表示的是从下标为2的那一条数据开始，一次获取2条，下标默认是从0开始的</p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>假设有一张名为 <code>tasks</code> 的数据表，它存储了待办事项信息，包括任务名称（task_name）和截止日期（due_date）等。</p><p>数据表<code>tasks</code>：</p><table><thead><tr><th>task_name</th><th>due_date</th></tr></thead><tbody><tr><td>完成报告</td><td>2023-08-05</td></tr><tr><td>预约医生</td><td>2023-08-08</td></tr><tr><td>购买礼物</td><td>2023-08-10</td></tr><tr><td>安排旅行</td><td>2023-08-15</td></tr></tbody></table><p>现在，我们使用<code>LIMIT</code>关键字来进行分页查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- LIMIT 后只跟一个整数，表示要截断的数据条数（一次获取几条）</span><br><span class="hljs-keyword">select</span> task_name, due_date <span class="hljs-keyword">from</span> tasks limit <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">-- LIMIT 后跟 2 个整数，依次表示从第几条数据开始、一次获取几条</span><br><span class="hljs-keyword">select</span> task_name, due_date <span class="hljs-keyword">from</span> tasks limit <span class="hljs-number">2</span>, <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>查询语句 1 结果，只获取了 2 条数据：</p><table><thead><tr><th>task_name</th><th>due_date</th></tr></thead><tbody><tr><td>完成报告</td><td>2023-08-05</td></tr><tr><td>预约医生</td><td>2023-08-08</td></tr></tbody></table><p>查询语句 2 结果，从下标为 2（第 3 条）数据的位置开始获取 2 条数据：</p><table><thead><tr><th>task_name</th><th>due_date</th></tr></thead><tbody><tr><td>购买礼物</td><td>2023-08-10</td></tr><tr><td>安排旅行</td><td>2023-08-15</td></tr></tbody></table><h3 id="6、条件分支"><a href="#6、条件分支" class="headerlink" title="6、条件分支"></a>6、条件分支</h3><p>条件分支 <code>case when</code> 是 SQL 中用于根据条件进行分支处理的语法。它类似于其他编程语言中的 if else 条件判断语句，允许我们根据不同的条件选择不同的结果返回。</p><p>使用 <code>case when</code> 可以在查询结果中根据特定的条件动态生成新的列或对现有的列进行转换。</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><p>假设有一个学生表 <code>student</code>，包含以下字段：<code>name</code>（姓名）、<code>age</code>（年龄）。数据如下：</p><table><thead><tr><th>name</th><th>age</th></tr></thead><tbody><tr><td>小明</td><td>18</td></tr><tr><td>鸡哥</td><td>25</td></tr><tr><td>李华</td><td>30</td></tr><tr><td>王五</td><td>40</td></tr></tbody></table><p>使用条件分支 <code>case when</code> ，根据 name 来判断学生是否会说 RAP，并起别名为 can_rap。</p><p>示例 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>  name,<br>  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> (name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;鸡哥&#x27;</span>) <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;会&#x27;</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;不会&#x27;</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> can_rap<br><span class="hljs-keyword">FROM</span><br>  student;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>name</th><th>can_rap</th></tr></thead><tbody><tr><td>小明</td><td>不会</td></tr><tr><td>鸡哥</td><td>会</td></tr><tr><td>李华</td><td>不会</td></tr><tr><td>王五</td><td>不会</td></tr></tbody></table><p><code>case when</code> 支持同时指定多个分支，示例语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> (条件<span class="hljs-number">1</span>) <span class="hljs-keyword">THEN</span> 结果<span class="hljs-number">1</span><br>   <span class="hljs-keyword">WHEN</span> (条件<span class="hljs-number">2</span>) <span class="hljs-keyword">THEN</span> 结果<span class="hljs-number">2</span><br>   ...<br>   <span class="hljs-keyword">ELSE</span> 其他结果 <span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>示例：</p><p>假设有一个学生表 <code>student</code>，包含以下字段：<code>name</code>（姓名）、<code>age</code>（年龄）。请你编写一个 SQL 查询，将学生按照年龄划分为三个年龄等级（age_level）：60 岁以上为 “老同学”，20 岁以上（不包括 60 岁以上）为 “年轻”，20 岁及以下、以及没有年龄信息为 “小同学”。</p><p>返回结果应包含学生的姓名（name）和年龄等级（age_level），并按姓名升序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name,<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (age <span class="hljs-operator">&gt;</span> <span class="hljs-number">60</span>) <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;老同学&#x27;</span> <br>         <span class="hljs-keyword">when</span> (age <span class="hljs-operator">&gt;</span> <span class="hljs-number">20</span>) <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;年轻&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;小同学&#x27;</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> age_level<br>    <span class="hljs-keyword">from</span> student <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> name <span class="hljs-keyword">asc</span>;<br><br></code></pre></td></tr></table></figure><h3 id="7、时间函数"><a href="#7、时间函数" class="headerlink" title="7、时间函数"></a>7、时间函数</h3><p>在 SQL 中，时间函数是用于处理日期和时间的特殊函数。它们允许我们在查询中操作和处理日期、时间、日期时间数据，从而使得在数据库中进行时间相关的操作变得更加方便和灵活。</p><p>常用的时间函数有：</p><ul><li>DATE：获取当前日期</li><li>DATETIME：获取当前日期时间</li><li>TIME：获取当前时间</li></ul><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><p>假设有一个订单表 <code>orders</code>，包含以下字段：<code>order_id</code>（订单号）、<code>order_date</code>（下单日期）、<code>order_time</code>（下单时间）。数据如下：</p><table><thead><tr><th>order_id</th><th>order_date</th><th>order_time</th></tr></thead><tbody><tr><td>1</td><td>2023-08-01</td><td>12:30:45</td></tr><tr><td>2</td><td>2023-08-01</td><td>14:20:10</td></tr><tr><td>3</td><td>2023-08-02</td><td>09:15:00</td></tr><tr><td>4</td><td>2023-08-02</td><td>18:05:30</td></tr></tbody></table><p>使用时间函数获取当前日期、当前日期时间和当前时间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 获取当前日期</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-type">DATE</span>() <span class="hljs-keyword">AS</span> <span class="hljs-built_in">current_date</span>;<br><br><span class="hljs-comment">-- 获取当前日期时间</span><br><span class="hljs-keyword">SELECT</span> DATETIME() <span class="hljs-keyword">AS</span> current_datetime;<br><br><span class="hljs-comment">-- 获取当前时间</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-type">TIME</span>() <span class="hljs-keyword">AS</span> <span class="hljs-built_in">current_time</span>;<br></code></pre></td></tr></table></figure><p>查询结果：</p><blockquote><p>为了方便对比，放到同一个表格</p></blockquote><table><thead><tr><th>current_date</th><th>current_datetime</th><th>current_time</th></tr></thead><tbody><tr><td>2023-08-01</td><td>2023-08-01 14:30:00</td><td>14:30:00</td></tr></tbody></table><blockquote><p>注意，这里的日期、日期时间和时间将根据当前的系统时间来生成，实际运行结果可能会因为当前时间而不同。</p></blockquote><p>还有很多时间函数，比如计算两个日期的相差天数、获取当前日期对应的毫秒数等，实际运用时自行查阅即可，此处不做赘述。</p><p>在 SQL 中，字符串处理是一类用于处理文本数据的函数。它们允许我们对字符串进行各种操作，如转换大小写、计算字符串长度以及搜索和替换子字符串等。字符串处理函数可以帮助我们在数据库中对字符串进行加工和转换，从而满足不同的需求。</p><h3 id="8、字符串处理"><a href="#8、字符串处理" class="headerlink" title="8、字符串处理"></a>8、字符串处理</h3><h4 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h4><p>假设有一个员工表 <code>employees</code>，包含以下字段：<code>id</code>（员工编号）、<code>name</code>（员工姓名）。数据如下：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>小明</td></tr><tr><td>2</td><td>热dog</td></tr><tr><td>3</td><td>Fish摸摸</td></tr><tr><td>4</td><td>鸡哥</td></tr></tbody></table><p>1）使用字符串处理函数 <code>UPPER</code> 将姓名转换为大写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 将姓名转换为大写</span><br><span class="hljs-keyword">SELECT</span> name, <span class="hljs-built_in">UPPER</span>(name) <span class="hljs-keyword">AS</span> upper_name<br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>name</th><th>upper_name</th></tr></thead><tbody><tr><td>小明</td><td>小明</td></tr><tr><td>热dog</td><td>热DOG</td></tr><tr><td>Fish摸摸</td><td>FISH摸摸</td></tr><tr><td>鸡哥</td><td>鸡哥</td></tr></tbody></table><p>2）使用字符串处理函数 <code>LENGTH</code> 计算姓名长度：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 计算姓名长度</span><br><span class="hljs-keyword">SELECT</span> name, LENGTH(name) <span class="hljs-keyword">AS</span> name_length<br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>name</th><th>name_length</th></tr></thead><tbody><tr><td>小明</td><td>2</td></tr><tr><td>热dog</td><td>4</td></tr><tr><td>Fish摸摸</td><td>6</td></tr><tr><td>鸡哥</td><td>2</td></tr></tbody></table><p>3）使用字符串处理函数 <code>LOWER</code> 将姓名转换为小写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 将姓名转换为小写并进行条件筛选</span><br><span class="hljs-keyword">SELECT</span> name, <span class="hljs-built_in">LOWER</span>(name) <span class="hljs-keyword">AS</span> lower_name<br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>小明</td></tr><tr><td>2</td><td>热dog</td></tr><tr><td>3</td><td>fish摸摸</td></tr><tr><td>4</td><td>鸡哥</td></tr></tbody></table><h3 id="9、聚合函数"><a href="#9、聚合函数" class="headerlink" title="9、聚合函数"></a>9、聚合函数</h3><p>在 SQL 中，聚合函数是一类用于对数据集进行 <strong>汇总计算</strong> 的特殊函数。它们可以对一组数据执行诸如计数、求和、平均值、最大值和最小值等操作。聚合函数通常在 SELECT 语句中配合 GROUP BY 子句使用，用于对分组后的数据进行汇总分析。</p><p>常见的聚合函数包括：</p><ul><li>COUNT：计算指定列的行数或非空值的数量。</li><li>SUM：计算指定列的数值之和。</li><li>AVG：计算指定列的数值平均值。</li><li>MAX：找出指定列的最大值。</li><li>MIN：找出指定列的最小值。</li></ul><h4 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h4><p>假设有一个订单表 <code>orders</code>，包含以下字段：<code>order_id</code>（订单号）、<code>customer_id</code>（客户编号）、<code>amount</code>（订单金额）。数据如下：</p><table><thead><tr><th>order_id</th><th>customer_id</th><th>amount</th></tr></thead><tbody><tr><td>1</td><td>A001</td><td>100</td></tr><tr><td>2</td><td>A002</td><td>200</td></tr><tr><td>3</td><td>A001</td><td>150</td></tr><tr><td>4</td><td>A003</td><td>50</td></tr></tbody></table><p>1）使用聚合函数 <code>COUNT</code> 计算订单表中的总订单数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> order_num<br><span class="hljs-keyword">FROM</span> orders;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>order_num</th></tr></thead><tbody><tr><td>4</td></tr></tbody></table><p>2）使用聚合函数 <code>COUNT(DISTINCT 列名)</code> 计算订单表中不同客户的数量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> customer_id) <span class="hljs-keyword">AS</span> customer_num<br><span class="hljs-keyword">FROM</span> orders;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>customer_num</th></tr></thead><tbody><tr><td>3</td></tr></tbody></table><p>3）使用聚合函数 <code>SUM</code> 计算总订单金额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(amount) <span class="hljs-keyword">AS</span> total_amount<br><span class="hljs-keyword">FROM</span> orders;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>total_amount</th></tr></thead><tbody><tr><td>500</td></tr></tbody></table><h3 id="10、单字段分组"><a href="#10、单字段分组" class="headerlink" title="10、单字段分组"></a>10、单字段分组</h3><p>在 SQL 中，分组聚合是一种对数据进行分类并对每个分类进行聚合计算的操作。它允许我们按照指定的列或字段对数据进行分组，然后对每个分组应用聚合函数，如 COUNT、SUM、AVG 等，以获得分组后的汇总结果。</p><p>举个例子：某个学校可以按照班级将学生分组，并对每个班级进行统计。查看每个班级有多少学生、每个班级的平均成绩。这样我们就能够对学校各班的学生情况有一个整体的了解，而不是单纯看个别学生的信息。</p><p>在 SQL 中，通常使用 <code>GROUP BY</code> 关键字对数据进行分组。</p><h4 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h4><p>假设有一个订单表 <code>orders</code>，包含以下字段：<code>order_id</code>（订单号）、<code>customer_id</code>（客户编号）、<code>amount</code>（订单金额）。数据如下：</p><table><thead><tr><th>order_id</th><th>customer_id</th><th>amount</th></tr></thead><tbody><tr><td>1</td><td>A001</td><td>100</td></tr><tr><td>2</td><td>A002</td><td>200</td></tr><tr><td>3</td><td>A001</td><td>150</td></tr><tr><td>4</td><td>A003</td><td>50</td></tr></tbody></table><p>1）使用分组聚合查询中每个客户的编号：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customer_id<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> customer_id;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>customer_id</th></tr></thead><tbody><tr><td>A001</td></tr><tr><td>A002</td></tr><tr><td>A003</td></tr></tbody></table><p>2）使用分组聚合查询每个客户的下单数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customer_id, <span class="hljs-built_in">COUNT</span>(order_id) <span class="hljs-keyword">AS</span> order_num<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> customer_id;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>customer_id</th><th>order_num</th></tr></thead><tbody><tr><td>A001</td><td>2</td></tr><tr><td>A002</td><td>1</td></tr><tr><td>A003</td><td>1</td></tr></tbody></table><h3 id="11、多字段分组"><a href="#11、多字段分组" class="headerlink" title="11、多字段分组"></a>11、多字段分组</h3><p>有时，单字段分组并不能满足我们的需求，比如想统计学校里每个班级每次考试的学生情况，这时就可以使用多字段分组。</p><p>多字段分组和单字段分组的实现方式几乎一致，使用 <code>GROUP BY</code> 语法即可。</p><h4 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h4><p>假设有一个订单表 <code>orders</code>，包含以下字段：<code>order_id</code>（订单号）、<code>product_id</code>（商品编号）、<code>customer_id</code>（客户编号）、<code>amount</code>（订单金额）。</p><p>数据如下：</p><table><thead><tr><th>order_id</th><th>product_id</th><th>customer_id</th><th>amount</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>A001</td><td>100</td></tr><tr><td>2</td><td>1</td><td>A002</td><td>200</td></tr><tr><td>3</td><td>1</td><td>A001</td><td>150</td></tr><tr><td>4</td><td>1</td><td>A003</td><td>50</td></tr><tr><td>5</td><td>2</td><td>A001</td><td>50</td></tr></tbody></table><p>要查询使用多字段分组查询表中 <strong>每个客户</strong> 购买的 <strong>每种商品</strong> 的总金额，相当于按照客户编号和商品编号分组：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询每个班级每次考试的学生人数</span><br><span class="hljs-keyword">SELECT</span> customer_id, product_id, <span class="hljs-built_in">SUM</span>(amount) <span class="hljs-keyword">AS</span> total_amount<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> customer_id, product_id;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>customer_id</th><th>product_id</th><th>total_amount</th></tr></thead><tbody><tr><td>A001</td><td>1</td><td>250</td></tr><tr><td>A001</td><td>2</td><td>50</td></tr><tr><td>A002</td><td>1</td><td>200</td></tr><tr><td>A003</td><td>1</td><td>50</td></tr></tbody></table><h3 id="12、having-子句"><a href="#12、having-子句" class="headerlink" title="12、having 子句"></a>12、having 子句</h3><p>在 SQL 中，HAVING 子句用于在分组聚合后对分组进行过滤。它允许我们对分组后的结果进行条件筛选，只保留满足特定条件的分组。</p><p>HAVING 子句与条件查询 WHERE 子句的区别在于，WHERE 子句用于在 <strong>分组之前</strong> 进行过滤，而 HAVING 子句用于在 <strong>分组之后</strong> 进行过滤。</p><h4 id="示例-11"><a href="#示例-11" class="headerlink" title="示例"></a>示例</h4><p>假设有一个订单表 <code>orders</code>，包含以下字段：<code>order_id</code>（订单号）、<code>customer_id</code>（客户编号）、<code>amount</code>（订单金额）。数据如下：</p><table><thead><tr><th>order_id</th><th>customer_id</th><th>amount</th></tr></thead><tbody><tr><td>1</td><td>A001</td><td>100</td></tr><tr><td>2</td><td>A002</td><td>200</td></tr><tr><td>3</td><td>A001</td><td>150</td></tr><tr><td>4</td><td>A003</td><td>50</td></tr></tbody></table><p>1）使用 HAVING 子句查询订单数超过 1 的客户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customer_id, <span class="hljs-built_in">COUNT</span>(order_id) <span class="hljs-keyword">AS</span> order_num<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> customer_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(order_id) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>customer_id</th><th>order_num</th></tr></thead><tbody><tr><td>A001</td><td>2</td></tr></tbody></table><p>2）使用 HAVING 子句查询订单总金额超过 100 的客户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询总成绩超过200的班级</span><br><span class="hljs-keyword">SELECT</span> customer_id, <span class="hljs-built_in">SUM</span>(amount) <span class="hljs-keyword">AS</span> total_amount<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> customer_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">SUM</span>(amount) <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>customer_id</th><th>total_amount</th></tr></thead><tbody><tr><td>A001</td><td>250</td></tr><tr><td>A002</td><td>200</td></tr></tbody></table><h3 id="13、关联查询-cross-join"><a href="#13、关联查询-cross-join" class="headerlink" title="13、关联查询 - cross join"></a>13、关联查询 - cross join</h3><p>在之前的教程中，我们所有的查询操作都是在单个数据表中进行的。但有时，我们可能希望在单张表的基础上，获取更多额外数据，比如获取学生表中学生所属的班级信息等。这时，就需要使用关联查询。</p><p>在 SQL 中，关联查询是一种用于联合多个数据表中的数据的查询方式。</p><p>其中，<code>CROSS JOIN</code> 是一种简单的关联查询，不需要任何条件来匹配行，它直接将左表的 <strong>每一行</strong> 与右表的 <strong>每一行</strong> 进行组合，返回的结果是两个表的笛卡尔积。</p><h4 id="示例-12"><a href="#示例-12" class="headerlink" title="示例"></a>示例</h4><p>假设有一个员工表 <code>employees</code>，包含以下字段：<code>emp_id</code>（员工编号）、<code>emp_name</code>（员工姓名）、<code>department</code>（所属部门）、<code>salary</code>（工资）。数据如下：</p><table><thead><tr><th>emp_id</th><th>emp_name</th><th>department</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>技术部</td><td>5000</td></tr><tr><td>2</td><td>鸡哥</td><td>财务部</td><td>6000</td></tr><tr><td>3</td><td>李华</td><td>销售部</td><td>4500</td></tr></tbody></table><p>假设还有一个部门表 <code>departments</code>，包含以下字段：<code>department</code>（部门名称）、<code>manager</code>（部门经理）、<code>location</code>（所在地）。数据如下：</p><table><thead><tr><th>department</th><th>manager</th><th>location</th></tr></thead><tbody><tr><td>技术部</td><td>张三</td><td>上海</td></tr><tr><td>财务部</td><td>李四</td><td>北京</td></tr><tr><td>销售部</td><td>王五</td><td>广州</td></tr></tbody></table><p>使用 CROSS JOIN 进行关联查询，将员工表和部门表的所有行组合在一起，获取员工姓名、工资、部门名称和部门经理，示例 SQL 代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.emp_name, e.salary, e.department, d.manager<br><span class="hljs-keyword">FROM</span> employees e<br><span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> departments d;<br></code></pre></td></tr></table></figure><p>注意，在多表关联查询的 SQL 中，我们最好在选择字段时指定字段所属表的名称（比如 e.emp_name），还可以通过给表起别名（比如 employees e）来简化 SQL 语句。</p><p>查询结果：</p><table><thead><tr><th>emp_name</th><th>salary</th><th>department</th><th>manager</th></tr></thead><tbody><tr><td>小明</td><td>5000</td><td>技术部</td><td>张三</td></tr><tr><td>小明</td><td>5000</td><td>财务部</td><td>李四</td></tr><tr><td>小明</td><td>5000</td><td>销售部</td><td>王五</td></tr><tr><td>鸡哥</td><td>6000</td><td>技术部</td><td>张三</td></tr><tr><td>鸡哥</td><td>6000</td><td>财务部</td><td>李四</td></tr><tr><td>鸡哥</td><td>6000</td><td>销售部</td><td>王五</td></tr><tr><td>李华</td><td>4500</td><td>技术部</td><td>张三</td></tr><tr><td>李华</td><td>4500</td><td>财务部</td><td>李四</td></tr><tr><td>李华</td><td>4500</td><td>销售部</td><td>王五</td></tr></tbody></table><h3 id="14、关联查询-inner-join"><a href="#14、关联查询-inner-join" class="headerlink" title="14、关联查询 - inner join"></a>14、关联查询 - inner join</h3><p>在 SQL 中，INNER JOIN 是一种常见的关联查询方式，它根据两个表之间的关联条件，将满足条件的行组合在一起。</p><p>注意，INNER JOIN 只返回两个表中满足关联条件的交集部分，即在两个表中都存在的匹配行。</p><h4 id="示例-13"><a href="#示例-13" class="headerlink" title="示例"></a>示例</h4><p>假设有一个员工表 <code>employees</code>，包含以下字段：<code>emp_id</code>（员工编号）、<code>emp_name</code>（员工姓名）、<code>department</code>（所属部门）、<code>salary</code>（工资）。数据如下：</p><table><thead><tr><th>emp_id</th><th>emp_name</th><th>department</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>技术部</td><td>5000</td></tr><tr><td>2</td><td>鸡哥</td><td>财务部</td><td>6000</td></tr><tr><td>3</td><td>李华</td><td>销售部</td><td>4500</td></tr></tbody></table><p>假设还有一个部门表 <code>departments</code>，包含以下字段：<code>department</code>（部门名称）、<code>manager</code>（部门经理）、<code>location</code>（所在地）。数据如下：</p><table><thead><tr><th>department</th><th>manager</th><th>location</th></tr></thead><tbody><tr><td>技术部</td><td>张三</td><td>上海</td></tr><tr><td>财务部</td><td>李四</td><td>北京</td></tr><tr><td>销售部</td><td>王五</td><td>广州</td></tr><tr><td>摸鱼部</td><td>赵二</td><td>吐鲁番</td></tr></tbody></table><p>使用 INNER JOIN 进行关联查询，根据员工表和部门表之间的公共字段 <code>部门名称（department）</code> 进行匹配，将员工的姓名、工资以及所属部门和部门经理组合在一起：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.emp_name, e.salary, e.department, d.manager<br><span class="hljs-keyword">FROM</span> employees e<br><span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> e.department <span class="hljs-operator">=</span> d.department;<br></code></pre></td></tr></table></figure><p>查询结果如下：</p><table><thead><tr><th>emp_name</th><th>salary</th><th>department</th><th>manager</th></tr></thead><tbody><tr><td>小明</td><td>5000</td><td>技术部</td><td>张三</td></tr><tr><td>鸡哥</td><td>6000</td><td>财务部</td><td>李四</td></tr><tr><td>李华</td><td>4500</td><td>销售部</td><td>王五</td></tr></tbody></table><p>我们会发现，使用 INNER_JOIN 后，只有两个表之间存在对应关系的数据才会被放到查询结果中。</p><h3 id="15、关联查询-outer-join"><a href="#15、关联查询-outer-join" class="headerlink" title="15、关联查询 - outer join"></a>15、关联查询 - outer join</h3><p>在 SQL 中，OUTER JOIN 是一种关联查询方式，它根据指定的关联条件，将两个表中满足条件的行组合在一起，并 <strong>包含没有匹配的行</strong> 。</p><p>在 OUTER JOIN 中，包括 LEFT OUTER JOIN 和 RIGHT OUTER JOIN 两种类型，它们分别表示查询左表和右表的所有行（即使没有被匹配），再加上满足条件的交集部分。</p><h4 id="示例-14"><a href="#示例-14" class="headerlink" title="示例"></a>示例</h4><p>假设有一个员工表 <code>employees</code>，包含以下字段：<code>emp_id</code>（员工编号）、<code>emp_name</code>（员工姓名）、<code>department</code>（所属部门）、<code>salary</code>（工资）。数据如下：</p><table><thead><tr><th>emp_id</th><th>emp_name</th><th>department</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>技术部</td><td>5000</td></tr><tr><td>2</td><td>鸡哥</td><td>财务部</td><td>6000</td></tr><tr><td>3</td><td>李华</td><td>销售部</td><td>4500</td></tr></tbody></table><p>假设还有一个部门表 <code>departments</code>，包含以下字段：<code>department</code>（部门名称）、<code>manager</code>（部门经理）、<code>location</code>（所在地）。数据如下：</p><table><thead><tr><th>department</th><th>manager</th><th>location</th></tr></thead><tbody><tr><td>技术部</td><td>张三</td><td>上海</td></tr><tr><td>财务部</td><td>李四</td><td>北京</td></tr><tr><td>人事部</td><td>王五</td><td>广州</td></tr><tr><td>摸鱼部</td><td>赵二</td><td>吐鲁番</td></tr></tbody></table><p>使用 LEFT JOIN 进行关联查询，根据员工表和部门表之间的部门名称进行匹配，将员工的姓名、工资以及所属部门和部门经理组合在一起，并包含所有员工的信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.emp_name, e.salary, e.department, d.manager<br><span class="hljs-keyword">FROM</span> employees e<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> e.department <span class="hljs-operator">=</span> d.department;<br></code></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>emp_name</th><th>salary</th><th>department</th><th>manager</th></tr></thead><tbody><tr><td>小明</td><td>5000</td><td>技术部</td><td>张三</td></tr><tr><td>鸡哥</td><td>6000</td><td>财务部</td><td>李四</td></tr><tr><td>李华</td><td>4500</td><td>销售部</td><td>NULL</td></tr></tbody></table><p>关注下表格的最后一条数据，李华所属的销售部并没有在部门表中，但仍然返回在了结果集中，manager 为 NULL。</p><p>有些数据库并不支持 RIGHT JOIN 语法，那么如何实现 RIGHT JOIN 呢？</p><p>其实只需要把主表（from 后面的表）和关联表（LEFT JOIN 后面的表）顺序进行调换即可！</p><h3 id="16、子查询-exists"><a href="#16、子查询-exists" class="headerlink" title="16、子查询 - exists"></a>16、子查询 - exists</h3><p>之前的教程讲到，子查询是一种强大的查询工具，它可以嵌套在主查询中，帮助我们进行更复杂的条件过滤和数据检索。</p><p>其中，子查询中的一种特殊类型是 “exists” 子查询，用于检查主查询的结果集是否存在满足条件的记录，它返回布尔值（True 或 False），而不返回实际的数据。</p><h4 id="示例-15"><a href="#示例-15" class="headerlink" title="示例"></a>示例</h4><p>假设我们有以下两个数据表：<code>orders</code> 和 <code>customers</code>，分别包含订单信息和客户信息。</p><p>orders 表：</p><table><thead><tr><th>order_id</th><th>customer_id</th><th>order_date</th><th>total_amount</th></tr></thead><tbody><tr><td>1</td><td>101</td><td>2023-01-01</td><td>200</td></tr><tr><td>2</td><td>102</td><td>2023-01-05</td><td>350</td></tr><tr><td>3</td><td>101</td><td>2023-01-10</td><td>120</td></tr><tr><td>4</td><td>103</td><td>2023-01-15</td><td>500</td></tr></tbody></table><p>customers 表：</p><table><thead><tr><th>customer_id</th><th>name</th><th>city</th></tr></thead><tbody><tr><td>101</td><td>Alice</td><td>New York</td></tr><tr><td>102</td><td>Bob</td><td>Los Angeles</td></tr><tr><td>103</td><td>Charlie</td><td>Chicago</td></tr><tr><td>104</td><td>赵二</td><td>China</td></tr></tbody></table><p>现在，我们希望查询出 <strong>存在订单的</strong> 客户姓名和订单金额。</p><p>使用 exists 子查询的方式，SQL 代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 主查询</span><br><span class="hljs-keyword">SELECT</span> name, total_amount<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> (<br>    <span class="hljs-comment">-- 子查询</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">FROM</span> orders<br>    <span class="hljs-keyword">WHERE</span> orders.customer_id <span class="hljs-operator">=</span> customers.customer_id<br>);<br></code></pre></td></tr></table></figure><p>上述语句中，先遍历客户信息表的每一行，获取到客户编号；然后执行子查询，从订单表中查找该客户编号是否存在，如果存在则返回结果。</p><p>查询结果如下：</p><table><thead><tr><th>name</th><th>total_amount</th></tr></thead><tbody><tr><td>Alice</td><td>200</td></tr><tr><td>Bob</td><td>350</td></tr><tr><td>Charlie</td><td>500</td></tr></tbody></table><p>和 exists 相对的是 not exists，用于查找不满足存在条件的记录。</p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022KCTF</title>
    <link href="/2023/08/13/2022KCTF/"/>
    <url>/2023/08/13/2022KCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h1><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><p>整个函数的分析很简单，sub_7FF677E44260函数可以根据动调得到结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">void</span> *v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+20h] [rbp-F8h]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+24h] [rbp-F4h]</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [rsp+28h] [rbp-F0h]</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">std</span>:</span>:_Container_base0 *v8; <span class="hljs-comment">// [rsp+38h] [rbp-E0h]</span><br>  <span class="hljs-type">char</span> v9[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-D8h] BYREF</span><br>  __int64 SerialNumber[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+60h] [rbp-B8h] BYREF</span><br>  _QWORD UserName[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+80h] [rbp-98h] BYREF</span><br>  __int64 v12[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+A0h] [rbp-78h] BYREF</span><br>  _QWORD v13[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+C0h] [rbp-58h] BYREF</span><br>  __int64 v14[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+E0h] [rbp-38h] BYREF</span><br><br>  sub_7FF677E43320(UserName);<br>  sub_7FF677E43320(SerialNumber);<br>  sub_7FF677E43B40(&amp;qword_7FF677E7A340, <span class="hljs-string">&quot;User-Name:&quot;</span>);<br>  sub_7FF677E43F10(&amp;qword_7FF677E7A580, UserName);<br>  sub_7FF677E43B40(&amp;qword_7FF677E7A340, <span class="hljs-string">&quot;Serial-Number:&quot;</span>);<br>  sub_7FF677E43F10(&amp;qword_7FF677E7A580, SerialNumber);<br>  <span class="hljs-keyword">if</span> ( len(SerialNumber) != <span class="hljs-number">32</span> )<br>    sub_7FF677E42D50();<br>  sub_7FF677E43210(v14, <span class="hljs-string">&quot;4fc0296a51e6d90c794c91951886dc2b&quot;</span>);<br>  sub_7FF677E43210(v13, <span class="hljs-string">&quot;1841352&quot;</span>);<br>  v8 = sub_7FF677E44260(v9, v13, UserName);     <span class="hljs-comment">// v8 = v13 + UserName</span><br>  MD5(v12, v8);                                 <span class="hljs-comment">// v12 = MD5(v8)</span><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; ++i )<br>  &#123;<br>    v6 = (i + *operate__(v14, i)) % <span class="hljs-number">32</span>;         <span class="hljs-comment">// v6 = (i + *(v14 + i)) % 32;</span><br>    v7 = *operate__(SerialNumber, i);           <span class="hljs-comment">// v7 = *(SerialNumber + i)</span><br>    <span class="hljs-comment">// SerialNumber[i] == (v14[i] + i ) % 32</span><br>    <span class="hljs-keyword">if</span> ( v7 != *operate__(v12, v6) )            <span class="hljs-comment">// v7 != *(v12 + v6)</span><br>      sub_7FF677E42D50();<br>  &#125;<br>  v3 = sub_7FF677E43B40(&amp;qword_7FF677E7A340, <span class="hljs-string">&quot;Success&quot;</span>);<br>  _CallMemberFunction0(v3, sub_7FF677E44350);<br>  system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  sub_7FF677E43180(v12);<br>  sub_7FF677E43180(v13);<br>  sub_7FF677E43180(v14);<br>  sub_7FF677E43180(SerialNumber);<br>  sub_7FF677E43180(UserName);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">UserName</span>):<br>    table = <span class="hljs-string">&quot;4fc0296a51e6d90c794c91951886dc2b&quot;</span><br>    salt = <span class="hljs-string">&quot;1841352&quot;</span><br>    res = <span class="hljs-string">&#x27;&#x27;</span><br>    test = md5((salt + UserName).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(test)):<br>        res += test[(<span class="hljs-built_in">ord</span>(table[i]) + i) % <span class="hljs-number">32</span>]<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    UserName = <span class="hljs-string">&quot;6EA73E0FBD3DDC10&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;UserName: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(UserName))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SerialNumber: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(encode(UserName)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Solve</span>():<br>    UserName = <span class="hljs-string">&quot;KCTF&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;UserName: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(UserName))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SerialNumber: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(encode(UserName)))<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    Solve()<br><span class="hljs-comment">#UserName: KCTF</span><br><span class="hljs-comment">#SerialNumber: 213d1aada77bf4a51441947c515199fb</span><br></code></pre></td></tr></table></figure><p>看了98k战队的wp，才知道这些都是string类的成员函数，正确的函数名是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">void</span> *v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+20h] [rbp-F8h]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+24h] [rbp-F4h]</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [rsp+28h] [rbp-F0h]</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *v8; <span class="hljs-comment">// [rsp+38h] [rbp-E0h]</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> v9; <span class="hljs-comment">// [rsp+40h] [rbp-D8h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> serial; <span class="hljs-comment">// [rsp+60h] [rbp-B8h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> username; <span class="hljs-comment">// [rsp+80h] [rbp-98h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> digest; <span class="hljs-comment">// [rsp+A0h] [rbp-78h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> salt; <span class="hljs-comment">// [rsp+C0h] [rbp-58h] BYREF</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> tmp; <span class="hljs-comment">// [rsp+E0h] [rbp-38h] BYREF</span><br> <br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::ctr_1(&amp;username);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::ctr_1(&amp;serial);<br>  <span class="hljs-built_in">std</span>::ostream::write(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot;User-Name:&quot;</span>);<br>  <span class="hljs-built_in">std</span>::istream::read(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>, &amp;username);<br>  <span class="hljs-built_in">std</span>::ostream::write(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot;Serial-Number:&quot;</span>);<br>  <span class="hljs-built_in">std</span>::istream::read(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>, &amp;serial);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::size(&amp;serial) != <span class="hljs-number">32</span> )<br>    fail();<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::ctr_0(&amp;tmp, <span class="hljs-string">&quot;4fc0296a51e6d90c794c91951886dc2b&quot;</span>);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::ctr_0(&amp;salt, <span class="hljs-string">&quot;1841352&quot;</span>);<br>  v8 = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::operator_add(&amp;v9, &amp;salt, &amp;username);<br>  MD5(&amp;digest, v8);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; ++i )<br>  &#123;<br>    v6 = (i + *<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::at(&amp;tmp, i)) % <span class="hljs-number">32</span>;<br>    v7 = *<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::at(&amp;serial, i);<br>    <span class="hljs-keyword">if</span> ( v7 != *<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::at(&amp;digest, v6) )<br>      fail();<br>  &#125;<br>  v3 = <span class="hljs-built_in">std</span>::ostream::write(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot;Success&quot;</span>);<br>  <span class="hljs-built_in">std</span>::ostream::write_0(v3, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>);<br>  system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::dtor(&amp;digest);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::dtor(&amp;salt);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::dtor(&amp;tmp);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::dtor(&amp;serial);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::dtor(&amp;username);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// edi</span><br>  _DWORD *v7; <span class="hljs-comment">// esi</span><br>  _DWORD *v8; <span class="hljs-comment">// esi</span><br>  _DWORD Str[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [esp+4h] [ebp-A0h] BYREF</span><br>  <span class="hljs-type">char</span> v11[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [esp+84h] [ebp-20h] BYREF</span><br>  <span class="hljs-type">char</span> String[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [esp+8Ch] [ebp-18h] BYREF</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// [esp+94h] [ebp-10h]</span><br>  <span class="hljs-type">int</span> v14; <span class="hljs-comment">// [esp+98h] [ebp-Ch]</span><br>  <span class="hljs-type">int</span> v15; <span class="hljs-comment">// [esp+9Ch] [ebp-8h]</span><br><br>  <span class="hljs-built_in">memset</span>(Str, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(Str));<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please input :\n&quot;</span>);<br>  scanf_s(<span class="hljs-string">&quot;%s&quot;</span>, Str);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(Str) != <span class="hljs-number">14</span> )<br>    <span class="hljs-keyword">goto</span> LABEL_19;<br>  String[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>  *(_DWORD *)String = Str[<span class="hljs-number">0</span>];<br>  String[<span class="hljs-number">4</span>] = Str[<span class="hljs-number">1</span>];<br>  v3 = atoi(String);<br>  v15 = *(_DWORD *)((<span class="hljs-type">char</span> *)&amp;Str[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>  v11[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>  *(_DWORD *)v11 = *(_DWORD *)((<span class="hljs-type">char</span> *)&amp;Str[<span class="hljs-number">2</span>] + <span class="hljs-number">1</span>);<br>  v4 = v3;<br>  v11[<span class="hljs-number">4</span>] = BYTE1(Str[<span class="hljs-number">3</span>]);<br>  v5 = atoi(v11);<br>  v13 = <span class="hljs-number">0</span>;<br>  v6 = v5;<br>  v14 = <span class="hljs-number">1</span>;<br>  srand(v4);<br>  v7 = &amp;unk_40F000;<br>  <span class="hljs-keyword">while</span> ( rand() == *v7 )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)++v7 &gt;= (<span class="hljs-type">int</span>)&amp;unk_40F050 )<br>      <span class="hljs-keyword">goto</span> LABEL_7;<br>  &#125;<br>  v14 = <span class="hljs-number">0</span>;<br>LABEL_7:<br>  srand(v6);<br>  v8 = &amp;unk_40F050;<br>  <span class="hljs-keyword">while</span> ( rand() == *v8 )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)++v8 &gt;= (<span class="hljs-type">int</span>)&amp;dword_40F0A0 )<br>      <span class="hljs-keyword">goto</span> LABEL_12;<br>  &#125;<br>  v14 = <span class="hljs-number">0</span>;<br>LABEL_12:<br>  <span class="hljs-keyword">if</span> ( (_BYTE)v15 == <span class="hljs-string">&#x27;K&#x27;</span> &amp;&amp; *(_WORD *)((<span class="hljs-type">char</span> *)&amp;v15 + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;TC&#x27;</span> &amp;&amp; HIBYTE(v15) == <span class="hljs-string">&#x27;F&#x27;</span> )<br>    v13 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( v14 &amp;&amp; v13 )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;success : %s\n&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)Str);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>LABEL_19:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error\n&quot;</span>);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>非常简单的随机数爆破</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">bruteforce</span><span class="hljs-params">(<span class="hljs-type">int</span>* values, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>        srand(i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (values[j] != rand()) &#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) <br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br>    assert(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> _a[] = &#123; <span class="hljs-number">15356</span>, <span class="hljs-number">8563</span>, <span class="hljs-number">9659</span>, <span class="hljs-number">14347</span>, <span class="hljs-number">11283</span>, <span class="hljs-number">30142</span>, <span class="hljs-number">29542</span>, <span class="hljs-number">18083</span>, <span class="hljs-number">5057</span>, <span class="hljs-number">5531</span>, <span class="hljs-number">23391</span>, <span class="hljs-number">21327</span>, <span class="hljs-number">20023</span>, <span class="hljs-number">14852</span>, <span class="hljs-number">4865</span>, <span class="hljs-number">23820</span>, <span class="hljs-number">16725</span>, <span class="hljs-number">18665</span>, <span class="hljs-number">25042</span>, <span class="hljs-number">24920</span> &#125;;<br>    <span class="hljs-type">int</span> _b[] = &#123; <span class="hljs-number">11190</span>, <span class="hljs-number">27482</span>, <span class="hljs-number">980</span>, <span class="hljs-number">5419</span>, <span class="hljs-number">28164</span>, <span class="hljs-number">9548</span>, <span class="hljs-number">16558</span>, <span class="hljs-number">22218</span>, <span class="hljs-number">6113</span>, <span class="hljs-number">21959</span>, <span class="hljs-number">13889</span>, <span class="hljs-number">11580</span>, <span class="hljs-number">2625</span>, <span class="hljs-number">19397</span>, <span class="hljs-number">25139</span>, <span class="hljs-number">8167</span>, <span class="hljs-number">28165</span>, <span class="hljs-number">3950</span>, <span class="hljs-number">25496</span>, <span class="hljs-number">27351</span> &#125;;<br>    <span class="hljs-type">int</span> a = bruteforce(_a, <span class="hljs-number">20</span>);<br>    <span class="hljs-type">int</span> b = bruteforce(_b, <span class="hljs-number">20</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%dKCTF%d\n&quot;</span>, a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//14725KCTF83690</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>KCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023阿里云ctf复现</title>
    <link href="/2023/04/25/2023%E9%98%BF%E9%87%8C%E4%BA%91ctf%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/04/25/2023%E9%98%BF%E9%87%8C%E4%BA%91ctf%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="2023阿里云CTF"><a href="#2023阿里云CTF" class="headerlink" title="2023阿里云CTF"></a>2023阿里云CTF</h1><h2 id="字节码跳动"><a href="#字节码跳动" class="headerlink" title="字节码跳动"></a>字节码跳动</h2><p>将给到的附件解压可以得到</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230425215803788.png" alt="image-20230425215803788"></p><p>可以看到<code>flagchecker</code>两个文件，用010 editor可以看到.jsc中有right，wrong和main等字样，所以可以知道flag的主要检查逻辑就在这里了，.txt里面给的是js的v8字节码。</p><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">please figure out the real flag.</span><br><br>if [ $# != 1 ]; then<br>    echo &quot;Use: bash $0 aliyunctf&#123;00000000000000000000000000000000&#125;&quot;<br>    exit 0<br>fi<br>FLAG=$1<br><br>if [ -f &quot;flagchecker.js&quot; ]; then<br>    # build this challenge<br><br>    # make sure $FLAG is the real flag<br>    cmd1=`./node flagchecker.js $FLAG`<br>    if [ $cmd1 != &quot;Right!&quot; ];then<br>        echo &quot;Exit&quot;<br>        exit 0<br>    fi<br><br>    # generate bytecode of flagchecker.js<br>    ./node --print-bytecode flagchecker.js $FLAG &gt; flagchecker_bytecode.txt<br><br>    # compile flagchecker.js to flagchecker.jsc, for you to verify your flag.<br>    ./node ./runner.js $FLAG<br>    tar czvf jsbytecodechall1.tar.gz ./node ./runner.js ./flagchecker.jsc ./run.sh flagchecker_bytecode.txt<br>else<br>    # check your flag<br>    ./node ./runner.js $FLAG<br>fi<br></code></pre></td></tr></table></figure><p>run.sh告诉我们，flagchecker.jsc是flagchecker.js编译产⽣的，⽤来验证flag，并且将flagchecker.js的字节码输出到了 flagchecker_bytecode.txt中。如果不存在flagchecker.js⽂件，则直接使⽤.&#x2F;node .&#x2F;runner.js $FLAG 检验flag</p><p>由于在.jsc文件中找到了main函数，所以我直接在.txt文件中搜索这个函数名了，最后找到了一个非常可疑的地方</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230425220438940.png" alt="image-20230425220438940"></p><p>这里不仅有main，还有ccc和aaa两个函数，而后面的两个函数刚好也在.jsc的文件中出现过，所以猜测主要逻辑就在这里。</p><p>继续在.txt中寻找着三个函数，找到了对应的字节码，然后直接手动恢复</p><p>参考</p><p><a href="https://blog.shi1011.cn/learn/2412">Ignition Bytecode for V8 Interpreter - 翻车鱼 (shi1011.cn)</a></p><h3 id="function-ccc"><a href="#function-ccc" class="headerlink" title="function ccc"></a>function ccc</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ccc</span>(<span class="hljs-params">input, output, check</span>) &#123;<br><span class="hljs-keyword">let</span> key = <span class="hljs-number">170</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">19</span>; i++) &#123;<br>        output[i] = (input[i] + <span class="hljs-number">51</span> + key) &amp; <span class="hljs-number">255</span>;<br>        key =  output[i];<br>    &#125;<br>    <span class="hljs-keyword">let</span> key1 = <span class="hljs-number">85</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">19</span>; i &lt; <span class="hljs-number">43</span>; i++) &#123;<br>        output[i] = (input[i] + key1) &amp; <span class="hljs-number">255</span>;<br>    key1 = (output[i] ^ key1) &amp; <span class="hljs-number">255</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (key1 != <span class="hljs-number">159</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="function-aaa"><a href="#function-aaa" class="headerlink" title="function aaa"></a>function aaa</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">aaa</span>(<span class="hljs-params">argv0</span>) &#123;<br>    <span class="hljs-keyword">const</span> buf = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(argv0);<br>    <span class="hljs-keyword">if</span>(buf.<span class="hljs-property">length</span> == <span class="hljs-number">43</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> v0 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">43</span>);<br>    <span class="hljs-keyword">const</span> v1 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&quot;3edd7925cd6e04ab44f25bef57bc53bd20b74b8c11f893090fdcdfddad0709100100fe6a9230333234fbae&quot;</span>, <span class="hljs-string">&quot;hex&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">ccc</span>(buf, v0, v1);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="function-main"><a href="#function-main" class="headerlink" title="function main"></a>function main</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span>(!process.<span class="hljs-property">argv</span>[<span class="hljs-number">2</span>]) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Wrong!&quot;</span>);<br>   &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">aaa</span>(process.<span class="hljs-property">argv</span>[<span class="hljs-number">2</span>]))&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Right!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Wrong!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后的解密脚本</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">decrypt_ccc</span>(<span class="hljs-params"></span>)<br>&#123;<br><span class="hljs-keyword">const</span> v0 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&quot;3edd7925cd6e04ab44f25bef57bc53bd20b74b8c11f893090fdcdfddad0709100100fe6a9230333234fbae&quot;</span>, <span class="hljs-string">&quot;hex&quot;</span>);<br><span class="hljs-keyword">const</span> v1 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">43</span>);<br><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> key = <span class="hljs-number">170</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">19</span>; i++) &#123;<br>v1[i] = (v0[i] - <span class="hljs-number">51</span> - key) &amp; <span class="hljs-number">255</span>;<br>key = v0[i];<br>&#125;<br><span class="hljs-keyword">let</span> key2 = <span class="hljs-number">85</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">19</span>; i &lt; <span class="hljs-number">43</span>; i++) &#123;<br>v1[i] = (v0[i] - key2) &amp; <span class="hljs-number">255</span>;<br>key2 = (v0[i] ^ key2) &amp; <span class="hljs-number">255</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v1.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&quot;hex&quot;</span>));<br>&#125;<br><br><span class="hljs-title function_">decrypt_ccc</span>();<br><span class="hljs-comment">//616c6979756e6374667b36613532643730646137383063666537663732313838393735333561346636317d</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;616c6979756e6374667b36613532643730646137383063666537663732313838393735333561346636317d&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(a).decode())<br><span class="hljs-comment">#aliyunctf&#123;6a52d70da780cfe7f7218897535a4f61&#125;</span><br></code></pre></td></tr></table></figure><p>比赛时没做出来主要还是没有找到合适的教程，v8字节码是一点也没接触过，做这个过度依赖chatgpt了，实际上它的翻译远不如自己手动翻译，</p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aliyunctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用加密的解密脚本</title>
    <link href="/2023/04/25/%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%9A%84%E8%A7%A3%E5%AF%86%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/04/25/%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%9A%84%E8%A7%A3%E5%AF%86%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-comment">//加密函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">encrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, i;           <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;                     <span class="hljs-comment">/* a key schedule constant */</span><br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];   <span class="hljs-comment">/* cache key */</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;                       <span class="hljs-comment">/* basic cycle start */</span><br>        sum += delta;<br>        v0 += ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        v1 += ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>    &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><span class="hljs-comment">//解密函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0xC6EF3720</span>, i;  <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;                     <span class="hljs-comment">/* a key schedule constant */</span><br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];   <span class="hljs-comment">/* cache key */</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">32</span>; i++) &#123;                         <span class="hljs-comment">/* basic cycle start */</span><br>        v1 -= ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>        v0 -= ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        sum -= delta;<br>    &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,k[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-comment">// v为要加密的数据是两个32位无符号整数</span><br>    <span class="hljs-comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Before enc:  %#x %#x\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    encrypt(v, k);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After  enc:  %#x %#x\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    decrypt(v, k);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After  dec:  %#x %#x\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-comment">/* take 64 bits of data in v[0] and v[1] and */</span><br><span class="hljs-comment">/* 128 bits of key[0] - key[3] */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">encrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_rounds, <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>])</span>&#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, delta=<span class="hljs-number">0x9e3779b9</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;num_rounds; i++)&#123;<br>        v0 += (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br>        sum += delta;<br>        v1 += (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        <span class="hljs-comment">//printf(&quot;%#x %#x\n&quot;,v0,v1);</span><br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0;<br>    v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_rounds, <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>])</span>&#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], delta=<span class="hljs-number">0x9e3779b9</span>, sum=delta*num_rounds;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;num_rounds; i++)&#123;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>)&amp;<span class="hljs-number">3</span>]);<br>        sum -= delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0;<br>    v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> k[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r=<span class="hljs-number">32</span>;<span class="hljs-comment">//num_rounds建议取值为32</span><br>    <span class="hljs-comment">// v为要加密的数据是两个32位无符号整数</span><br>    <span class="hljs-comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#x %#x\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    encrypt(r, v, k);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#x %#x\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    decrypt(r, v, k);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#x %#x\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x9e3779b9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z&gt;&gt;5^y<span class="hljs-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">btea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *v, <span class="hljs-type">int</span> n, <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span>&#123;<br>    <span class="hljs-type">uint32_t</span> y, z, sum;<br>    <span class="hljs-type">unsigned</span> p, rounds, e;<br><br>    <span class="hljs-comment">/* Coding Part */</span><br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) &#123;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span>/n;<br>        sum = <span class="hljs-number">0</span>;<br>        z = v[n<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">do</span>&#123;<br>            sum += DELTA;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p=<span class="hljs-number">0</span>; p&lt;n<span class="hljs-number">-1</span>; p++)&#123;<br>                y = v[p+<span class="hljs-number">1</span>];<br>                z = v[p] += MX;<br>            &#125;<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n<span class="hljs-number">-1</span>] += MX;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>)<span class="hljs-comment">/* Decoding Part */</span>&#123;<br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span>/n;<br>        sum = rounds*DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span>&#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p=n<span class="hljs-number">-1</span>; p&gt;<span class="hljs-number">0</span>; p--)&#123;<br>                z = v[p<span class="hljs-number">-1</span>];<br>                y = v[p] -= MX;<br>            &#125;<br>            z = v[n<span class="hljs-number">-1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;<br>            sum -= DELTA;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>]= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>]= &#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> n= <span class="hljs-number">2</span>; <span class="hljs-comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密</span><br>    <span class="hljs-comment">// v为要加密的数据是两个32位无符号整数</span><br>    <span class="hljs-comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#10x %#10x\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    btea(v, n, k);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#10x %#10x\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    btea(v, -n, k);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#10x %#10x\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ut32 unsigned int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> delta 0x67452301</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">Tea_Decrypt</span><span class="hljs-params">(ut32* enc)</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> sum = <span class="hljs-number">0x67452301</span> * <span class="hljs-number">0x23</span>;<span class="hljs-comment">//0x1e73c923;</span><br>    ut32 v0 = enc[<span class="hljs-number">0</span>];<br>    ut32 v1 = enc[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x23</span>; i++) &#123;<br>        v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">0x45</span>) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x67</span>);<br>        v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">1</span>) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x23</span>);<br>        sum -= <span class="hljs-number">0x67452301</span>;<br>    &#125;<br>    enc[<span class="hljs-number">0</span>] = v0;<br>    enc[<span class="hljs-number">1</span>] = v1;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">Tea_Encrypt</span><span class="hljs-params">(ut32* src)</span> &#123;<br>    ut32 sum = <span class="hljs-number">0</span>;<br>    ut32 v0 = src[<span class="hljs-number">0</span>];<br>    ut32 v1 = src[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x23</span>; i++) &#123;<br>        sum += <span class="hljs-number">0x67452301</span>;<br>        v0 += ((v1 &lt;&lt; <span class="hljs-number">4</span>) +<span class="hljs-number">1</span>) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x23</span>);<br>        v1 += ((v0 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">0x45</span>) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x67</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%08x\n&quot;</span>, sum);<br>    src[<span class="hljs-number">0</span>] = v0;<br>    src[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    ut32 enc[<span class="hljs-number">8</span>] = &#123; <span class="hljs-number">0xde087143</span>,<span class="hljs-number">0xc4f91bd2</span>,<span class="hljs-number">0xdaf6dadc</span>,<span class="hljs-number">0x6d9ed54c</span>,<span class="hljs-number">0x75eb4ee7</span>,<span class="hljs-number">0x5d1ddc04</span>,<span class="hljs-number">0x511b0fd9</span>,<span class="hljs-number">0x51dc88fb</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i += <span class="hljs-number">2</span>) &#123;<br>        Tea_Decrypt(enc+i);<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,*((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)enc+i));<br>    &#125;<br>        <span class="hljs-comment">//327a6c4304ad5938eaf0efb6cc3e53dc</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><br>arr = [<span class="hljs-number">0x56</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0xA4</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0xA4</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0xCD</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x3D</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x0D</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0xAB</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xE9</span>,<span class="hljs-number">0xBB</span>,<span class="hljs-number">0x1E</span>,<span class="hljs-number">0xA0</span>,<span class="hljs-number">0x90</span> ]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(arr))<br>key = <span class="hljs-string">&#x27;D0g3&#x27;</span><br><span class="hljs-comment"># 需要修改 ARC4 key 长度 rang(4,...) </span><br>cipher = ARC4.new(<span class="hljs-built_in">bytes</span>(key))<br>p = cipher.decrypt(<span class="hljs-built_in">bytes</span>(arr))<br><br><span class="hljs-built_in">print</span>(p)<br></code></pre></td></tr></table></figure><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><h3 id="sha256"><a href="#sha256" class="headerlink" title="sha256"></a>sha256</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment">#log_level = debug</span><br><span class="hljs-comment">#p = remote(&#x27;120.78.131.38&#x27;, 10001)</span><br><span class="hljs-comment">#sha256 = str(p.recvuntil(&quot;equation:&quot;))</span><br>alpha_bet = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#x27;</span><br>strlist = itertools.permutations(alpha_bet, <span class="hljs-number">4</span>)<br>sha256 = <span class="hljs-string">&#x27;69f3db5a6f27bee0d4e9db2eca0ac8ea2110b8cbc9228012fb93898c43b64d4b&#x27;</span><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> strlist:<br>    data=i[<span class="hljs-number">0</span>] + i[<span class="hljs-number">1</span>] + i[<span class="hljs-number">2</span>] + i[<span class="hljs-number">3</span>] + <span class="hljs-string">&#x27;CmLpYdZpGthThgVe&#x27;</span><br>    data_sha = hashlib.sha256(data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>    <span class="hljs-keyword">if</span>(data_sha == sha256):<br>        flag = <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(i[<span class="hljs-number">0</span>]+i[<span class="hljs-number">1</span>]+i[<span class="hljs-number">2</span>]+i[<span class="hljs-number">3</span>])<br>        <span class="hljs-keyword">break</span><br>        <span class="hljs-comment">#p.sendline(byte(data[-4:]))</span><br>        <span class="hljs-comment">#p.interactive()</span><br><span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not found&quot;</span>)<br><br><span class="hljs-comment">#SHA256(XXXX + CmLpYdZpGthThgVe):69f3db5a6f27bee0d4e9db2eca0ac8ea2110b8cbc9228012fb93898c43b64d4b</span><br></code></pre></td></tr></table></figure><h2 id="换表base64"><a href="#换表base64" class="headerlink" title="换表base64"></a>换表base64</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment">#str1 = &quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;.swapcase()#对字符串的字符大小写进行转换</span><br>s = [<span class="hljs-number">0x36</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x22</span>, <br>  <span class="hljs-number">0x35</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x13</span>, <br>  <span class="hljs-number">0x07</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x0C</span>, <br>  <span class="hljs-number">0x58</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x65</span>]<br>q = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    q += <span class="hljs-built_in">chr</span>(s[i] ^ <span class="hljs-number">0x65</span>)<br><br><span class="hljs-built_in">print</span>(q)<br><br>string1 = <span class="hljs-string">&quot;+/EFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCD&quot;</span><br>string2 = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><span class="hljs-built_in">print</span> (base64.b64decode(q.translate(<span class="hljs-built_in">str</span>.maketrans(string1,string2))))<br></code></pre></td></tr></table></figure><h2 id="base58"><a href="#base58" class="headerlink" title="base58"></a>base58</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">b58encode</span>(<span class="hljs-params">tmp:<span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>tmp = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">ord</span>,tmp))<br>temp = tmp[<span class="hljs-number">0</span>]<br>base58 = <span class="hljs-string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tmp)-<span class="hljs-number">1</span>):<br>temp = temp * <span class="hljs-number">256</span> + tmp[i+<span class="hljs-number">1</span>]<br>tmp = []<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>tmp.insert(<span class="hljs-number">0</span>,temp % <span class="hljs-number">58</span>)<br>temp = temp // <span class="hljs-number">58</span><br><span class="hljs-keyword">if</span> temp == <span class="hljs-number">0</span>:<br><span class="hljs-keyword">break</span><br>temp = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp:<br>temp += base58[i]<br><span class="hljs-keyword">return</span> temp<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b58decode</span>(<span class="hljs-params">tmp:<span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br><span class="hljs-keyword">import</span> binascii<br>base58 = <span class="hljs-string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><br>temp = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp:<br>temp.append(base58.index(i))<br>tmp = temp[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(temp)-<span class="hljs-number">1</span>):<br>tmp = tmp * <span class="hljs-number">58</span> + temp[i+<span class="hljs-number">1</span>]<br><span class="hljs-keyword">return</span> binascii.unhexlify(<span class="hljs-built_in">hex</span>(tmp)[<span class="hljs-number">2</span>:].encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).decode(<span class="hljs-string">&quot;UTF-8&quot;</span>)<br> <br><span class="hljs-built_in">print</span>(b58encode(<span class="hljs-string">&quot;ABDCDEFGA&quot;</span>))<br><span class="hljs-built_in">print</span>(b58decode(<span class="hljs-string">&quot;qBLiPgShKjap&quot;</span>))<br><br></code></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> ast <span class="hljs-keyword">import</span> Bytes<br><br>ENtext = [<span class="hljs-number">0x49</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x46</span>]<br>key = <span class="hljs-string">b&#x27;goodlucksmartman&#x27;</span><br><span class="hljs-built_in">print</span>(key)<br>aes = AES.new(key,AES.MODE_ECB)<br>text = aes.decrypt(<span class="hljs-built_in">bytes</span>(ENtext))<br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023XCTF-Final</title>
    <link href="/2023/04/01/2023XCTF-Final/"/>
    <url>/2023/04/01/2023XCTF-Final/</url>
    
    <content type="html"><![CDATA[<h1 id="2023XCTF-rev2-我不是病毒"><a href="#2023XCTF-rev2-我不是病毒" class="headerlink" title="2023XCTF rev2 我不是病毒"></a>2023XCTF rev2 我不是病毒</h1><p>直接分析exe的话，可以发现关键的逻辑集中在main函数最后return的那个函数中，在sub_140005C80函数中会创建一个进程（要是找不到这个函数的话，先关闭地址随机化，或者自行分析），附加调试之后可以发现这个进程就是python310.dll，所以初步判断这个程序是python打包的exe。</p><p>也可以直接用exeinfope查出来</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415145746215.png" alt="image-20230415145746215"></p><p>在高版本的DIE中也可以看出来一些端倪</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415145820926.png" alt="image-20230415145820926"></p><p>用pyinstxtractor.py直接解包，可以发现有.pyz这样的文件和PYZ-00.pyz_extracted这个文件夹，而且后者中的所有文件都是加密过的</p><p>参考<a href="https://www.cnblogs.com/lordtianqiyi/articles/16209125.html">记python逆向 - TLSN - 博客园 (cnblogs.com)</a></p><p>[<a href="https://bbs.kanxue.com/thread-271253.htm">原创]Python逆向——Pyinstaller逆向-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com (kanxue.com)</a></p><p>可以看到“archive.pyc就是加密的过程，crypto_key是加密的密钥，而我们需要解密.pyz文件”</p><p>所以分别反编译两个文件，可以找到CRYPT_BLOCK_SIZE &#x3D; 16，加密方式是AES，加密密钥是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">HelloHiHowAreYou<br></code></pre></td></tr></table></figure><p>编写解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tinyaes<br><span class="hljs-keyword">import</span> zlib<br> <br>CRYPT_BLOCK_SIZE = <span class="hljs-number">16</span><br> <br><span class="hljs-comment"># 从crypt_key.pyc获取key，也可自行反编译获取</span><br>key = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">&#x27;HelloHiHowAreYou&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br> <br>inf = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sign.pyc.encrypted&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-comment"># 打开加密文件</span><br>outf = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sign.pyc&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-comment"># 输出文件</span><br> <br><span class="hljs-comment"># 按加密块大小进行读取</span><br>iv = inf.read(CRYPT_BLOCK_SIZE)<br> <br>cipher = tinyaes.AES(key, iv)<br> <br><span class="hljs-comment"># 解密</span><br>plaintext = zlib.decompress(cipher.CTR_xcrypt_buffer(inf.read()))<br> <br><span class="hljs-comment"># 补pyc头(最后自己补也行)</span><br><br>outf.write(<span class="hljs-string">b&#x27;\x6F\x0D\x0D\x0A\x00\x00\x00\x00\x70\x79\x69\x30\x10\x01\x00\x00&#x27;</span>)<br> <br><span class="hljs-comment"># 写入解密数据</span><br>outf.write(plaintext)<br> <br>inf.close()<br>outf.close()<br></code></pre></td></tr></table></figure><p>在解包后的文件夹中有个1kb的main.pyc，用pycdc反编译后发现是调用了sign中的main函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415145339614.png" alt="image-20230415145339614"></p><p>所以找到了sign.pyc.encrypted文件，解密后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib <span class="hljs-keyword">as</span> 沈阳<br><span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">as</span> 杭州<br><span class="hljs-keyword">import</span> ctypes <span class="hljs-keyword">as</span> 蚌埠<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    蚌埠.windll.kernel32.VirtualAlloc.restype = 蚌埠.c_void_p<br>    福建 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;%e6%82%a8%e7%9a%84%e8%be%93%e5%85%a5%ef%bc%9a&#x27;</span>)<br>                 <span class="hljs-comment">#您的输入：</span><br>    天津 = <span class="hljs-string">&#x27;9K98jTmDKCXlg9E2kepX4nAi8H0DB57IU57ybV37xjrw2zutw+KnxkoYur3IZzi2ep5tDC6jimCJ7fDpgQ5F3fJu4wHA0LVq9FALbjXN6nMy57KrU8DEloh+Cji3ED3eEl5YWAyb8ktBoyoOkL1c9ASWUPBniHmD7RSqWcNkykt/USjhft9+aV930Jl5VjD6qcXyZTfjnY5MH3u22O9NBEXLj3Y9N5VjEgF2cFJ+Tq7jj92iIlEkNvx8Jl+eH5/hipsonKLTnoLGXs4a0tTQX/uXQOTMBbtd70x04w1Pa0fp+vA9tCw+DXvXj0xmX8c5HMybhpPrwQYDonx7xtS+vRIj/OmU7GxkHOOqYdsGmGdTjTAUEBvZtinOxuR7mZ0r9k+c9da0W93TWm5+2LKNR6OJjmILaJn0lq4foYcfD5+JITDsOD6Vg01yLRG1B4A6OxJ7Rr/DBUabSu2fYf1c4sTFvWgfMV8il6QfJiNMGkVLey1cBPSobenMo+TQC1Ql0//9M4P01sOiwuuVKLvTyDEv6dKO//muVL9S2gq/aZUBWkjj/I5rUJ6Mlt4+jsngmuke9plAjw22fUgz+8uSzn40dhKXfBX/BOCnlwWsMGAefAfoz/XAsoVSG2ioLFmlcYe/WBgaUJEoRUSyv73yiEOTVwIK6EPnDlwRgZZHx2toLu8udpEZ0aKGkex5sn7P8Jf9AbD4/EiQU+FdoJSxGorPSZGvrc4=&#x27;</span><br>    北京 = 沈阳.md5(<span class="hljs-string">&#x27;%e4%ba%91%e5%8d%97&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>                    <span class="hljs-comment">#云南</span><br>    重庆 = 杭州.b64decode(天津)<br>    河南 = <span class="hljs-string">b&#x27;&#x27;</span><br>    北京_<span class="hljs-built_in">len</span> = <span class="hljs-built_in">len</span>(北京)<br>    广州 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-comment">#初始化s盒</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + 广州[i] + <span class="hljs-built_in">ord</span>(北京[i % 北京_<span class="hljs-built_in">len</span>])) % <span class="hljs-number">256</span><br>        广州[i] = 广州[j]<span class="hljs-comment">#直接用在线网站反编译出来的这个交换有问题，应该改为 广州[i], 广州[j] =  广州[j], 广州[i]</span><br>        广州[j] = 广州[i]<br>    山东 = 陕西 = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> 河北 <span class="hljs-keyword">in</span> 重庆:<br>        山东 = (山东 + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        陕西 = (陕西 + 广州[山东]) % <span class="hljs-number">256</span><br>        广州[山东] = 广州[陕西]<span class="hljs-comment">#同上</span><br>        广州[陕西] = 广州[山东]<br>        河南 += <span class="hljs-built_in">bytes</span>([<br>            河北 ^ 广州[(广州[山东] + 广州[陕西]) % <span class="hljs-number">256</span>]])<br><br>    四川 = 蚌埠.create_string_buffer(福建.encode())<br><br>    黑龙江 = 蚌埠.windll.kernel32.VirtualAlloc(蚌埠.c_int(<span class="hljs-number">0</span>), 蚌埠.c_int(<span class="hljs-built_in">len</span>(河南)), 蚌埠.c_int(<span class="hljs-number">12288</span>), 蚌埠.c_int(<span class="hljs-number">64</span>))<br>    蚌埠.windll.kernel32.RtlMoveMemory(蚌埠.c_void_p(黑龙江), (蚌埠.c_ubyte * <span class="hljs-built_in">len</span>(河南)).from_buffer(<span class="hljs-built_in">bytearray</span>(河南)), 蚌埠.c_size_t(<span class="hljs-built_in">len</span>(河南)))<br>    辽宁 = 蚌埠.windll.kernel32.CreateThread(蚌埠.c_int(<span class="hljs-number">0</span>), <br>                                        蚌埠.c_int(<span class="hljs-number">0</span>), <br>                                        蚌埠.c_void_p(黑龙江), <span class="hljs-comment">#执行的代码</span><br>                                        蚌埠.byref(四川),      <span class="hljs-comment">#参数w</span><br>                                        蚌埠.c_int(<span class="hljs-number">0</span>), <br>                                        蚌埠.pointer(蚌埠.c_int(<span class="hljs-number">0</span>)))<br>    蚌埠.windll.kernel32.WaitForSingleObject(蚌埠.c_int(辽宁), 蚌埠.c_int(-<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">if</span> 四川.raw == <span class="hljs-string">b&#x27;%db%1b%00Dy\\C%cc%90_%ca.%b0%b7m%ab%11%9b^h%90%1bl%19%01%0c%eduP6%0c0%7f%c5E-L%b0%fb%ba%f6%9f%00&#x27;</span>:<br>        <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%e6%98%af%e7%9a%84%ef%bc%81%e4%bd%a0%e5%be%97%e5%88%b0%e4%ba%86%ef%bc%81&#x27;</span>)<br>        <span class="hljs-comment">#是的！你得到了！</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-literal">None</span>(<span class="hljs-string">&#x27;%e4%b8%8d%ef%bc%8c%e5%86%8d%e5%b0%9d%e8%af%95%e6%9b%b4%e5%a4%9a%e3%80%82 %ef%bc%88%e7%ac%91%e8%84%b8%e7%ac%a6%e5%8f%b7%ef%bc%89&#x27;</span>)<br>    <span class="hljs-comment">#不，再尝试更多。 （笑脸符号）</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <br>    main()<br><br></code></pre></td></tr></table></figure><p>变量名应该是被特地修改，降低可读性的，汉字也都经过了URL编码，不过整体逻辑很好理解</p><p>先用密钥初始化RC4的S盒，然后RC4解密shellcode，加载shellcode对输入进行处理</p><p>解密shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hashlib<br><br>cipher = <span class="hljs-string">&#x27;9K98jTmDKCXlg9E2kepX4nAi8H0DB57IU57ybV37xjrw2zutw+KnxkoYur3IZzi2ep5tDC6jimCJ7fDpgQ5F3fJu4wHA0LVq9FALbjXN6nMy57KrU8DEloh+Cji3ED3eEl5YWAyb8ktBoyoOkL1c9ASWUPBniHmD7RSqWcNkykt/USjhft9+aV930Jl5VjD6qcXyZTfjnY5MH3u22O9NBEXLj3Y9N5VjEgF2cFJ+Tq7jj92iIlEkNvx8Jl+eH5/hipsonKLTnoLGXs4a0tTQX/uXQOTMBbtd70x04w1Pa0fp+vA9tCw+DXvXj0xmX8c5HMybhpPrwQYDonx7xtS+vRIj/OmU7GxkHOOqYdsGmGdTjTAUEBvZtinOxuR7mZ0r9k+c9da0W93TWm5+2LKNR6OJjmILaJn0lq4foYcfD5+JITDsOD6Vg01yLRG1B4A6OxJ7Rr/DBUabSu2fYf1c4sTFvWgfMV8il6QfJiNMGkVLey1cBPSobenMo+TQC1Ql0//9M4P01sOiwuuVKLvTyDEv6dKO//muVL9S2gq/aZUBWkjj/I5rUJ6Mlt4+jsngmuke9plAjw22fUgz+8uSzn40dhKXfBX/BOCnlwWsMGAefAfoz/XAsoVSG2ioLFmlcYe/WBgaUJEoRUSyv73yiEOTVwIK6EPnDlwRgZZHx2toLu8udpEZ0aKGkex5sn7P8Jf9AbD4/EiQU+FdoJSxGorPSZGvrc4=&#x27;</span><br><br>cipher = <span class="hljs-built_in">bytes</span>(cipher.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>arr = base64.b64decode(cipher)    <br><br>key = hashlib.md5(<span class="hljs-string">&#x27;云南&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><br>key = <span class="hljs-built_in">bytes</span>(key.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>cipher = ARC4.new(key)<br><br>p = cipher.decrypt(<span class="hljs-built_in">bytes</span>(arr))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(p))<br><br></code></pre></td></tr></table></figure><p>然后用函数指针加载shellcode</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> shellcode[] = &#123;<br><span class="hljs-number">81</span>, <span class="hljs-number">232</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">89</span>, <span class="hljs-number">72</span>, <span class="hljs-number">129</span>, <span class="hljs-number">193</span>, <span class="hljs-number">97</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">85</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">229</span>, <span class="hljs-number">72</span>, <span class="hljs-number">131</span>, <span class="hljs-number">236</span>, <span class="hljs-number">104</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">77</span>, <span class="hljs-number">152</span>, <span class="hljs-number">199</span>, <span class="hljs-number">69</span>, <span class="hljs-number">252</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">233</span>, <span class="hljs-number">49</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">252</span>, <span class="hljs-number">193</span>, <span class="hljs-number">224</span>, <span class="hljs-number">4</span>, <span class="hljs-number">72</span>, <span class="hljs-number">152</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">85</span>, <span class="hljs-number">152</span>, <span class="hljs-number">72</span>, <span class="hljs-number">1</span>, <span class="hljs-number">208</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">69</span>, <span class="hljs-number">240</span>, <span class="hljs-number">72</span>, <span class="hljs-number">184</span>, <span class="hljs-number">1</span>, <span class="hljs-number">219</span>, <span class="hljs-number">186</span>, <span class="hljs-number">51</span>, <span class="hljs-number">35</span>, <span class="hljs-number">1</span>, <span class="hljs-number">219</span>, <span class="hljs-number">186</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">69</span>, <span class="hljs-number">160</span>, <span class="hljs-number">72</span>, <span class="hljs-number">184</span>, <span class="hljs-number">255</span>, <span class="hljs-number">238</span>, <span class="hljs-number">221</span>, <span class="hljs-number">204</span>, <span class="hljs-number">187</span>, <span class="hljs-number">170</span>, <span class="hljs-number">153</span>, <span class="hljs-number">136</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">69</span>, <span class="hljs-number">168</span>, <span class="hljs-number">72</span>, <span class="hljs-number">184</span>, <span class="hljs-number">239</span>, <span class="hljs-number">205</span>, <span class="hljs-number">171</span>, <span class="hljs-number">144</span>, <span class="hljs-number">120</span>, <span class="hljs-number">86</span>, <span class="hljs-number">52</span>, <span class="hljs-number">18</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">69</span>, <span class="hljs-number">176</span>, <span class="hljs-number">72</span>, <span class="hljs-number">184</span>, <span class="hljs-number">186</span>, <span class="hljs-number">220</span>, <span class="hljs-number">254</span>, <span class="hljs-number">33</span>, <span class="hljs-number">67</span>, <span class="hljs-number">101</span>, <span class="hljs-number">135</span>, <span class="hljs-number">9</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">69</span>, <span class="hljs-number">184</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">240</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">69</span>, <span class="hljs-number">232</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">240</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">64</span>, <span class="hljs-number">8</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">69</span>, <span class="hljs-number">224</span>, <span class="hljs-number">72</span>, <span class="hljs-number">184</span>, <span class="hljs-number">192</span>, <span class="hljs-number">187</span>, <span class="hljs-number">111</span>, <span class="hljs-number">171</span>, <span class="hljs-number">119</span>, <span class="hljs-number">3</span>, <span class="hljs-number">124</span>, <span class="hljs-number">235</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">69</span>, <span class="hljs-number">216</span>, <span class="hljs-number">72</span>, <span class="hljs-number">184</span>, <span class="hljs-number">239</span>, <span class="hljs-number">190</span>, <span class="hljs-number">173</span>, <span class="hljs-number">222</span>, <span class="hljs-number">13</span>, <span class="hljs-number">240</span>, <span class="hljs-number">173</span>, <span class="hljs-number">11</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">69</span>, <span class="hljs-number">208</span>, <span class="hljs-number">72</span>, <span class="hljs-number">199</span>, <span class="hljs-number">69</span>, <span class="hljs-number">200</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">235</span>, <span class="hljs-number">127</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">232</span>, <span class="hljs-number">72</span>, <span class="hljs-number">193</span>, <span class="hljs-number">224</span>, <span class="hljs-number">8</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">194</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">176</span>, <span class="hljs-number">72</span>, <span class="hljs-number">1</span>, <span class="hljs-number">194</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">77</span>, <span class="hljs-number">232</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">216</span>, <span class="hljs-number">72</span>, <span class="hljs-number">1</span>, <span class="hljs-number">200</span>, <span class="hljs-number">72</span>, <span class="hljs-number">49</span>, <span class="hljs-number">194</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">232</span>, <span class="hljs-number">72</span>, <span class="hljs-number">193</span>, <span class="hljs-number">232</span>, <span class="hljs-number">10</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">193</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">184</span>, <span class="hljs-number">72</span>, <span class="hljs-number">1</span>, <span class="hljs-number">200</span>, <span class="hljs-number">72</span>, <span class="hljs-number">49</span>, <span class="hljs-number">208</span>, <span class="hljs-number">72</span>, <span class="hljs-number">41</span>, <span class="hljs-number">69</span>, <span class="hljs-number">224</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">224</span>, <span class="hljs-number">72</span>, <span class="hljs-number">193</span>, <span class="hljs-number">224</span>, <span class="hljs-number">8</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">194</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">160</span>, <span class="hljs-number">72</span>, <span class="hljs-number">1</span>, <span class="hljs-number">194</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">77</span>, <span class="hljs-number">216</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">224</span>, <span class="hljs-number">72</span>, <span class="hljs-number">1</span>, <span class="hljs-number">200</span>, <span class="hljs-number">72</span>, <span class="hljs-number">49</span>, <span class="hljs-number">194</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">224</span>, <span class="hljs-number">72</span>, <span class="hljs-number">193</span>, <span class="hljs-number">232</span>, <span class="hljs-number">10</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">193</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">168</span>, <span class="hljs-number">72</span>, <span class="hljs-number">1</span>, <span class="hljs-number">200</span>, <span class="hljs-number">72</span>, <span class="hljs-number">49</span>, <span class="hljs-number">208</span>, <span class="hljs-number">72</span>, <span class="hljs-number">41</span>, <span class="hljs-number">69</span>, <span class="hljs-number">232</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">208</span>, <span class="hljs-number">72</span>, <span class="hljs-number">41</span>, <span class="hljs-number">69</span>, <span class="hljs-number">216</span>, <span class="hljs-number">72</span>, <span class="hljs-number">131</span>, <span class="hljs-number">69</span>, <span class="hljs-number">200</span>, <span class="hljs-number">1</span>, <span class="hljs-number">72</span>, <span class="hljs-number">131</span>, <span class="hljs-number">125</span>, <span class="hljs-number">200</span>, <span class="hljs-number">63</span>, <span class="hljs-number">15</span>, <span class="hljs-number">134</span>, <span class="hljs-number">118</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">240</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">85</span>, <span class="hljs-number">232</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">16</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">69</span>, <span class="hljs-number">240</span>, <span class="hljs-number">72</span>, <span class="hljs-number">131</span>, <span class="hljs-number">192</span>, <span class="hljs-number">8</span>, <span class="hljs-number">72</span>, <span class="hljs-number">139</span>, <span class="hljs-number">85</span>, <span class="hljs-number">224</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">16</span>, <span class="hljs-number">144</span>, <span class="hljs-number">131</span>, <span class="hljs-number">69</span>, <span class="hljs-number">252</span>, <span class="hljs-number">1</span>, <span class="hljs-number">131</span>, <span class="hljs-number">125</span>, <span class="hljs-number">252</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">142</span>, <span class="hljs-number">197</span>, <span class="hljs-number">254</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">72</span>, <span class="hljs-number">131</span>, <span class="hljs-number">196</span>, <span class="hljs-number">104</span>, <span class="hljs-number">93</span>, <span class="hljs-number">89</span>, <span class="hljs-number">19</span>, <span class="hljs-number">45</span>, <span class="hljs-number">239</span>, <span class="hljs-number">197</span>, <span class="hljs-number">133</span>, <span class="hljs-number">72</span>, <span class="hljs-number">183</span>, <span class="hljs-number">185</span>, <span class="hljs-number">107</span>, <span class="hljs-number">151</span>, <span class="hljs-number">30</span>, <span class="hljs-number">51</span>, <span class="hljs-number">174</span>, <span class="hljs-number">0</span>, <span class="hljs-number">39</span>, <span class="hljs-number">61</span>, <span class="hljs-number">1</span>, <span class="hljs-number">135</span>, <span class="hljs-number">228</span>, <span class="hljs-number">208</span>, <span class="hljs-number">161</span>, <span class="hljs-number">110</span>, <span class="hljs-number">65</span>, <span class="hljs-number">89</span>, <span class="hljs-number">91</span>, <span class="hljs-number">206</span>, <span class="hljs-number">249</span>, <span class="hljs-number">238</span>, <span class="hljs-number">144</span>, <span class="hljs-number">92</span>, <span class="hljs-number">65</span>, <span class="hljs-number">174</span>, <span class="hljs-number">91</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">186</span>, <span class="hljs-number">214</span>, <span class="hljs-number">131</span>, <span class="hljs-number">243</span>, <span class="hljs-number">10</span>, <span class="hljs-number">63</span>, <span class="hljs-number">162</span>, <span class="hljs-number">60</span>, <span class="hljs-number">255</span>, <span class="hljs-number">167</span>, <span class="hljs-number">103</span>, <span class="hljs-number">240</span>, <span class="hljs-number">110</span>, <span class="hljs-number">13</span>, <span class="hljs-number">2</span>, <span class="hljs-number">131</span>, <span class="hljs-number">222</span>, <span class="hljs-number">224</span>, <span class="hljs-number">175</span>, <span class="hljs-number">5</span>, <span class="hljs-number">27</span>, <span class="hljs-number">91</span>, <span class="hljs-number">21</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">133</span>, <span class="hljs-number">233</span>, <span class="hljs-number">252</span>, <span class="hljs-number">61</span>, <span class="hljs-number">193</span>, <span class="hljs-number">245</span>, <span class="hljs-number">231</span>, <span class="hljs-number">61</span>, <span class="hljs-number">59</span>, <span class="hljs-number">227</span>, <span class="hljs-number">129</span>, <span class="hljs-number">22</span>, <span class="hljs-number">225</span>, <span class="hljs-number">192</span>, <span class="hljs-number">43</span>, <span class="hljs-number">104</span>, <span class="hljs-number">237</span>, <span class="hljs-number">12</span>, <span class="hljs-number">203</span>, <span class="hljs-number">161</span>, <span class="hljs-number">134</span>, <span class="hljs-number">59</span>, <span class="hljs-number">150</span>, <span class="hljs-number">195</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">233</span>, <span class="hljs-number">200</span>, <span class="hljs-number">247</span>, <span class="hljs-number">163</span>, <span class="hljs-number">104</span>, <span class="hljs-number">183</span>, <span class="hljs-number">40</span>, <span class="hljs-number">98</span>, <span class="hljs-number">202</span>, <span class="hljs-number">104</span>, <span class="hljs-number">230</span>, <span class="hljs-number">204</span>, <span class="hljs-number">147</span>, <span class="hljs-number">157</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">119</span>, <span class="hljs-number">147</span>, <span class="hljs-number">46</span>, <span class="hljs-number">155</span>, <span class="hljs-number">235</span>, <span class="hljs-number">94</span>, <span class="hljs-number">213</span>, <span class="hljs-number">116</span>, <span class="hljs-number">152</span>, <span class="hljs-number">199</span>, <span class="hljs-number">174</span>, <span class="hljs-number">139</span>, <span class="hljs-number">97</span>, <span class="hljs-number">102</span>, <span class="hljs-number">248</span>, <span class="hljs-number">253</span>, <span class="hljs-number">19</span>, <span class="hljs-number">93</span>, <span class="hljs-number">75</span>, <span class="hljs-number">41</span>, <span class="hljs-number">40</span>, <span class="hljs-number">251</span>, <span class="hljs-number">201</span>, <span class="hljs-number">193</span>, <span class="hljs-number">54</span>, <span class="hljs-number">64</span>, <span class="hljs-number">13</span>, <span class="hljs-number">26</span>, <span class="hljs-number">20</span>, <span class="hljs-number">145</span>, <span class="hljs-number">20</span>, <span class="hljs-number">125</span>, <span class="hljs-number">35</span>, <span class="hljs-number">174</span>, <span class="hljs-number">155</span>, <span class="hljs-number">130</span>, <span class="hljs-number">10</span>, <span class="hljs-number">139</span>, <span class="hljs-number">197</span>, <span class="hljs-number">132</span>, <span class="hljs-number">41</span>, <span class="hljs-number">205</span>, <span class="hljs-number">74</span>, <span class="hljs-number">219</span>, <span class="hljs-number">102</span>, <span class="hljs-number">67</span>, <span class="hljs-number">16</span>, <span class="hljs-number">221</span>, <span class="hljs-number">44</span>, <span class="hljs-number">3</span>, <span class="hljs-number">204</span>, <span class="hljs-number">94</span>, <span class="hljs-number">136</span>, <span class="hljs-number">122</span>, <span class="hljs-number">119</span>, <span class="hljs-number">231</span>, <span class="hljs-number">48</span>, <span class="hljs-number">112</span>, <span class="hljs-number">43</span>, <span class="hljs-number">57</span>, <span class="hljs-number">105</span>, <span class="hljs-number">91</span>, <span class="hljs-number">184</span>, <span class="hljs-number">10</span>, <span class="hljs-number">128</span>, <span class="hljs-number">33</span>, <span class="hljs-number">1</span>, <span class="hljs-number">73</span>, <span class="hljs-number">52</span>, <span class="hljs-number">164</span>, <span class="hljs-number">22</span>, <span class="hljs-number">59</span>, <span class="hljs-number">254</span>, <span class="hljs-number">165</span>, <span class="hljs-number">105</span>, <span class="hljs-number">223</span>, <span class="hljs-number">237</span>, <span class="hljs-number">58</span>, <span class="hljs-number">180</span>, <span class="hljs-number">94</span>, <span class="hljs-number">129</span>, <span class="hljs-number">143</span>, <span class="hljs-number">114</span>, <span class="hljs-number">73</span>, <span class="hljs-number">61</span>, <span class="hljs-number">210</span>, <span class="hljs-number">121</span>, <span class="hljs-number">123</span>, <span class="hljs-number">115</span>, <span class="hljs-number">85</span><br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>PVOID p = VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">memcpy</span>(p, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));<br>((<span class="hljs-type">void</span>(__stdcall*)())(p))();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用IDA分析得到的exe</p><p>第一段shellcode可以分为两个部分，在0x167之前都是对后面部分的SMC，先动态调试，得到解密后的shellcode之后再复制写入ida</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230401213737097.png" alt="image-20230401213737097"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs idapython">ida_bytes.patch_bytes（要写入的地址，bytes.fromhex（“解密后的二进制shellcode”））<br></code></pre></td></tr></table></figure><p>可以得到真正的加密函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230401213934268.png" alt="image-20230401213934268"></p><p>加密主要是将输入中的两个字符拼接在一起然后加密，直接爆破</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> cipher[] = &#123; <span class="hljs-number">219</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0</span>, <span class="hljs-number">68</span>, <span class="hljs-number">121</span>, <span class="hljs-number">92</span>, <span class="hljs-number">67</span>, <span class="hljs-number">204</span>, <span class="hljs-number">144</span>, <span class="hljs-number">95</span>, <span class="hljs-number">202</span>, <span class="hljs-number">46</span>, <span class="hljs-number">176</span>, <span class="hljs-number">183</span>, <span class="hljs-number">109</span>, <span class="hljs-number">171</span>, <span class="hljs-number">17</span>, <span class="hljs-number">155</span>, <span class="hljs-number">94</span>, <span class="hljs-number">104</span>, <span class="hljs-number">144</span>, <span class="hljs-number">27</span>, <span class="hljs-number">108</span>, <span class="hljs-number">25</span>, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>, <span class="hljs-number">237</span>, <span class="hljs-number">117</span>, <span class="hljs-number">80</span>, <span class="hljs-number">54</span>, <span class="hljs-number">12</span>, <span class="hljs-number">48</span>, <span class="hljs-number">127</span>, <span class="hljs-number">197</span>, <span class="hljs-number">69</span>, <span class="hljs-number">45</span>, <span class="hljs-number">76</span>, <span class="hljs-number">176</span>, <span class="hljs-number">251</span>, <span class="hljs-number">186</span>, <span class="hljs-number">246</span>, <span class="hljs-number">159</span>, <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> code = cipher[<span class="hljs-number">2</span> * i] + (cipher[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">8</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">127</span>; j++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">127</span>; k++) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8 = <span class="hljs-number">2029</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v9 = (j + (k &lt;&lt; <span class="hljs-number">8</span>) % <span class="hljs-number">0xD1EF</span>);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (v8) &#123;<br><span class="hljs-keyword">if</span> (v8 &amp; <span class="hljs-number">1</span>) &#123;<br>v6 = v9 * v6 % <span class="hljs-number">0xD1EF</span>;<br>&#125;<br>v9 = v9 * v9 % <span class="hljs-number">0xD1EF</span>;<br>v8 &gt;&gt;= <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (v6 == code) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c&quot;</span>, j, k);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//XCTF&#123;5c7ad71b-6c91-4481-af7a-69726a66aea8&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件格式学习</title>
    <link href="/2023/03/06/PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/03/06/PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="PE文件格式"><a href="#PE文件格式" class="headerlink" title="PE文件格式"></a>PE文件格式</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>PE文件是Windows操作系统下使用的可执行文件格式</strong>。<em>PE：Portable Executable</em>  </p><p>PE文件指的是32位的可执行文件，也成为PE32，64位的可执行文件称为PE+或者PE32+，是PE32文件的一种拓展（<u>不是PE64</u>）</p><p>观察PE文件的各个结构体成员的值，推荐使用CFF Explorer</p><h2 id="PE文件格式-1"><a href="#PE文件格式-1" class="headerlink" title="PE文件格式"></a>PE文件格式</h2><center>PE文件种类</center><table><thead><tr><th>种类</th><th>主拓展名</th></tr></thead><tbody><tr><td>可执行</td><td>EXE, SCR</td></tr><tr><td>库</td><td>DLL, OCX, CRL, DRV</td></tr><tr><td>驱动程序</td><td>SYS, VXD</td></tr><tr><td>对象文件</td><td>OBJ</td></tr></tbody></table><p>以IDA pro(x32)为例</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306104549571.png" alt="image-20230306104549571"></p><p>一般判断一个文件是否为PE文件主要看的就是他是否具有 <strong>MZ和PE</strong>这两个标志</p><h3 id="PE头"><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h3><h4 id="DOS头"><a href="#DOS头" class="headerlink" title="DOS头"></a>DOS头</h4><p>在微软创建PE文件时，DOS文件正在被广泛使用，所以为了兼容DOS文件，DOS头出现了，也就是<strong>IMAGE_DOS_HEADER结构体</strong>，用于拓展已有的DOS EXE头</p><p>IMAGE_DOS_HEADER结构体的大小是64字节</p><p>在<strong>winnt.h</strong>中可以找到该结构体的定义</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306105159377.png" alt="image-20230306105159377"></p><p>需要掌握的主要就是<u><strong>e_maigc和e_lfanew</strong></u>两个成员</p><p>e_magic：DOS签名，即4D5A —&gt; ASCII值 “MZ”</p><p>e_lfanew：指示NT头的偏移（根据不同文件拥有可变值）</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306105646938.png" alt="image-20230306105646938"></p><p>在IDA pro(x32)这里，e_magic的值为4D5A，e_lfanew的值为00000100</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306223749684.png"></p><h4 id="DOS存根"><a href="#DOS存根" class="headerlink" title="DOS存根"></a>DOS存根</h4><p>DOS存根(stub)在DOS头下方，是可选项，主要有代码和数据混合而成，大小不固定(没有DOS存根，文件也可以正常运行)</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306105957244.png" alt="image-20230306105957244"></p><p>在32位Windows OS环境下，PE loader识别到DOS头，该文件被识别为PE文件，这段DOS存根不会被执行。</p><p>在DOS环境中或者是DOS debug下，可以执行这段代码(不认识PE文件格式，所以识别为DOS文件)。</p><h4 id="NT头"><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h4><p>在winnt.h文件中可以找到<strong>IMAGE_NT_HEADERS</strong>结构体的定义</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306110411583.png" alt="image-20230306110411583"></p><p>IMAGE_NT_HEADERS主要由三个成员构成，第一个为签名(<strong>signature</strong>)结构体，值为50450000 (“PE” 00)。</p><p>另两外两个成员是文件头(<strong>FileHeader</strong>)和可选头(<strong>OptionalHeader</strong>)</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306111040054.png" alt="image-20230306111040054"></p><p>IMAGE_NT_HEADERS结构体的大小为F8</p><h4 id="FileHeader"><a href="#FileHeader" class="headerlink" title="FileHeader"></a>FileHeader</h4><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306111107961.png" alt="image-20230306111107961"></p><p>IMAGE_FILE_HEADER有下面四个重要成员，如果他们设置不正确，可能导致文件无法正常运行</p><h5 id="Machine"><a href="#Machine" class="headerlink" title="Machine"></a>Machine</h5><p>每个CPU都拥有唯一的Machine码，兼容32为Intel x86芯片的Machine码为14C</p><p>下面是定义在winnt.h里的Machine码</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306111345971.png" alt="image-20230306111345971"></p><h5 id="NumberOfSection"><a href="#NumberOfSection" class="headerlink" title="NumberOfSection"></a>NumberOfSection</h5><p>PE文件把代码，数据，资源等依据属性分类到各节区中存储</p><p>NumberOfSection 用来指出文件中存在的节区数量。</p><p><u>该值一定要大于0，且当定义的节区数量与实际截取不同时，将发生运行错误</u></p><h5 id="SizeOfOptionalHeader"><a href="#SizeOfOptionalHeader" class="headerlink" title="SizeOfOptionalHeader"></a>SizeOfOptionalHeader</h5><p>IMAGE_FILE_HEADER的最后一个成员为IMAGE_OPTIONAL_HEADER32结构体，SizeOfOptionalHeader用来指出IMAGE_OPTIONAL_HEADER32结构体的长度</p><h5 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h5><p>Characteristics用于标识文件的属性，文件是否是可运行的形态，是否为DLL文件等信息，以bit OR形式组合起来</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306112258529.png" alt="image-20230306112258529"></p><p>主要记住0x0002和0x2000</p><p>其余的成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">TimeDateStamp;        <span class="hljs-comment">//时间戳：链接器填写的文件生成时间（不影响程序的运行）</span><br>PointerToSymbolTable; <span class="hljs-comment">//指向符号表的地址(主要用于调试)</span><br>NumberOfSymbols  <span class="hljs-comment">//符号表中符号个数</span><br></code></pre></td></tr></table></figure><p><strong>IMAGE_FILE_HEADER结构体</strong></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306112811250.png" alt="image-20230306112811250"></p><p>machine对应的是8664，对应AMD64处理器。</p><p>NumberOfSection对应0060。</p><p>TimeDateStamp对应620F1879，转换为2022-02-18 11:54:33。</p><p>PointerToSymbolTable：00000000</p><p>NumberOfSymbols：00000000</p><p>SizeOfOptionalHeader：00F0</p><p>Characteristics：0022 –&gt; 0x2 | 0x20</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306223915210.png" alt="image-20230306223915210"></p><h4 id="OptionalHeader"><a href="#OptionalHeader" class="headerlink" title="OptionalHeader"></a>OptionalHeader</h4><p>IMAGE_OPTIONAL_HEADER结构体</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306220049518.png" alt="image-20230306220049518"></p><p>关注以下成员，如果他们设置不正确，可能导致文件无法正常运行</p><h5 id="Magic"><a href="#Magic" class="headerlink" title="Magic"></a>Magic</h5><p>为IMAGE_OPTIONAL_HEADER32时，Magic为10B</p><p>为IMAGE_OPTIONAL_HEADER64时，Magic为20B</p><h5 id="AddressOfEntryPoint"><a href="#AddressOfEntryPoint" class="headerlink" title="AddressOfEntryPoint"></a>AddressOfEntryPoint</h5><p>AddressOfEntryPoint拥有EP的RVA值，指出程序最先执行的代码起始地址</p><h5 id="ImageBase"><a href="#ImageBase" class="headerlink" title="ImageBase"></a>ImageBase</h5><p>进程虚拟内存的范围是0~0xFFFFFFFF(32位系统)</p><p>ImageBase指出文件的优先装入地址</p><p><strong>EXE、DLL文件被装入用户内存的0<del>7FFFFFFF中，SYS文件被载入内核内存的80000000</del>FFFFFFFF中</strong></p><p>一般使用开发工具创建好的<u>EXE文件，其ImageBase值位00400000，DLL文件的ImageBase值位10000000</u>(可以指定其他值)</p><p><u>执行PE文件时，PE装载器先创建进程，再将文件载入内存，然后把EIP设置为ImageBase+AddressOfEntryPoint</u></p><h5 id="SectionAlignment-FileAlignment"><a href="#SectionAlignment-FileAlignment" class="headerlink" title="SectionAlignment, FileAlignment"></a>SectionAlignment, FileAlignment</h5><p>FileAlignment指定了节区在磁盘文件中的最小单位</p><p>SectionAlignment指定了节区在内存中的最小单位</p><p>(一个文件中SectionAlignment, FileAlignment的值可能相同也可能不相同)</p><h5 id="SizeOfImage"><a href="#SizeOfImage" class="headerlink" title="SizeOfImage"></a>SizeOfImage</h5><p>加载PE文件到内存时，<strong>SizeOfImage指定了PE Image在虚拟内存中所占的空间大小</strong></p><p>(一般而言，文件的大小与加载到内存中的大小是不同的)</p><h5 id="SizeOfHeaders"><a href="#SizeOfHeaders" class="headerlink" title="SizeOfHeaders"></a>SizeOfHeaders</h5><p><strong>SizeOfHeaders用来指出整个PE头的大小</strong>，第一节区所在位置与SizeOfHeaders距文件开始偏移的量相同</p><h5 id="Subsystem"><a href="#Subsystem" class="headerlink" title="Subsystem"></a>Subsystem</h5><p>Subsystem的值用来区分系统驱动文件<code>*.sys</code> 和普通的可执行文件 <code>*.exe, *.dll</code></p><table><thead><tr><th>值</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>Driver文件</td><td>系统驱动(*.sys)</td></tr><tr><td>2</td><td>GUI文件</td><td>窗口应用程序(ida.exe)</td></tr><tr><td>3</td><td>CUI文件</td><td>控制台应用程序(cmd.exe)</td></tr></tbody></table><h5 id="NumberOfRvaAndSizes"><a href="#NumberOfRvaAndSizes" class="headerlink" title="NumberOfRvaAndSizes"></a>NumberOfRvaAndSizes</h5><p><strong>NumberOfRvaAndSizes用来指定DataDirectory(IMAGE_OPTIONAL_HEADER32最后一个成员)数组的个数</strong></p><h5 id="DataDirectory"><a href="#DataDirectory" class="headerlink" title="DataDirectory"></a>DataDirectory</h5><p>DataDirectory是由IMAGE_DATA_DIRECTORY结构体组成的数组</p><p>在010Editor下可以看到</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306222456975.png" alt="image-20230306222456975"></p><p>使用CFF Explorer查看，可以很详细的看到每个成员的值</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306222841182.png" alt="image-20230306222841182"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 32位选项头结构体：_IMAGE_OPTIONAL_HEADER</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_OPTIONAL_HEADER</span></span><br><span class="hljs-class">&#123;</span><br>    WORD   Magic;                            <span class="hljs-comment">//* PE标志字：32位（0x10B），64位（0x20B）</span><br>    BYTE   MajorLinkerVersion;               <span class="hljs-comment">//  主链接器版本号</span><br>    BYTE   MinorLinkerVersion;               <span class="hljs-comment">//  副链接器版本号</span><br>    DWORD  SizeOfCode;                        <span class="hljs-comment">//  代码所占空间大小（代码节大小）</span><br>    DWORD  SizeOfInitializedData;         <span class="hljs-comment">//  已初始化数据所占空间大小</span><br>    DWORD  SizeOfUninitializedData;           <span class="hljs-comment">//  未初始化数据所占空间大小</span><br>    DWORD  AddressOfEntryPoint;               <span class="hljs-comment">//* 程序执行入口RVA，(w)(Win)mainCRTStartup：即0D首次断下来的自进程地址</span><br>    DWORD  BaseOfCode;                        <span class="hljs-comment">//  代码段基址</span><br>    DWORD  BaseOfData;                        <span class="hljs-comment">//  数据段基址</span><br>    DWORD  ImageBase;                     <span class="hljs-comment">//* 内存加载基址，exe默认0x400000，dll默认0x10000000</span><br>    DWORD  SectionAlignment;              <span class="hljs-comment">//* 节区数据在内存中的对齐值，一定是4的倍数，一般是0x1000(4096=4K)</span><br>    DWORD  FileAlignment;                 <span class="hljs-comment">//* 节区数据在文件中的对齐值，一般是0x200(磁盘扇区大小512)</span><br>    WORD   MajorOperatingSystemVersion;      <span class="hljs-comment">//  要求操作系统最低版本号的主版本号</span><br>    WORD   MinorOperatingSystemVersion;      <span class="hljs-comment">//  要求操作系统最低版本号的副版本号</span><br>    WORD   MajorImageVersion;                <span class="hljs-comment">//  可运行于操作系统的主版本号</span><br>    WORD   MinorImageVersion;                <span class="hljs-comment">//  可运行于操作系统的次版本号</span><br>    WORD   MajorSubsystemVersion;            <span class="hljs-comment">//  主子系统版本号：不可修改</span><br>    WORD   MinorSubsystemVersion;            <span class="hljs-comment">//  副子系统版本号</span><br>    DWORD  Win32VersionValue;             <span class="hljs-comment">//  版本号：不被病毒利用的话一般为0,XP中不可修改</span><br>    DWORD  SizeOfImage;                       <span class="hljs-comment">//* PE文件在进程内存中的总大小，与SectionAlignment对齐</span><br>    DWORD  SizeOfHeaders;                 <span class="hljs-comment">//* PE文件头部在文件中的按照文件对齐后的总大小（所有头 + 节表）</span><br>    DWORD  CheckSum;                      <span class="hljs-comment">//  对文件做校验，判断文件是否被修改：3环无用，MapFileAndCheckSum获取</span><br>    WORD   Subsystem;                        <span class="hljs-comment">//  子系统，与连接选项/system相关：1=驱动程序，2=图形界面，3=控制台/Dll</span><br>    WORD   DllCharacteristics;               <span class="hljs-comment">//  文件特性</span><br>    DWORD  SizeOfStackReserve;                <span class="hljs-comment">//  初始化时保留的栈大小</span><br>    DWORD  SizeOfStackCommit;             <span class="hljs-comment">//  初始化时实际提交的栈大小</span><br>    DWORD  SizeOfHeapReserve;             <span class="hljs-comment">//  初始化时保留的堆大小</span><br>    DWORD  SizeOfHeapCommit;              <span class="hljs-comment">//  初始化时实际提交的堆大小</span><br>    DWORD  LoaderFlags;                       <span class="hljs-comment">//  已废弃，与调试有关，默认为 0</span><br>    DWORD  NumberOfRvaAndSizes;               <span class="hljs-comment">//  下边数据目录的项数，此字段自Windows NT发布以来,一直是16</span><br>    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];<span class="hljs-comment">// 数据目录表</span><br>&#125; IMAGE_OPTIONAL_HEADER32, * PIMAGE_OPTIONAL_HEADER32;<br> <br><span class="hljs-comment">//* 字段6：AddressOfEntryPoint 表 程序入口RVA，即OEP:</span><br>      EOP:程序入口点，壳相关概念<br>      OEP:原本的程序入口点（实际为偏移，+模块基址=实际入口点）<br>      EP: 被加工后的入口点<br><span class="hljs-comment">//* 字段9：ImageBase 表 模块加载基地址，exe默认0x400000，dll默认0x10000000</span><br>      建议装载地址：exe映射加载到内存中的首地址= PE <span class="hljs-number">0</span>处，即实例句柄hInstance<br>      一般而言，exe文件可遵从装载地址建议，但dll文件无法满足<br><span class="hljs-comment">//* 尾字段：DataDirectory 表 数据目录表，用来定义多种不通用处的数据块。</span><br>      存储了PE中各个表的位置，详情参考IMAGE_DIRECTORY_ENTRY...系列宏<br></code></pre></td></tr></table></figure><p><a href="https://bbs.kanxue.com/thread-270210.htm">原创]归纳PE结构基础知识，顺便手撕个PE-编程技术-看雪论坛-安全社区|安全招聘|bbs.pediy.com (kanxue.com)</a> </p><h4 id="节区头"><a href="#节区头" class="headerlink" title="节区头"></a>节区头</h4><p>节区头定义了个节区的属性</p><table><thead><tr><th>类别</th><th>访问权限</th></tr></thead><tbody><tr><td>code</td><td>执行，读取权限</td></tr><tr><td>data</td><td>非执行，读写权限</td></tr><tr><td>resource</td><td>非执行，读取权限</td></tr></tbody></table><p>节区头是由IMAGE_SECTION_HEADER结构体组成的数组，每个结构体对应一个节区</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306223555772.png" alt="image-20230306223555772"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// IMAGE_SECTION_HEADER 节表结构体，大小40B</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_SECTION_HEADER</span> &#123;</span><br>  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];  <span class="hljs-comment">// 节表名称：描述性字段</span><br>  <span class="hljs-comment">// 下方4个字段：从文件S1处开始，拷贝S2大小的数据，到内存S3处，有效数据占用内存S4大小</span><br>  <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>    DWORD PhysicalAddress;<br>    DWORD VirtualSize;         <span class="hljs-comment">// S4:内存大小</span><br>  &#125; Misc;<br>  DWORD VirtualAddress;          <span class="hljs-comment">// S3:内存地址：基于模块基址</span><br>  DWORD SizeOfRawData;           <span class="hljs-comment">// S2:文件大小</span><br>  DWORD PointerToRawData;        <span class="hljs-comment">// S1:文件偏移</span><br>  DWORD PointerToRelocations;    <span class="hljs-comment">// 无用</span><br>  DWORD PointerToLinenumbers;    <span class="hljs-comment">// 无用</span><br>  WORD  NumberOfRelocations;    <span class="hljs-comment">// 无用</span><br>  WORD  NumberOfLinenumbers;    <span class="hljs-comment">// 无用</span><br>  DWORD Characteristics;     <span class="hljs-comment">// 节属性，取值IMAGE_SCN_...系列宏(bit OR)</span><br>&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;<br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230306223719784.png" alt="image-20230306223719784"></p><h3 id="RVA-to-RAW"><a href="#RVA-to-RAW" class="headerlink" title="RVA to RAW"></a>RVA to RAW</h3><h4 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h4><p>是指数据在文件中相对于文件开始位置的偏移</p><h4 id="VA"><a href="#VA" class="headerlink" title="VA"></a>VA</h4><p>是指数据在进程虚拟内存的绝对地址</p><h4 id="RVA"><a href="#RVA" class="headerlink" title="RVA"></a>RVA</h4><p>是指数据在进程虚拟内存中某个基准位置（ImageBase）开始的相对地址</p><h4 id="VA和RVA满足的换算关系"><a href="#VA和RVA满足的换算关系" class="headerlink" title="VA和RVA满足的换算关系"></a>VA和RVA满足的换算关系</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">RVA</span> <span class="hljs-operator">=</span> VA - ImageBase<br></code></pre></td></tr></table></figure><h4 id="文件偏移（RAW）"><a href="#文件偏移（RAW）" class="headerlink" title="文件偏移（RAW）"></a>文件偏移（RAW）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">RAW</span> = RVA - VirtualAddress + PointerToRawData<br></code></pre></td></tr></table></figure><p>注：其中VirtualAddress为RVA所在节区的VA（VA - ImageBase）地址，PointerToRawData为RVA所在节区对应在文件中节区的偏移（Offset）</p><h3 id="IAT"><a href="#IAT" class="headerlink" title="IAT"></a>IAT</h3><h4 id="IMAGE-IMPORT-DESCRIPTOR"><a href="#IMAGE-IMPORT-DESCRIPTOR" class="headerlink" title="IMAGE_IMPORT_DESCRIPTOR"></a>IMAGE_IMPORT_DESCRIPTOR</h4><p>该结构体中记录着PE文件要导入哪些库文件</p><p>在winnt.h中可以找到关于他的定义</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230313110516820.png" alt="image-20230313110516820"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        DWORD   Characteristics;           <br>        DWORD   OriginalFirstThunk;<span class="hljs-comment">//INT(Import Name Table) address (RVA)         </span><br>    &#125; DUMMYUNIONNAME;<br>    DWORD   TimeDateStamp;                 <br>    DWORD   ForwarderChain;                 <br>    DWORD   Name;<span class="hljs-comment">//library name string address(RVA)</span><br>    DWORD   FirstThunk; <span class="hljs-comment">//IAT(Import Address Table) address(RVA)                 </span><br>&#125; IMAGE_IMPORT_DESCRIPTOR;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_IMPORT_BY_NAME</span> &#123;</span><br>    WORD    Hint;<span class="hljs-comment">//ordinal</span><br>    CHAR   Name[<span class="hljs-number">1</span>];<span class="hljs-comment">//function name string</span><br>&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;<br></code></pre></td></tr></table></figure><p>执行一个程序时，导入多少个库就存在多少个IMAGE_IMPORT_DESCRIPTOR结构体，这些结构体形成了数组，且以NULL结构体结束。</p><p>注意：</p><ul><li><p>INT 和 IAT 是DWORD数组，以NULL结束</p></li><li><p>INT中各元素的值位IMAGE_IMPORT_BY_NAME结构体指针</p></li><li><p>INT 与 IAT的大小应该相同</p></li></ul><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230313111429483.png" alt="image-20230313111429483"></p><h4 id="PE装载器把导入函数输入至IAT的顺序"><a href="#PE装载器把导入函数输入至IAT的顺序" class="headerlink" title="PE装载器把导入函数输入至IAT的顺序"></a>PE装载器把导入函数输入至IAT的顺序</h4><p>IAT输入顺序：</p><ol><li><p>读取IID的Name成员，获取库名称字符串”kernal32.dll”</p></li><li><p>装载相应库：LoadLibrary(“kernal32.dll”)</p></li><li><p>读取IID的OriginalFirstThunk成员，获取INT地址</p></li><li><p>逐一读取INT中数组的值，获取相应IMAGE_IMPORT_BY_NAME地址(RVA)</p></li><li><p>使用IMAGE_IMPORT_BY_NAME的Hint或Name成员，获取相应函数的起始地址：GetProcAddress(IMAGE_IMPORT_BY_NAME.NAME)</p><p>例如GetProcAddress(“GetCurrentThreadId”)</p></li><li><p>读取IID的FirstThunk(IAT)成员，获得IAT地址</p></li><li><p>将上面获得的函数地址输入相应IAT数组值</p></li><li><p>重复4~7，直到INT结束（遇到NULL）</p></li></ol><p>稍微总结一下，整个过程就是找到IID，获得库的INT地址，获得对应函数的起始地址，获得IAT地址，将函数地址写入IAT</p><h3 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h3><p><strong>EAT是一种核心机制，它使不同的应用程序可以调用库文件中提供的函数</strong></p><h4 id="IMAGE-EXPORT-DIRECTORY"><a href="#IMAGE-EXPORT-DIRECTORY" class="headerlink" title="IMAGE_EXPORT_DIRECTORY"></a>IMAGE_EXPORT_DIRECTORY</h4><p>IMAGE_EXPORT_DIRECTORY结构体保存着导出信息</p><p><u>IMAGE_OPTIONAL_HEADER32.DateDirectory[0].VirtualAddress的值即是IMAGE_EXPORT_DIRECTORY结构体数组的起始地址</u></p><p>IMAGE_EXPORT_DIRECTORY</p><p>winnt.h头中的定义</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230313121213457.png" alt="image-20230313121213457"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span><br>    DWORD   Characteristics;<br>    DWORD   TimeDateStamp;<span class="hljs-comment">//creation time date stamp</span><br>    WORD    MajorVersion;<br>    WORD    MinorVersion;<br>    DWORD   Name;<span class="hljs-comment">//address of library file name</span><br>    DWORD   Base;<span class="hljs-comment">//ordinal base</span><br>    DWORD   NumberOfFunctions;<span class="hljs-comment">//number of functions</span><br>    DWORD   NumberOfNames;<span class="hljs-comment">//number of names</span><br>    DWORD   AddressOfFunctions; <span class="hljs-comment">//address of function start address array</span><br>    DWORD   AddressOfNames;         <span class="hljs-comment">//addresss of function name string array</span><br>    DWORD   AddressOfNameOrdinals;  <span class="hljs-comment">//addresss of ordinal array</span><br>&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;<br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230313121347228.png" alt="image-20230313121347228"></p><p>GetprocAddress()函数引用EAT来获取指定API的地址。</p><h4 id="GetProcAddress操作原理"><a href="#GetProcAddress操作原理" class="headerlink" title="GetProcAddress操作原理"></a>GetProcAddress操作原理</h4><ol><li>利用AddressOfNames成员转到”函数名称数组“</li><li>”函数名称数组“中存储着字符串地址。通过strcmp，查找指定的函数名称（数组的索引称为name_index）</li><li>利用AddressOfNameOrdinals成员转到orinal数组</li><li>在orinal数组中通过name_index查找相应orinal值</li><li>利用AddressOfFunctions成员转到”函数数组地址“（EAT）</li><li>在”函数地址数组“中将刚刚求得的oridinal用作数组索引，获得指定函数的起始地址</li></ol><p>hint：对于没有函数名称的导出函数，可以通过Ordinal查找到它们的地址。从Ordinal值中减去IMAGE_EXPORT_DIRECTORY.Base成员后得到一个值，使用该值作为”函数地址数组“的索引，即可查找到相应函数的地址</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PE文件格式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022Annual Summary</title>
    <link href="/2023/01/30/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <url>/2023/01/30/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="wrong password." data-whm="Sorry, this article cannot be verified, but you can still view the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="8ec99d0d894ce48a791a326b6f9bc54480c387b08cc479ab5241b6499b83d64b">d9174b3c1dd0eda591f3dbe2c9452ae88181998f4e1d0e2ceea13f3bc46d153ecef038014865977341e18724210556fa9591c9ea3e321d92df2695465588eeeef89c7b68778acb8281bf03de8fac4517fe617a8616892d4d0335aac26a49ed7b193410a60a1f133cf95126a3219175b62808d00882f56098ed8df4abf0d77cc2ff964b77579fee1581a722e168ab64e4ec65767a1c1349eef2d28588a08c16891426af83ee0a5a39e0b397d4a1927348d1bdb2d4077d8b9a1db2d5646df5e5fe98255d7a82e6aa706f42bd21ef9de4fe06da3e73efcb160d41b3835e672853c71e0d7c9ebe0ab39e763a5df1a92ed96990a537687c88b02b66807e072505c3fb0355a3f706c147b70d75abd4282ba9780d1b22728d921407bf6332a2e87a6b88bb6a76f879df68b7e6d90e0a5936521ffaafad06e9bcf59a8c0136f5a56335672cf03b71d99bc409d1a7088af7a0e7b28940cb9f008e8b4eefdc2a64c8ea9266de5e4de2a625a7b0be59b001cfd4c251a2642b49ed67d1e1e88296eecb8119bacf0ddfacb85645ca265de6642afb74b7bbea693fe1bf066cc58e10df339e6f3c6bc5c1c12567c04fbe9982d644e99b15e3de590d4c9a9480d57fb914885983bf9bb7a41ccf20f9debdcaa9889f1b5a42b4c387c1560bccc11a58d5c20d9c0282afd618eea762132799efd16eb6f0ccba44f40e1e255eddd1c2e560295aa9c1d91f1a4fcc04e504efd3c8b976bcf07ffe514a99b09778135ea3be602e8c76cc552b2f176a81d9795f1c02949aef74212936b62a99594ecc21597ba30a27b473c0b2db4d302771acce4f7ba0c29e96d2ee2358c28070c1504b923a16e16d18dd4910ed4a7f132dbb2a92fb46088c14afa04539e321caeefbed7fec7ba8786e6d95ce1ec5975bee551d0ddb58ede452a7cc3feb2d9f917b4ea02fa4953f3be69e4a75c4d0a1b5525a409be178b35fff97aeac4137c7eaf88deb3767b1ca29474ed45f0dd3a4f6c6c890baa670ad9d3c2b91d60b06be955b3d1730da312b9e472fae5a0cc72737fd5710d44bf54f191c84d9e3ebb5db90834da47d88a967a23a8106ed6b6f5528260729be54259a10e222a6cf774a408cc2d534d02d47c947615c5c92b91433cf7c8ecdd739c48b18192f20e615cc6ee675a010d8b4ebcc8d153b8c11c9d5bb7dbca35b3387c4b879397d064f496b38275f09a6c98603f0660690407d6fcfd802b343233d94865b70a67cbbc0c741e45655b402c113bf25d99fa8849b9ce8e5495c6de7797aa05f9c8c1971e9626b32683df0b9ba8e5d158b299956d72a1ca5eda279709fe9933ce1097a918fc749762e50791b1d0af6e9ed8012f46a15332ae61d5b038bafc1b707e3bcf6f9c80af122f86b0734bcbdc86161be24cb1415e5837a64538ae042a147e3c69d010085cbf8a1380a7f82d6f1c36ea8b072158bba9537dd84dce35aa5a50eda57e19da33d24275ab1a1dd98763c23c2876f590bae8ff0e3c58ffa22dee265bdfec60d5f9768ee6647f8eb51e66abebd18149c9cf0fd9dd799916ed77c6b3ba2bed6ae63e103332cb1116baccf88a891886cf0f1f45c5408abeaee1382be3f06cf0db0511d462812cd7c3e2dd4bc20aec2473eadba805c3cc5672a81935233b5abaf517f98a2a194abb25f01744448767b2678fd041fa596311feb2c9a987fa74d3350eade5256321301e5dbcd79bae4e36ebff0058d03d0ba62c05050ff911296bb92b02a39af041169784ce6afef89c74986e7d0253bfdc9d26417ce7977cace2a3d3aefd3ee23cb4b69d0bd9fcdffb2647b0557bbd862702062ce84ed70574603a8772edf9cbcfb6d9ad379dba66b94971912abb92ed4048c6272a41abe625c5a2a3176d97dbdbf91a22c5d91e33085b34da63004f645290cd5ca3178bae015e9f2e682bae400cf57d519072dcabb2f4da4bdc660506997f267e8d7f7a3874b7393f3e0d8108ad4474501a902cd849964ff4eeb1c54b92ab9514de9ace8d30ddf987190aa10c932f60d46b1cdf47d73b0b1d2d6ebb475fd1cf128f5a2dc2d668d6cde94748b928cf2162743754079fb3df9cef7c1922eb80f68cf7de81a8312d0174f4da0fd02d0a16e26291fa2d7764693ef8261d78a604798fefdd96ebe69836d231c58fae49969082815a45f0344c80b170cfe4cdee9673f412eb7ad4eed47c97a9118c6c4a0ec33e17dd502f83982fa48c7d4d0a6ab6777bdeeef9812b4479f64d3a307f070caf1756157dfeb5d12b4901f3e73fd53e73e149f7e33bbce0402ffed597aec606b637c644b7147d6b7d5f9986bb76dd66fea2588245188d885ee53f35b06551d69af91d3d46fa6b194edc34a309f5459698fcef0a5aeb1c0535881d2f9ee5f70cb7ef571e29882eede8284d907af9f5c366e6748f424d333508f226e8b9b1fbcd7a8f33c015faa4d71d8c00406d92430c47e2e2292eb08bc011a4a6f1474c0d0623bc8cd9908bc96ce3ec5d21c12761656db28f110c24e2e792128975a71aebcb290e362c7405a47a13cea778f7d23ca9b3eb1acfbc8ec2e04bf98ac689a7e2d2133eccdb0f4adfed04a3b147f68ca7356ab82326008008dea708468928757b75548382463902a131d1023741785ee825fd9883b8931674c73a7967fe1b08301b774fd9d6502e616541ea5a1cb670ce994049fcce2596bc52b8278a85a1c2acda79f77caaa7704895e79d3f880341d0812624990bb09ed06683978937758bc29ee25dd9ff34c59dc0f3234f15b2679c808b9a40e5540f026d22c518313f03451e8984b31bfc27eb8943cf28e3cb3f80b543ef249b11d7e507e84b6b0226c06ced0d411b4100d3e48c87a710456ed339eb4565a0ec7def3074e9f527f2c42c9dc702225682c19454c50e0321604b3fdbfc42a9d54f558702485344588f04ce88af14b34c3ae6f32eefd1efa43b8c0ca10a7591cb57b87c6c1c988317798e46d6e31d59c847168db5b2e216edc1e402face0824c069a054e6cb32ac0b8a3b2eed8140159ec6f56107b958178d15a4e7bc688ddc6593f5941b6a0cafd6208814caad552d291bcd093680bf40472bc49d9182215908158271e63c0f95037233de9c454fde66f5e32490286b2b8548b75d6c60585449058336406a0e4cafa654865ebd2c9e0864474c300b3895e2df53ee5d953438527b0a472b78ff8059a33b22cdec185f5b726ec060d3e8328ef222818dfd5c28393e44270943aee519333cd8cb349d6021f673354c4973ce416cacba628c02683e06dffed652f9a2266d105b11e6f1d205c8725bcf39202117538a9d04565353496910d5c6058446d93421f344f3b0a253a0b23a52ebb33fb3313a38d75b20ae1dec3cd0c05aec484822481364943c8639ec310436be23da63b01ee1db9f5fb7f403ddf1f4b688778eaacae96813cc5c9093850bb866237e5de95df31e6b6f65bc72cb9e0c2f2a43261a00546bb9cf210f361477abcab39ea790fdc6aaf819367d806273ebf0243b7ab2f640cdaf059d91c73fe5dfe8660fea8f5332dd4bc69792e1d93600f8b5a0e658fd96c6769cc81e41b2d19429cbf967853a20daf2e65f991e0be77dd06cd889ccd0465ba1725cc6aed699d181ba69d2b4b55054b743e574bf2c4a0c882b39cb37c81d71f5e13841378281b0f44e8120f5ee022b4e70273ee914612202a267a4b83b5493138a5bbca57d04979cb7f4f0dc56e3fcbd300303b8a9260615957134dce55b2b0be18fad6a5c74f6137151b9df77668904a1b2bd8b5482d948488f6f9ac8e4c4ca62f26aa948267a22f095623eb87b760db569134ae248099feb66c388669fc0c1c84168fde1438e085e1ad03986fe31679b924d5b96ee8ec29453680da23697dded30c69f55f372f3525b8097f008728d6ea3119b5d90e51cabb5bf9edd05359e1ad2fdb256fc52d90b965ae3f336e5df409568e4e7ba51d58f52d880e582a3351f9314b289e0344a69759c8cc8d53f3c6122cd9976e0c10c772fc1d8da348043c0a402b26b6ee89c1754920852a978f13ca95acc8109be65b719d31df81dadf109ff84ba9164e0e9ca8d5528a050c09124b0208a061ec0d6ff4faf7977fbd2856dff9489aece205c2d8a1f11363b389cb759baed9c031f3b535fa9d770abe8f55ce0de7ad7201345eb7926abc8347136da37bc320ee45f73aa03b452f4963759a27ee7d06838a1dd25bcc547243a381fd4f9ff33b3179c06bdf3e10d66025cce55727d362a0081c9f6fb13b13c2d6fe94874b2d00bf6a0494ea8a021ac401a1d6ef36570f536820032ee0dae5f10e4739b2642fee1ecbeca655f4f74d46c1f998895db9f01d3bf23c57296ad25bd71b477cc40541d5a808b26880194d1af5d1d706a70bc76a30349c8963853567cd6a634350228987799875bb8fe635195d8b0164e43bd4f31892857d3a0aea65f203b6338a050bc846608394b3acf60b648cdb59110f66a60b2675544d3fc0a8f44a31e6b85cb7f52290f68e6797c984e2bfba37a3b2e6e9a28644ae481e51b6a58a059f085c3433c3ff2cd30861c5d5915e00ba9e04fbdcb225d1aa52bf2f8bbd9a20c647de781ad05f072014154402923792b24a5e3d487b5560dd0ca662abcf715cee7c7780a0bb10a5c800249c59a18bd3b021c6bcb73e60bac869bbdd6789fe8c25d5414e8652b0ca2db882d2a8f75cca57c56d58cc53b5b2b25cc6767a9d9f47595216e024f1d004551681a5b3398aedfea2c8d5746b712522ad3050e105111c335ea1cad7114ffb233cdba9f823cb72a1eee1a5392f000c45e067c8b6c33fd848707fe9f80183ffc68185c51110a5e975a7136784278f1b3041aadf41d8a68187b180f3b1c440e30ac665b34bed3b5d0a4ce04e60a6b9f651d2c0777cd28b3aa983b51a49fde1ce164d7accb85fe2ff9e635e1769185b05cefc2c38d9ab6be9af92e09df60b66e36a208495fa88cfcc11ddab31aa9188fe7c355498489dd80280ff6d32e361cfc5e03446e987f25393becef93e0123e45ae63150833e028821e50b94ce98c499cf50f149baf6e75e238c224bbd98dff96615d75763b429019aa499fb8739c243d102b560be7bae080a1e5a21c35d77870b8eb35e8b2715e9f78db1bae43ccf8aaee6190324ed364c05dfc86978d1cee4bb280c260a4621e676f1f1f30595933567f25a46f219859ffe9b9f875acbec912e0a3611e02504849ff34460e00b9e1c1a59e1271c334f918f264936da7a2e73ded1aceeb3a99376a4500fbdbd9fb18c9cb217fccab83bdde6fa52ee28437bdce124e71d9dd870fcc66a84f762cd4d5b85674ac909988834605eca401375f5886efbb1e7454b76ea059b5d9350e05a6e8c6210a63affabfb8529be9b495f18f46b90cb8657633d2d467ba3496fd15da60f6e87d3c26ac4f120f931b20e558852f11abb7bb6e211310e41a27192ce351f2f60f02ab7baa6225e393d5d923de6c583b59df90b6787889a961fdc9b560c36e253162de8606413cee6381a311da34995db016d5f89811fb9f4dc0b64260b233f5aaadee942b9d9bdbb8ff2c5e193a1f03e3d209b75e2b0ca0f2c2b93da5c9b12d14f6d686a9c58eb9c810dc49969caff194a1820b2bcae19300e1a749fa9af3471e5baa60cde8ad1051dc91859f02b574cf9d63b8eb5c9acaa3e02ebec9f0546bb14822da3aa31149397eeded9f405ed218cb71e5423827239337f1d4f3a9c89e243300076513eb1098ec60d6351c6f0a37c50166841f63ccf351ffce8903329ed8cb95ab751cde62106d0d5172f9df1fc71bbf3f7cefef96b29469bf3f5b1ed7a534c179c4f68af73ae88da4983e775675342c0a7e3b37ddca9eb3ac9348e00372c34b9896c454f2cbbade824c3f178e28bb9fd1da3e8dca59928b144a4e4b8ee7186c38f2b27841d2959b42404d80500ce6e962e7d5b140cab31c74e5cc0b641b604d552287da6446d4bc9de06383b9f3452dab69d89ea6c176bcab7a07c751f2f2c3a105b7eeb2f25364765eeecb89b3a5c499d286a306b7078e4e9029c41b74177db09dabe8cf7fc003d97f13582c65c3f7541eb6529a86cd631116c0e7c27342d2674cf862ca8327894c26e2e22b8b04366ed4cfe2552996c75c61b3f8f0e83e8b3083b51453914023860d2676e1c7bec41af4e0af5d223f2ad4fd8ce6c2b0c72595f5ea85e97b7051b349b60efea4d57f6d2ab042447c4cf6f656a58cd3ce83e64cc2065b2d4a6ff866ca282f602fa5c3af43b793299861b6c476abfdfffaebcb447576b435d7ee348859b1a305efc6d1c2fedc1d6f4fe0f6573e0e106084b53488ff566a2ec90eb22ebc8f15b58d1bb1080538ca0391c4383e214498bda44a35d9afca87f206b07c873033c1e69513640476d2b37ff5574f3e2b33bfa32e40c8f53227b07ff2d6152ab07e3186f394d47cdfab1d25ce11baed134dd0a7c10bb6aca80eaf3c272a2435c74c370f32fb3ce688c13a468fdc4af34cf18bd1d80c8194fa5e0d1ebc75943e02d33cb60b1d659167438b7f80637c0b553f53393bd578cd07669b5040f75a6d8038c65b978ca5d76445a68428dbc67c5096de488efce935a1ba927563f0d735de62d3bcfcccc89d602328433af9e97b7dd5a9227c1481f72786021e084d2c86bc1ea898a01858a8537254984e56e553565a4f08328d87454ad37672b0c508effb9f0fa177bc2d871fc5f7a054da7bbf70835fa007ef3c4c85e4f4e2263453ed5ce1b09a29ecca14d4d903daaedb4a9af1b79bbdd8638a77e9995202e0ee8ed152c6a5676bae21465a1048d8227cdac2e202091016887d9da3d39291b936f13cf9bf7d8c94829dfe7c69f702eb86fc619aadfc71cfb5f05a82cf4b156b8b5eb3e37f502ea1ff0f5b8df454103d27cdd920aab46e7fbe9a8cb940d579a12aefc69c08db500454d8715e36c0b70cac57d808371deebf1dbc0ab343c43f90841ede8eab9e557afff7ebcfcc9063451a5bdb764508f8f43ca2d45c0676686fbe8640e106df78afb8ab7355f64b145c71b117d90f2cb2eac876fd3e5810692336a747652bf8928f867151cccc624ed0129c59f1a3533b7f23cde823468462d00441207239d0cb0dfc7aaae427395df5d12a250b10ba7348598f24192ba68db041a20ade27abe275739473f567dbeed69bfadbb56f837579d44da58544fd52d100c5c54e6bbd6987e73487ded5e1c15adad8cd055e6d134f0411ba37a329ca69493c4e52c0176699e1dcdd3b5287b20ce02e454cb9ea86f329cf3a5eb5f6ad948949f3659072d7ed3717b2a01fa40db079b4af25e4f7b9144ffdcadb009354d786435780fbb232858582c41d96dfb9698acce5039fa</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password required</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Annual Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Annual Summary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023西湖论剑初赛</title>
    <link href="/2023/01/25/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9B/"/>
    <url>/2023/01/25/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="2022西湖论剑wp"><a href="#2022西湖论剑wp" class="headerlink" title="2022西湖论剑wp"></a>2022西湖论剑wp</h1><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p>这个题目主要的逻辑并不在main函数中，而是在seh链时这里，双击打开VirtualTable</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230203201301514.png" alt="image-20230203201301514"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230203201351920.png" alt="image-20230203201351920"></p><p>可以看到下面有三个加密函数</p><p>然后可以看到三个函数依次调用了_onexit函数，所以加密的顺序就是Base + md5 + RC4</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230203201441711.png" alt="image-20230203201441711"></p><p>第一部分的加密主要就是base8，要注意到md5函数中提前初始化好了table</p><p>找chatgpt写了脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params"><span class="hljs-built_in">input</span></span>):<br>    table = <span class="hljs-string">&quot;01234567&quot;</span><br>    decoded = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>), <span class="hljs-number">8</span>):<br>        char_1 = table.index(<span class="hljs-built_in">input</span>[i]) &lt;&lt; <span class="hljs-number">5</span> | table.index(<span class="hljs-built_in">input</span>[i + <span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">2</span> | (table.index(<span class="hljs-built_in">input</span>[i + <span class="hljs-number">2</span>]) &gt;&gt; <span class="hljs-number">1</span>)<br>        decoded.append(char_1)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">input</span>[i + <span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">input</span>[i + <span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;=&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        char_2 = (table.index(<span class="hljs-built_in">input</span>[i + <span class="hljs-number">2</span>]) &amp; <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">7</span> | table.index(<span class="hljs-built_in">input</span>[i + <span class="hljs-number">3</span>]) &lt;&lt; <span class="hljs-number">4</span> | table.index(<span class="hljs-built_in">input</span>[i + <span class="hljs-number">4</span>]) &lt;&lt; <span class="hljs-number">1</span> | (table.index(<span class="hljs-built_in">input</span>[i + <span class="hljs-number">5</span>]) &gt;&gt; <span class="hljs-number">2</span>)<br>        decoded.append(char_2)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">input</span>[i + <span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">input</span>[i + <span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;=&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        char_3 = (table.index(<span class="hljs-built_in">input</span>[i + <span class="hljs-number">5</span>]) &amp; <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">6</span> | table.index(<span class="hljs-built_in">input</span>[i + <span class="hljs-number">6</span>]) &lt;&lt; <span class="hljs-number">3</span> | table.index(<span class="hljs-built_in">input</span>[i + <span class="hljs-number">7</span>])<br>        decoded.append(char_3)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(decoded)<br><br>input_str = <span class="hljs-string">&#x27;162304651523346214431471150310701503207116032063140334661543446114434066142304661563446615430464&#x27;</span><br>output = decode(input_str)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(output))<br><span class="hljs-comment">#b&#x27;915572239428449843076691286116796614&#x27;</span><br><br></code></pre></td></tr></table></figure><p>第二个加密函数我觉得是md5，但是群内大佬说是魔改sha1，具体要做的话只能爆破了</p><p>没有继续下去</p><p>不过看了大佬的wp，这道题可以直接爆破RC4的密钥(tql， orz)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><br>enc = [<span class="hljs-number">0x3F</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x70</span>]<br>key = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>    rc4 = ARC4.new(<span class="hljs-built_in">str</span>(i).zfill(<span class="hljs-number">6</span>).encode())<br>    m = rc4.decrypt(<span class="hljs-built_in">bytes</span>(enc))<br>    <span class="hljs-keyword">if</span> m.isdigit():<br>        key = i<br>        <span class="hljs-built_in">print</span>(m)<br><br>m = <span class="hljs-string">&#x27;1523306115230466162304651523346214431471150310701503207116032063140334661543446114434066142304661563446615430464&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag:&#x27;</span>, <span class="hljs-built_in">int</span>(m, <span class="hljs-number">8</span>).to_bytes(<span class="hljs-number">42</span>, <span class="hljs-string">&#x27;big&#x27;</span>).decode() + <span class="hljs-built_in">str</span>(key))<br><span class="hljs-comment">#b&#x27;1523306115230466162304651523346214431471150310701503207116032063140334661543446114434066142304661563446615430464&#x27;</span><br><span class="hljs-comment">#flag: 561516915572239428449843076691286116796614807391</span><br></code></pre></td></tr></table></figure><h2 id="Dual-personality"><a href="#Dual-personality" class="headerlink" title="Dual personality"></a>Dual personality</h2><p>x86里面跑x64程序，这骚操作第一次见，也是复现完了才理解这个题目名字啥意思</p><p>主要的考点就是在ida无法正确识别x64段的汇编代码，而且用x32dbg调试是经过一个动态patch的函数处理后会报异常</p><p>每次在执行x64汇编代码前，会先经过一个函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205103834013.png" alt="image-20230205103834013"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205103931869.png" alt="image-20230205103931869"></p><p>开辟新的内存空间，并将后面的指令改为跳转</p><p>当跳转到x64汇编代码处时，可以看到IDA无法正确识别</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205104047953.png" alt="image-20230205104047953"></p><p>解决方案有两种：</p><p>可以手动反汇编，修改程序然后构建函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205104237995.png" alt="image-20230205104237995"></p><p>可以将数据提取出来写入文件然后用IDA64打开</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205104312382.png" alt="image-20230205104312382"></p><p>个人推荐第二种，看到的直观很多，而且也可以避免不正确的修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_binary_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-built_in">bytearray</span>(a))<br>a = [  <span class="hljs-number">0x65</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8A</span>, <br>  <span class="hljs-number">0x40</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x84</span>, <br>  <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x44</span>, <br>  <span class="hljs-number">0x89</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x00</span>, <br>  <span class="hljs-number">0x70</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x48</span>, <br>  <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x48</span>, <br>  <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x48</span>, <br>  <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x58</span>, <br>  <span class="hljs-number">0x08</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x48</span>, <br>  <span class="hljs-number">0x89</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC3</span>, <br>  <span class="hljs-number">0x20</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x45</span>, <br>  <span class="hljs-number">0x10</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <br>  <span class="hljs-number">0x18</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x48</span>, <br>  <span class="hljs-number">0x89</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC3</span>, <br>  <span class="hljs-number">0x38</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x48</span>, <br>  <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <br>  <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xB8</span>, <br>  <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x04</span>, <br>  <span class="hljs-number">0x25</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x14</span>, <br>  <span class="hljs-number">0x70</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xD9</span>, <br>  <span class="hljs-number">0x88</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xD9</span>, <br>  <span class="hljs-number">0x88</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x32</span>, <br>  <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x88</span>, <br>  <span class="hljs-number">0x58</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x70</span>, <br>  <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>]<br>write_binary_file(<span class="hljs-string">&quot;CODE&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以看到第一处x64汇编代码的功能就是给dword_407058赋值为0x5DF966AE</p><p>然后执行loc_4013F4</p><p>这里可以P生成函数，然后F5看伪代码，也可以直接硬读汇编</p><p>主要的功能就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">dword_407058 -= <span class="hljs-number">0x21524111</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<br>((DWORD*)Flag)[i] += dword_407058;<br>dword_407058 ^= ((DWORD*)Flag)[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>执行完loc_4013F4后，接下来跳转到</p><p>loc_40144C</p><p>与第一处加密前进行的操作一模一样，先SMC，然后执行第二处x64汇编代码，可以看到这里直接call fword ptr key</p><p>实际上就是call 401200h</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205105132494.png" alt="image-20230205105132494"></p><p>401200h处的函数功能主要如下，此处0x40705C处的值还是0，所以执行else，就是对第一步加密之后的Flag进行ROL操作</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205105458393.png" alt="image-20230205105458393"></p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">*<span class="hljs-built_in">Flag</span> = <span class="hljs-variable">__ROL__</span>(*<span class="hljs-built_in">Flag</span>), <span class="hljs-number">0</span>xC);<br>*(<span class="hljs-built_in">Flag</span> + <span class="hljs-number">1</span>) = <span class="hljs-variable">__ROL__</span>(*<span class="hljs-built_in">Flag</span> + <span class="hljs-number">1</span>), <span class="hljs-number">0</span>x22);<br>*(<span class="hljs-built_in">Flag</span> + <span class="hljs-number">2</span>) = <span class="hljs-variable">__ROL__</span>(*<span class="hljs-built_in">Flag</span> + <span class="hljs-number">2</span>), <span class="hljs-number">0</span>x38);<br>*(<span class="hljs-built_in">Flag</span> + <span class="hljs-number">3</span>) = <span class="hljs-variable">__ROL__</span>(*<span class="hljs-built_in">Flag</span> + <span class="hljs-number">3</span>), <span class="hljs-number">0</span>xE);<br></code></pre></td></tr></table></figure><p>第三处x64代码的执行过程也一样，先SMC，然后跳转过去执行</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205105642817.png" alt="image-20230205105642817"></p><p>可以看到是一些位运算</p><p>修改下面的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">data:00407014 byte_407014 db 9Dh, 3 dup(0), 44h, 3 dup(0), 37h, 3 dup(0), 0B5h, 3 dup(0)<br></code></pre></td></tr></table></figure><p>在执行完最后的x64代码后，又有一段ida不能正常识别的数据</p><p>也可以和上面的一样，选择写入文件然后用IDA64打开，也可以自行生成函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205110943589.png" alt="image-20230205110943589"></p><p>阅读之后，主要功能就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">key[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x04</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x4A</span>&#125;; <span class="hljs-comment">//位运算之后的结果</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)&#123;<br>Flag[i] ^= key[i % <span class="hljs-number">4</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>在异或加密之后，程序就进入了比较阶段，所以可以直接写出解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>template &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>T __ROL__(T val, <span class="hljs-type">int</span> size) &#123;<br>    T res = val &lt;&lt; size;<br>    res |= val &gt;&gt; (<span class="hljs-keyword">sizeof</span>(val) * <span class="hljs-number">8</span> - size);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">/*循环右移*/</span><br>template &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>T __ROR__(T val, <span class="hljs-type">int</span> size) &#123;<br>    T res = val &gt;&gt; size;<br>    res |= val &lt;&lt; (<span class="hljs-keyword">sizeof</span>(val) * <span class="hljs-number">8</span> - size);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data[<span class="hljs-number">33</span>] = &#123;<br>        <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x54</span>,<br>        <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x78</span>, <br>        <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x70</span>,<br>        <span class="hljs-number">0x31</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xCA</span><br>    &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[<span class="hljs-number">4</span>] = &#123;<br>        <span class="hljs-number">0x04</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x4A</span><br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        data[i] ^= key[i % <span class="hljs-number">4</span>];<br>    &#125;<br>    *((<span class="hljs-type">uint64_t</span>*)data) = __ROR__(*((<span class="hljs-type">uint64_t</span>*)data), <span class="hljs-number">0xC</span>);<br>    *((<span class="hljs-type">uint64_t</span>*)data + <span class="hljs-number">1</span>) = __ROR__(*((<span class="hljs-type">uint64_t</span>*)data + <span class="hljs-number">1</span>), <span class="hljs-number">0x22</span>);<br>    *((<span class="hljs-type">uint64_t</span>*)data + <span class="hljs-number">2</span>) = __ROR__(*((<span class="hljs-type">uint64_t</span>*)data + <span class="hljs-number">2</span>), <span class="hljs-number">0x38</span>);<br>    *((<span class="hljs-type">uint64_t</span>*)data + <span class="hljs-number">3</span>) = __ROR__(*((<span class="hljs-type">uint64_t</span>*)data + <span class="hljs-number">3</span>), <span class="hljs-number">0xE</span>);<br>    DWORD magic = <span class="hljs-number">0x3CA7259D</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-type">uint32_t</span> tmp = *((<span class="hljs-type">uint32_t</span>*)data + i);<br>        *((<span class="hljs-type">uint32_t</span>*)data + i) = tmp - magic;<br>        magic ^= tmp;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DASCTF&#123;%s&#125;\n&quot;</span>, data);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//DASCTF&#123;6cc1e44811647d38a15017e389b3f704&#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Berkeley"><a href="#Berkeley" class="headerlink" title="Berkeley"></a>Berkeley</h2><p>第一次见ebpf程序，ida直接F5看的话，可以找到check_flag处</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205112441294.png" alt="image-20230205112441294"></p><p>但是最后比较的是fake_cipher，我猜这是设计的一个坑，这题没这么简单吧</p><p>比赛时是直接放弃了。结束后看到群友说string里面有源码</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230205112607326.png" alt="image-20230205112607326"></p><p>还真是有源码</p><p>加密过程如下，只不过暂时没有找到arr数组在哪。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[] =<br>&#123;<br>  <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x20</span>,<br>  <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xB0</span>,<br>  <span class="hljs-number">0x33</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xFF</span>,<br>  <span class="hljs-number">0x90</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6C</span>,<br>  <span class="hljs-number">0x45</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x01</span>,<br>  <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xC5</span>,<br>  <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xAD</span>,<br>  <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xA8</span>,<br>  <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x9D</span>,<br>  <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x41</span>,<br>  <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x73</span>,<br>  <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x1D</span>,<br>  <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x07</span>,<br>  <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x46</span>,<br>  <span class="hljs-number">0x93</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x0E</span>,<br>  <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xC3</span>,<br>  <span class="hljs-number">0x42</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xBC</span>,<br>  <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x88</span>,<br>  <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x84</span>,<br>  <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x15</span>,<br>  <span class="hljs-number">0x92</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xBE</span>,<br>  <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xA6</span>,<br>  <span class="hljs-number">0x66</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xD9</span>,<br>  <span class="hljs-number">0x81</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x83</span>,<br>  <span class="hljs-number">0x35</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x14</span>,<br>  <span class="hljs-number">0x72</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x0A</span><br>&#125;;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> cipher[] =<br>&#123;<br>  <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>,<br>  <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x4B</span>,<br>  <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x41</span>,<br>  <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x13</span>,<br>  <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xA2</span>,<br>  <span class="hljs-number">0x66</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x30</span>,<br>  <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x01</span>,<br>  <span class="hljs-number">0x22</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xB8</span>,<br>  <span class="hljs-number">0x46</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xBB</span>,<br>  <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x92</span>,<br>  <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x83</span>,<br>  <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x1D</span>,<br>  <span class="hljs-number">0x59</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xEB</span>,<br>  <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x7C</span>,<br>  <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x52</span>,<br>  <span class="hljs-number">0x98</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xBC</span>,<br>  <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x36</span>,<br>  <span class="hljs-number">0x97</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xD1</span>,<br>  <span class="hljs-number">0x77</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x94</span>,<br>  <span class="hljs-number">0x56</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xC2</span>,<br>  <span class="hljs-number">0x99</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x37</span>,<br>  <span class="hljs-number">0x58</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xB6</span>,<br>  <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xDE</span>,<br>  <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x7B</span>,<br>  <span class="hljs-number">0x22</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x34</span>,<br>  <span class="hljs-number">0xA7</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x9F</span><br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br><span class="hljs-type">char</span> flag[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> output[<span class="hljs-number">256</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> uc1 = flag[i / <span class="hljs-number">8</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> uc2 = ~(flag[i / <span class="hljs-number">8</span>] + arr[i / <span class="hljs-number">8</span>]);<br>output[i] = key[uc1 ^ uc2];<br>output[i] == cipher[i];<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>快开学了，要准备考试了，暂时把这个坑留着吧，后面会补上</p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>西湖论剑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win32 notes</title>
    <link href="/2023/01/22/win32%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/01/22/win32%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Win32学习笔记"><a href="#Win32学习笔记" class="headerlink" title="Win32学习笔记"></a>Win32学习笔记</h1><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122154938085.png" alt="image-20230122154938085"></p><p>句柄是找到内存的东西，但是不是指针</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122155356061.png" alt="image-20230122155356061"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122161906318.png" alt="image-20230122161906318"></p><h1 id="窗口的创建过程"><a href="#窗口的创建过程" class="headerlink" title="窗口的创建过程"></a>窗口的创建过程<img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122162718704.png" alt="image-20230122162718704"></h1><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122174731702.png" alt="image-20230122174731702"></p><h3 id="什么是窗口类"><a href="#什么是窗口类" class="headerlink" title="什么是窗口类"></a>什么是窗口类</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122175858207.png" alt="image-20230122175858207"></p><h3 id="窗口类的分类"><a href="#窗口类的分类" class="headerlink" title="窗口类的分类"></a>窗口类的分类</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122180316114.png" alt="image-20230122180316114"></p><h4 id="系统窗口类"><a href="#系统窗口类" class="headerlink" title="系统窗口类"></a>系统窗口类</h4><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122180614451.png" alt="image-20230122180614451"></p><p>全局及局部窗口类</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122181129189.png" alt="image-20230122181129189"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122181354957.png" alt="image-20230122181354957"></p><h5 id="style窗口类风格"><a href="#style窗口类风格" class="headerlink" title="style窗口类风格"></a>style窗口类风格</h5><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122181727375.png" alt="image-20230122181727375"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122182029302.png" alt="image-20230122182029302"></p><h4 id="窗口创建的全部过程"><a href="#窗口创建的全部过程" class="headerlink" title="窗口创建的全部过程"></a>窗口创建的全部过程</h4><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230122203905094.png" alt="image-20230122203905094"></p><p>创建子窗口</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123112749247.png" alt="image-20230123112749247"></p><h3 id="消息的概念和作用"><a href="#消息的概念和作用" class="headerlink" title="消息的概念和作用"></a>消息的概念和作用</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123113406565.png" alt="image-20230123113406565"></p><h3 id="窗口处理函数原型"><a href="#窗口处理函数原型" class="headerlink" title="窗口处理函数原型"></a>窗口处理函数原型</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123120856547.png" alt="image-20230123120856547"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123121514800.png" alt="image-20230123121514800"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123122145536.png" alt="image-20230123122145536"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123122400229.png" alt="image-20230123122400229"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123122809069.png" alt="image-20230123122809069"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123123640262.png" alt="image-20230123123640262"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123124718943.png" alt="image-20230123124718943"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123125847325.png" alt="image-20230123125847325"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230123131326621.png" alt="image-20230123131326621"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124100340267.png" alt="image-20230124100340267"></p><h1 id="Windows消息机制"><a href="#Windows消息机制" class="headerlink" title="Windows消息机制"></a>Windows消息机制</h1><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124101712444.png" alt="image-20230124101712444"></p><h3 id="消息分类"><a href="#消息分类" class="headerlink" title="消息分类"></a>消息分类</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124103029269.png" alt="image-20230124103029269"></p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124112627767.png" alt="image-20230124112627767"></p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124121625305.png" alt="image-20230124121625305"></p><h3 id="消息和消息队列的关系"><a href="#消息和消息队列的关系" class="headerlink" title="消息和消息队列的关系"></a>消息和消息队列的关系</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124122627649.png" alt="image-20230124122627649"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124123400453.png" alt="image-20230124123400453"></p><p>WM_CREATE必须不能进队列</p><p>消息本身没有进队列的属性</p><h3 id="深谈-GetMessage"><a href="#深谈-GetMessage" class="headerlink" title="深谈**GetMessage**"></a>深谈**<code>GetMessage</code>**</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124124427567.png" alt="image-20230124124427567"></p><h3 id="WM-PAINT消息"><a href="#WM-PAINT消息" class="headerlink" title="WM_PAINT消息"></a>WM_PAINT消息</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124124452109.png" alt="image-20230124124452109"></p><p>产生WM_SIZE消息，即窗口大小有变化，就是产生WM_PAINT消息</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124125804110.png" alt="image-20230124125804110"></p><h4 id="绘图顺序"><a href="#绘图顺序" class="headerlink" title="绘图顺序"></a>绘图顺序</h4><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124125824925.png" alt="image-20230124125824925"></p><h2 id="键盘消息"><a href="#键盘消息" class="headerlink" title="键盘消息"></a>键盘消息</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124130252242.png" alt="image-20230124130252242"></p><h3 id="字符消息-WM-CHAR"><a href="#字符消息-WM-CHAR" class="headerlink" title="字符消息(WM_CHAR)"></a>字符消息(WM_CHAR)</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124163104073.png" alt="image-20230124163104073"></p><h2 id="鼠标消息"><a href="#鼠标消息" class="headerlink" title="鼠标消息"></a>鼠标消息</h2><h3 id="鼠标消息分类"><a href="#鼠标消息分类" class="headerlink" title="鼠标消息分类"></a>鼠标消息分类</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124164532032.png" alt="image-20230124164532032"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124164714746.png" alt="image-20230124164714746"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124170524610.png" alt="image-20230124170524610"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124171638625.png" alt="image-20230124171638625"></p><h2 id="定时器消息"><a href="#定时器消息" class="headerlink" title="定时器消息"></a>定时器消息</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124172534836.png" alt="image-20230124172534836"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124174152948.png" alt="image-20230124174152948"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124174323377.png" alt="image-20230124174323377"></p><h2 id="菜单资源"><a href="#菜单资源" class="headerlink" title="菜单资源"></a>菜单资源</h2><h3 id="菜单分类"><a href="#菜单分类" class="headerlink" title="菜单分类"></a>菜单分类</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124175636506.png" alt="image-20230124175636506"></p><h3 id="资源相关"><a href="#资源相关" class="headerlink" title="资源相关"></a>资源相关</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124180003247.png" alt="image-20230124180003247"></p><h4 id="菜单资源-1"><a href="#菜单资源-1" class="headerlink" title="菜单资源"></a>菜单资源</h4><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124180158461.png" alt="image-20230124180158461"></p><p> <img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124204406485.png" alt="image-20230124204406485"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124204907452.png" alt="image-20230124204907452"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124210505578.png" alt="image-20230124210505578"></p><h4 id="图标资源"><a href="#图标资源" class="headerlink" title="图标资源"></a>图标资源</h4><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124212231399.png" alt="image-20230124212231399"></p><h4 id="光标资源"><a href="#光标资源" class="headerlink" title="光标资源"></a>光标资源</h4><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124213857765.png" alt="image-20230124213857765"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230124214130464.png" alt="image-20230124214130464"></p><h4 id="字符串资源"><a href="#字符串资源" class="headerlink" title="字符串资源"></a>字符串资源</h4><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230125114228936.png" alt="image-20230125114228936"></p><h4 id="加速键资源"><a href="#加速键资源" class="headerlink" title="加速键资源"></a>加速键资源</h4><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230125115724192.png" alt="image-20230125115724192"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230125122357735.png" alt="image-20230125122357735"></p><h1 id="绘图编程"><a href="#绘图编程" class="headerlink" title="绘图编程"></a>绘图编程</h1><h2 id="绘图基础"><a href="#绘图基础" class="headerlink" title="绘图基础"></a>绘图基础</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230125122907737.png" alt="image-20230125122907737"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230125124043205.png" alt="image-20230125124043205"></p><h2 id="基本图形绘制"><a href="#基本图形绘制" class="headerlink" title="基本图形绘制"></a>基本图形绘制</h2><h3 id="点"><a href="#点" class="headerlink" title="点"></a>点</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230125124451447.png" alt="image-20230125124451447"></p><h3 id="线"><a href="#线" class="headerlink" title="线"></a>线</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230125125721178.png" alt="image-20230125125721178"></p><p>封闭图形：矩形&#x2F;圆形</p><h1 id="GDI绘图对象"><a href="#GDI绘图对象" class="headerlink" title="GDI绘图对象"></a>GDI绘图对象</h1><h2 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230125175856111.png" alt="image-20230125175856111"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230125180352693.png" alt="image-20230125180352693"></p><h2 id="画刷"><a href="#画刷" class="headerlink" title="画刷"></a>画刷</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230125181321017.png" alt="image-20230125181321017"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126181713918.png" alt="image-20230126181713918"></p><h1 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h1><h2 id="位图绘制"><a href="#位图绘制" class="headerlink" title="位图绘制"></a>位图绘制</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126185516736.png" alt="image-20230126185516736"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126190850101.png" alt="image-20230126190850101"></p><p><code>SRCCOPY</code>：原样呈像（如果不用二维图像转换的话，用他就行了）</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126191339287.png" alt="image-20230126191339287"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126191344844.png" alt="image-20230126191344844"></p><h1 id="文本绘制"><a href="#文本绘制" class="headerlink" title="文本绘制"></a>文本绘制</h1><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126192928423.png" alt="image-20230126192928423"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126194535597.png" alt="image-20230126194535597"></p><p>OPAQUE不透明&#x2F;TRANSPARENT透明</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126195104623.png" alt="image-20230126195104623"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126195441639.png" alt="image-20230126195441639"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126195446469.png" alt="image-20230126195446469"></p><h1 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h1><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126200750175.png" alt="image-20230126200750175"></p><h2 id="对话框原理"><a href="#对话框原理" class="headerlink" title="对话框原理"></a>对话框原理</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230126200825943.png" alt="image-20230126200825943"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127153132409.png" alt="image-20230127153132409"></p><h2 id="模式对话框"><a href="#模式对话框" class="headerlink" title="模式对话框"></a>模式对话框</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127153432419.png" alt="image-20230127153432265"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127155113249.png" alt="image-20230127155113249"></p><h2 id="无模式对话框"><a href="#无模式对话框" class="headerlink" title="无模式对话框"></a>无模式对话框</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127160722392.png" alt="image-20230127160722392"></p><h1 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127161058679.png" alt="image-20230127161058679"></p><h2 id="C语言静态库"><a href="#C语言静态库" class="headerlink" title="C语言静态库"></a>C语言静态库</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127161309046.png" alt="image-20230127161309046"></p><h2 id="c-静态库"><a href="#c-静态库" class="headerlink" title="c++静态库"></a>c++静态库</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127163023578.png" alt="image-20230127163023578"></p><h4 id="C语言调用C静态库不用提前函数声明，而C-需要"><a href="#C语言调用C静态库不用提前函数声明，而C-需要" class="headerlink" title="C语言调用C静态库不用提前函数声明，而C++需要"></a>C语言调用C静态库不用提前函数声明，而C++需要</h4><p>extern “C” 函数x声明</p><p>告诉C++编译器，函数x按C语言标准编译，别用C++编译器改名字</p><p>例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Clib_add</span><span class="hljs-params">(<span class="hljs-type">int</span> add1, <span class="hljs-type">int</span> add2)</span></span>;<br></code></pre></td></tr></table></figure><h1 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h1><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127164018658.png" alt="image-20230127164018658"></p><h2 id="动态库的创建"><a href="#动态库的创建" class="headerlink" title="动态库的创建"></a>动态库的创建</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127164623597.png" alt="image-20230127164623597"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127165839631.png" alt="image-20230127165839631"></p><h2 id="动态库的使用"><a href="#动态库的使用" class="headerlink" title="动态库的使用"></a>动态库的使用</h2><h3 id="隐式链接"><a href="#隐式链接" class="headerlink" title="隐式链接"></a>隐式链接</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127165936425.png" alt="image-20230127165936425"></p><h3 id="显式链接"><a href="#显式链接" class="headerlink" title="显式链接"></a>显式链接</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127170028743.png" alt="image-20230127170028743"></p><h2 id="动态库中封装类"><a href="#动态库中封装类" class="headerlink" title="动态库中封装类"></a>动态库中封装类</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127200909083.png" alt="image-20230127200909083"></p><h1 id="Windows线程开发"><a href="#Windows线程开发" class="headerlink" title="Windows线程开发"></a>Windows线程开发</h1><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127202934923.png" alt="image-20230127202934923"></p><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127203951550.png" alt="image-20230127203951550"></p><h3 id="线程挂起-x2F-销毁"><a href="#线程挂起-x2F-销毁" class="headerlink" title="线程挂起&#x2F;销毁"></a>线程挂起&#x2F;销毁</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127205553898.png" alt="image-20230127205553898"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127210109493.png" alt="image-20230127210109493"></p><h3 id="线程相关操作"><a href="#线程相关操作" class="headerlink" title="线程相关操作"></a>线程相关操作</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127210329421.png" alt="image-20230127210329421"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230127210828530.png" alt="image-20230127210828530"></p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><h2 id="原子锁"><a href="#原子锁" class="headerlink" title="原子锁"></a>原子锁</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230128101705767.png" alt="image-20230128101705767"></p><h2 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230128101850125.png" alt="image-20230128101850125"></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>在任何一个时间点上，只有一个线程能够拥有互斥</p><p>当任何线程都不拥有互斥，互斥句柄有信号；当有一个线程拥有互斥，互斥句柄无信号</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230128102309552.png" alt="image-20230128102309552"></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230128110337604.png" alt="image-20230128110337604"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230128123118709.png" alt="image-20230128123118709"></p><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230128124853274.png" alt="image-20230128124853274"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230128125227464.png" alt="image-20230128125227464"></p>]]></content>
    
    
    <categories>
      
      <category>win32 notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>win32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023HWS-Winter</title>
    <link href="/2023/01/10/2023HWS-Winter/"/>
    <url>/2023/01/10/2023HWS-Winter/</url>
    
    <content type="html"><![CDATA[<h1 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h1><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108202311128.png" alt="image-20230108202311128"></p><p>随后是调用了a().check()函数判断输入的是否正确</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108204735942.png" alt="image-20230108204735942"></p><p>直接写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>a = <span class="hljs-string">&quot;a214bmVqaXlieHpjaXhuc2p4bm5hc20=&quot;</span><br>c = base64.b64decode(a.encode(<span class="hljs-string">&quot;ascii&quot;</span>))<br>byte = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    byte.append(c[i])<br>    byte[i] = (byte[i] &gt;&gt; <span class="hljs-number">3</span>)<br>    byte[i] = (byte[i] ^ <span class="hljs-number">102</span>)<br>    byte[i] = (byte[i] - <span class="hljs-number">10</span>)<br>    byte[i] = <span class="hljs-built_in">chr</span>(byte[i])<br><span class="hljs-built_in">print</span>(byte)<br><br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108204852793.png" alt="image-20230108204852793"></p><p>可以看到最后的结果并不正确，所以这个a.check并不是最终的判断函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108204958728.png" alt="image-20230108204958728"></p><p>看到在调用a.check之前先是调用了b.a()这个函数，跟进查看</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108205115919.png" alt="image-20230108205115919"></p><p>看到有个doDex注入，感觉是有鬼，但是具体找不到在哪里</p><p>漫无目的的查看com.me.creackme下的所有类</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108205255560.png" alt="image-20230108205255560"></p><p>看到C这个类有进行打开enc文件然后进行异或的操作，解压apk找到了这个enc文件</p><p>写脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">src_file, dest_file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(src_file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f_src:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(dest_file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f_dest:<br>            byte = f_src.read(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">while</span> byte:<br>                f_dest.write(<span class="hljs-built_in">bytes</span>([byte[<span class="hljs-number">0</span>] ^ <span class="hljs-number">52</span>]))<br>                byte = f_src.read(<span class="hljs-number">1</span>)<br><br>decrypt(<span class="hljs-string">&#x27;enc&#x27;</span>, <span class="hljs-string">&#x27;decrypted.dex&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>然后用jadx打开在同级目录下生成的decrypted.dex</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108205450599.png" alt="image-20230108205450599"></p><p>这里是AES加密，而且这个类的名字也是a，猜测是b类中的Dex注入了这个decrypted.dex到原来的文件里，感觉是相当于hook了a类，实际上的a类是这里的AES加密</p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> codecs<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">key, iv, enc</span>):<br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    <span class="hljs-keyword">return</span> cipher.decrypt(enc)<br><br>key = <span class="hljs-string">b&#x27;FV8aOaQiak6txP09&#x27;</span><br>iv = <span class="hljs-string">b&#x27;2Aq7SR5268ZzbouE&#x27;</span><br>enc = base64.b64decode(<span class="hljs-string">&#x27;9Kz3YlSdD3lB9KoxeKxXQT4YOEqJTVIuNU+IjW4iFQzjpU+NikF/UqCOsL+1g4eA&#x27;</span>)<br><br>decrypted = decrypt(key, iv, enc)<br><span class="hljs-built_in">print</span>(decrypted.decode())<br><span class="hljs-comment">#flag&#123;076a554cef6742b402d74c1013dadde9&#125;</span><br></code></pre></td></tr></table></figure><p>所以最后</p><p>flag{076a554cef6742b402d74c1013dadde9}</p><h1 id="sound-from-somewhere"><a href="#sound-from-somewhere" class="headerlink" title="sound from somewhere"></a>sound from somewhere</h1><p>wav文件，用Audacity打开之后发现是波形</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230107214933334.png" alt="image-20230107214933334"></p><p>经过一番搜索，最终定位到了sstv</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230107215344790.png" alt="image-20230107215344790"></p><p>下载虚拟声卡，然后Audio Repeater设置</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230107215433802.png" alt="image-20230107215433802"></p><p>Robot36，然后播放</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230107215626254.png" alt="image-20230107215626254"></p><p>得到flag</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230107215847248.png" alt="image-20230107215847248"></p><p>所以flag就是flag{OuTer_Wilds}</p><h1 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h1><p>一眼顶针，主要的加密逻辑是XTEA</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108204636076.png" alt="image-20230108204636076"></p><p>在imports里面找到了memcmp函数，然后在左边搜索，定位到密文比较的地方</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108204022997.png" alt="image-20230108204022997"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108204057103.png" alt="image-20230108204057103"></p><p>由于是调用了4次XTEA函数加密，XTEA每次是两组数据进行轮换加密，所以在这里是DWORD类型，得到下面的八组数据</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108204149879.png" alt="image-20230108204149879"></p><p>找到了密文，接下来就是寻找密钥</p><p>IDA动态调试</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108204358783.png" alt="image-20230108204358783"></p><p>可以得到key</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0x29</span>, <span class="hljs-number">0x4823</span>, <span class="hljs-number">0x18BE</span>, <span class="hljs-number">0x6784</span> &#125;;<br></code></pre></td></tr></table></figure><p>由于这个XTEA只是内层循环拆开了，所以实际上应该并没有什么魔改</p><p>直接上脚本尝试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_rounds, <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>])</span> </span>&#123;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], delta = <span class="hljs-number">0x9E3779B9</span>, sum = delta * num_rounds;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num_rounds; i++) &#123;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        sum -= delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0;<br>    v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-type">uint32_t</span> unk_7FF6C7D2504A[<span class="hljs-number">8</span>] = &#123;<br>        <span class="hljs-number">0xC0B29B34</span>, <span class="hljs-number">0xEF30AF6A</span>, <span class="hljs-number">0x98CCB238</span>, <span class="hljs-number">0x85B6F195</span>, <span class="hljs-number">0xA2480685</span>, <span class="hljs-number">0xA63D9B59</span>, <span class="hljs-number">0xF191C71E</span>, <span class="hljs-number">0x6790767B</span><br>    &#125;;<br>    <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0x29</span>, <span class="hljs-number">0x4823</span>, <span class="hljs-number">0x18BE</span>, <span class="hljs-number">0x6784</span> &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r = <span class="hljs-number">32</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">decrypt</span>(r, unk_7FF6C7D2504A + i , key);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, *((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)unk_7FF6C7D2504A + i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//9c3206a3942e0835dabaa182128d60bc</span><br></code></pre></td></tr></table></figure><p>然后检查</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230108204546769.png" alt="image-20230108204546769"></p><p>所以得到flag{9c3206a3942e0835dabaa182128d60bc}</p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>华为硬件安全沙龙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022RCTF</title>
    <link href="/2022/12/16/2022RCTF/"/>
    <url>/2022/12/16/2022RCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2022RCTF-RE-部分wp"><a href="#2022RCTF-RE-部分wp" class="headerlink" title="2022RCTF RE 部分wp"></a>2022RCTF RE 部分wp</h1><h2 id="CheckYourKey"><a href="#CheckYourKey" class="headerlink" title="CheckYourKey"></a>CheckYourKey</h2><p>逆向签到题，apk没什么好说的，就是调用so库里面的ooxx文件对输入进行检查，直接看so库</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216194242927.png" alt="image-20221216194242927"></p><p>在函数栏中直接搜索ooxx，定位到</p><h3 id="Java-com-ctf-CheckYourKey-MainActivity-ooxx函数"><a href="#Java-com-ctf-CheckYourKey-MainActivity-ooxx函数" class="headerlink" title="Java_com_ctf_CheckYourKey_MainActivity_ooxx函数"></a>Java_com_ctf_CheckYourKey_MainActivity_ooxx函数</h3><p>定位到这里</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216194537837.png" alt="image-20221216194537837"></p><p>第227行和第231行的函数分别是base58,base64加密</p><h4 id="base58函数"><a href="#base58函数" class="headerlink" title="base58函数"></a>base58函数</h4><p>可以看到这里的(138 * a2 &#x2F; 0x64) + 2 和 div(quot_low + (v14[–v8] &lt;&lt; 8), 58)，所以猜测是base58加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int8 *__fastcall <span class="hljs-title function_">sub_F7DC</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">unsigned</span> __int64 a2)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// x11</span><br>  __int64 v3; <span class="hljs-comment">// x10</span><br>  <span class="hljs-type">bool</span> v5; <span class="hljs-comment">// [xsp+18h] [xbp-78h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [xsp+30h] [xbp-60h]</span><br>  <span class="hljs-type">div_t</span> v7; <span class="hljs-comment">// [xsp+38h] [xbp-58h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v8; <span class="hljs-comment">// [xsp+40h] [xbp-50h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v9; <span class="hljs-comment">// [xsp+48h] [xbp-48h]</span><br>  <span class="hljs-type">int</span> quot_low; <span class="hljs-comment">// [xsp+54h] [xbp-3Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v11; <span class="hljs-comment">// [xsp+58h] [xbp-38h]</span><br>  <span class="hljs-type">unsigned</span> __int64 j; <span class="hljs-comment">// [xsp+60h] [xbp-30h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v13; <span class="hljs-comment">// [xsp+60h] [xbp-30h]</span><br>  <span class="hljs-type">unsigned</span> __int8 *v14; <span class="hljs-comment">// [xsp+68h] [xbp-28h]</span><br>  <span class="hljs-type">unsigned</span> __int64 i; <span class="hljs-comment">// [xsp+78h] [xbp-18h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; !*(_BYTE *)(a1 + i); ++i )<br>    ;<br>  v14 = (<span class="hljs-type">unsigned</span> __int8 *)<span class="hljs-built_in">malloc</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(<span class="hljs-number">138</span> * a2 / <span class="hljs-number">0x64</span>) + <span class="hljs-number">2</span>);<br>  <span class="hljs-built_in">memset</span>(v14, <span class="hljs-number">0</span>, <span class="hljs-number">138</span> * a2 / <span class="hljs-number">0x64</span> + <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0LL</span>; j &lt; i; ++j )<br>  &#123;<br>    v2 = j;<br>    v14[v2] = *(_BYTE *)base58_table;<br>  &#125;<br>  v11 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">while</span> ( j &lt; a2 )<br>  &#123;<br>    v3 = j++;<br>    quot_low = *(<span class="hljs-type">unsigned</span> __int8 *)(a1 + v3);<br>    v9 = <span class="hljs-number">0LL</span>;<br>    v8 = <span class="hljs-number">138</span> * a2 / <span class="hljs-number">0x64</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( quot_low || (v5 = <span class="hljs-number">0</span>, v9 &lt; v11) )<br>        v5 = v8 != <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( !v5 )<br>        <span class="hljs-keyword">break</span>;<br>      v7 = div(quot_low + (v14[--v8] &lt;&lt; <span class="hljs-number">8</span>), <span class="hljs-number">58</span>);<br>      v14[v8] = v7.rem;<br>      quot_low = LOBYTE(v7.quot);<br>      ++v9;<br>    &#125;<br>    v11 = v9;<br>  &#125;<br>  v13 = i;<br>  v6 = <span class="hljs-number">138</span> * a2 / <span class="hljs-number">0x64</span> + <span class="hljs-number">1</span> - v11 - i;<br>  <span class="hljs-keyword">while</span> ( v13 &lt; i + v11 )<br>  &#123;<br>    v14[v13] = *((_BYTE *)base58_table + v14[v13 + v6]);<br>    ++v13;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v6 )<br>    v14[v13] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> v14;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216194931330.png" alt="image-20221216194931330"></p><p>可以找到长度为58的表，但是内容不太对，X找交叉引用</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216195017296.png" alt="image-20221216195017296"></p><p>找到这里有异或的操作</p><p>直接上脚本测试一下，得到了base58的码表，确定这里是base58加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">byte_41010 = [<br>  <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xEE</span>, <br>  <span class="hljs-number">0xED</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xE3</span>, <br>  <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xF8</span>, <br>  <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xC8</span>, <br>  <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xDD</span>, <br>  <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x00</span>, <br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br>table = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">58</span>):<br>    byte_41010[i] ^= <span class="hljs-number">0xAF</span><br>    table+=<span class="hljs-built_in">chr</span>(byte_41010[i])<br><span class="hljs-built_in">print</span>(table)<br><span class="hljs-comment">#123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</span><br></code></pre></td></tr></table></figure><h4 id="base64函数"><a href="#base64函数" class="headerlink" title="base64函数"></a>base64函数</h4><p>这里的就很容易看出来是base64了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">sub_13788</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a2, __int64 a3)</span><br>&#123;<br>  __int64 v3; <span class="hljs-comment">// x13</span><br>  __int64 v4; <span class="hljs-comment">// x14</span><br>  __int64 v5; <span class="hljs-comment">// x16</span><br>  __int64 v6; <span class="hljs-comment">// x16</span><br>  __int64 v7; <span class="hljs-comment">// x13</span><br>  __int64 v8; <span class="hljs-comment">// x13</span><br>  __int64 v9; <span class="hljs-comment">// x13</span><br>  __int64 v10; <span class="hljs-comment">// x13</span><br>  __int64 v11; <span class="hljs-comment">// x13</span><br>  <span class="hljs-type">unsigned</span> __int8 v13; <span class="hljs-comment">// [xsp+2Ah] [xbp-26h]</span><br>  <span class="hljs-type">unsigned</span> __int8 v14; <span class="hljs-comment">// [xsp+2Bh] [xbp-25h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v15; <span class="hljs-comment">// [xsp+2Ch] [xbp-24h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v16; <span class="hljs-comment">// [xsp+2Ch] [xbp-24h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v17; <span class="hljs-comment">// [xsp+2Ch] [xbp-24h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v18; <span class="hljs-comment">// [xsp+2Ch] [xbp-24h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [xsp+30h] [xbp-20h]</span><br>  <span class="hljs-type">int</span> v20; <span class="hljs-comment">// [xsp+34h] [xbp-1Ch]</span><br><br>  v20 = <span class="hljs-number">0</span>;<br>  v13 = <span class="hljs-number">0</span>;<br>  v15 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; a2; ++i )<br>  &#123;<br>    v14 = *(_BYTE *)(a1 + i);<br>    <span class="hljs-keyword">if</span> ( v20 )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v20 == <span class="hljs-number">1</span> )<br>      &#123;<br>        v20 = <span class="hljs-number">2</span>;<br>        v4 = v15++;<br>        *(_BYTE *)(a3 + v4) = base64_table[(<span class="hljs-number">16</span> * (v13 &amp; <span class="hljs-number">3</span>)) | ((<span class="hljs-type">int</span>)v14 &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xF</span>];<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v20 = <span class="hljs-number">0</span>;<br>        v5 = v15;<br>        v16 = v15 + <span class="hljs-number">1</span>;<br>        *(_BYTE *)(a3 + v5) = base64_table[(<span class="hljs-number">4</span> * (v13 &amp; <span class="hljs-number">0xF</span>)) | ((<span class="hljs-type">int</span>)v14 &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">3</span>];<br>        v6 = v16;<br>        v15 = v16 + <span class="hljs-number">1</span>;<br>        *(_BYTE *)(a3 + v6) = base64_table[v14 &amp; <span class="hljs-number">0x3F</span>];<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v20 = <span class="hljs-number">1</span>;<br>      v3 = v15++;<br>      *(_BYTE *)(a3 + v3) = base64_table[((<span class="hljs-type">int</span>)v14 &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x3F</span>];<br>    &#125;<br>    v13 = v14;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v20 == <span class="hljs-number">1</span> )<br>  &#123;<br>    v7 = v15;<br>    v17 = v15 + <span class="hljs-number">1</span>;<br>    *(_BYTE *)(a3 + v7) = base64_table[<span class="hljs-number">16</span> * (v13 &amp; <span class="hljs-number">3</span>)];<br>    v8 = v17++;<br>    *(_BYTE *)(a3 + v8) = <span class="hljs-number">61</span>;<br>    v9 = v17;<br>    v15 = v17 + <span class="hljs-number">1</span>;<br>    *(_BYTE *)(a3 + v9) = <span class="hljs-number">61</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v20 == <span class="hljs-number">2</span> )<br>  &#123;<br>    v10 = v15;<br>    v18 = v15 + <span class="hljs-number">1</span>;<br>    *(_BYTE *)(a3 + v10) = base64_table[<span class="hljs-number">4</span> * (v13 &amp; <span class="hljs-number">0xF</span>)];<br>    v11 = v18;<br>    v15 = v18 + <span class="hljs-number">1</span>;<br>    *(_BYTE *)(a3 + v11) = <span class="hljs-number">61</span>;<br>  &#125;<br>  *(_BYTE *)(a3 + v15) = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> v15;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216194847744.png" alt="image-20221216194847744"></p><p>可以看出来是换表的base64加密</p><p>在该函数的最后找到strcmp函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216195438199.png" alt="image-20221216195438199"></p><p>可以知道最后的密文就是asc_41120，x交叉引用找到了另外的调用</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216195529903.png" alt="image-20221216195529903"></p><p>先异或后解密，但是结果不对，猜测有其他的加密</p><p>利用findcrypt找到了AES加密，直接定位到该函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216195605066.png" alt="image-20221216195605066"></p><h3 id="sub-14FC0函数"><a href="#sub-14FC0函数" class="headerlink" title="sub_14FC0函数"></a>sub_14FC0函数</h3><p>该函数的整体逻辑和上面的ooxx函数十分相似，所以直接定位到</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216195822846.png" alt="image-20221216195822846"></p><p>整体的加密逻辑就是先AES后base58最后base64</p><p>AES的key刚好就是该函数的第二个参数，直接提取出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[] =<br>&#123;<br>  <span class="hljs-number">0x98</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x92</span>, <br>  <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>刚才在找asc_41120的交叉引用是定位到了一个函数，在那里同时也找到了key的处理，直接输出得到key</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216200126879.png" alt="image-20221216200126879"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _BYTE  unsigned char</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[] =<br>&#123;<br>  <span class="hljs-number">0x98</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x92</span>,<br>  <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span><br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (_BYTE)~key[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//goodlucksmartman</span><br></code></pre></td></tr></table></figure><p>最后比较的密文也不一样，但是同样给要先经过异或处理</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216201150277.png" alt="image-20221216201150277"></p><p>最后是从NU1L那里学来的python脚本，也可以用cyberchef直接解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>b58 = <span class="hljs-string">&#x27;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base58decode</span>(<span class="hljs-params">s</span>): <span class="hljs-comment"># 传⼊的参数是加密后的字符串</span><br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>        result = result * <span class="hljs-number">58</span> + b58.find(c)<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-comment"># print(b58decode(&quot;56fkoP8KhwCf3v7CEz&quot;))</span><br>changed_base64 = <span class="hljs-string">&quot;+/EFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCD&quot;</span> <span class="hljs-comment">#</span><br><br>base = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span> <span class="hljs-comment"># </span><br><span class="hljs-comment"># 标准码表是从(A-Z)+(a-z)+(0-9)+(+/)</span><br>enflag = <span class="hljs-string">&quot;SVTsfWzSYGPWdYXodVbvbni6doHzSi==&quot;</span> <span class="hljs-comment"># ⽐较数据</span><br>right_enflag = <span class="hljs-string">&#x27;&#x27;</span><br>enflag1 = <span class="hljs-string">&#x27;&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enflag)):<br>    right_enflag += base[changed_base64.find(enflag[i])]<br><span class="hljs-comment"># print(right_enflag)</span><br>enflag1 = base64.b64decode(right_enflag)<br><span class="hljs-built_in">print</span>(enflag1)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(base58decode(<span class="hljs-string">&quot;A4juLPXCTmefm6mfX8naqB&quot;</span>)))<br>data = binascii.unhexlify(<span class="hljs-built_in">hex</span>(base58decode(<span class="hljs-string">&quot;A4juLPXCTmefm6mfX8naqB&quot;</span>))[<span class="hljs-number">2</span>:].encode(<span class="hljs-string">&quot;utf8&quot;</span>))<br>mode = AES.MODE_ECB<br>key = <span class="hljs-built_in">list</span>(<span class="hljs-string">b&#x27;goodlucksmartman&#x27;</span>)<br>cryptos = AES.new(<span class="hljs-built_in">bytes</span>(key), mode)<br>flag = cryptos.decrypt(<span class="hljs-built_in">bytes</span>(data))<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#flag&#123;rtyhgf!@#$&#125;</span><br></code></pre></td></tr></table></figure><h2 id="HuoWang"><a href="#HuoWang" class="headerlink" title="HuoWang"></a>HuoWang</h2><p>一个迷宫题</p><p>程序的符号表是被去除了，但是群里大哥看出来是unicorn写的了</p><p>使用bandiff恢复一下符号表，顺便搜索了一下各个函数的功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  __int64 v3; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+10h] [rbp-150h] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+14h] [rbp-14Ch]</span><br>  <span class="hljs-type">int</span> len; <span class="hljs-comment">// [rsp+18h] [rbp-148h]</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+1Ch] [rbp-144h]</span><br>  __int64 uc; <span class="hljs-comment">// [rsp+20h] [rbp-140h] BYREF</span><br>  __int64 v10[<span class="hljs-number">3</span>]; <span class="hljs-comment">// [rsp+28h] [rbp-138h] BYREF</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [rsp+40h] [rbp-120h]</span><br>  <span class="hljs-type">char</span> input[<span class="hljs-number">264</span>]; <span class="hljs-comment">// [rsp+50h] [rbp-110h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v13; <span class="hljs-comment">// [rsp+158h] [rbp-8h]</span><br><br>  v13 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">scanf</span>((__int64)<span class="hljs-string">&quot;%s&quot;</span>, input);<br>  len = <span class="hljs-built_in">strlen</span>();<br>  v5 = <span class="hljs-number">0xFFFFF</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">6</span>; ++i )<br>    qword_19537E0[i] = &amp;test[i];<br>  uc_open(<span class="hljs-number">4u</span>, <span class="hljs-number">8</span>, &amp;uc);                          <span class="hljs-comment">// uc初始化</span><br>                                                <span class="hljs-comment">// (UC_ARCH_, UC_MODE_ARM, &amp;uc)</span><br>  uc_mem_map(uc, (__int64)&amp;dword_400000, <span class="hljs-number">0x200000</span>LL, <span class="hljs-number">7u</span>);<span class="hljs-comment">// 申请内存空间</span><br>                                                <span class="hljs-comment">// (uc, ADDRESS, 大小, UC_PROT_ALL)</span><br>  uc_mem_map(uc, <span class="hljs-number">0LL</span>, <span class="hljs-number">0x100000</span>LL, <span class="hljs-number">7u</span>);<br>  v10[<span class="hljs-number">1</span>] = <span class="hljs-number">0LL</span>;<br>  v10[<span class="hljs-number">2</span>] = <span class="hljs-number">0LL</span>;<br>  v11 = <span class="hljs-number">0</span>;<br>  uc_mem_write(uc, (__int64)&amp;qword_400080, (__int64)&amp;loc_145E010, <span class="hljs-number">0x7AA8</span>uLL);<span class="hljs-comment">// 将指令数据写入到模拟器内存</span><br>                                                <span class="hljs-comment">// (uc, ADDRESS, code, sizeof(code))</span><br>  v8 = uc_mem_write(uc, (__int64)&amp;loc_407B34, (__int64)input, len);<br>  v8 = uc_reg_write(uc, <span class="hljs-number">30</span>, (__int64)&amp;v5);      <span class="hljs-comment">// 第一个是uc类，</span><br>                                                <span class="hljs-comment">// 第二个就是我们要修改的寄存器常量，</span><br>                                                <span class="hljs-comment">// 第三个参数就是我们要修改的值，这个也是数组地址，和第二个参数一一对应</span><br>                                                <span class="hljs-comment">// 第四个就是要修改的个数</span><br>  v8 = uc_hook_add(uc, v10, <span class="hljs-number">2</span>, (__int64)sub_401FC5, <span class="hljs-number">0LL</span>, <span class="hljs-number">1LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0x2BB</span>, (<span class="hljs-type">int</span>)argv);<span class="hljs-comment">// //第一个参数是uc类</span><br>                                                <span class="hljs-comment">// 第二个参数是回调路径</span><br>                                                <span class="hljs-comment">// 第三个参数是hook类型，通过修改这个参数我们可以让不同时候来调用这个hook，</span><br>                                                <span class="hljs-comment">// 第四个参数就是hook函数，我们每次调用hook的时候要执行的函数，</span><br>                                                <span class="hljs-comment">// 第五个参数是hook函数里的user_data，也就是用户数据，</span><br>                                                <span class="hljs-comment">// 第六个参数是代码起始地址，</span><br>                                                <span class="hljs-comment">// 第七个参数是代码终止地址，从起始地址开始到终止地址的代码都会进行hook判断，然后根据hook类型来判断是否调用hook函数，如果起始地址大于终止地址，也就像这个样例一样，那么就会把整个范围认为是整个unicorn运行的代码范围</span><br>  v8 = uc_emu_start(uc, <span class="hljs-number">0x400119</span>LL, <span class="hljs-number">0x40016A</span>LL, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<span class="hljs-comment">// 模拟器从指定的地址开始运行，到指定的地址停止运行</span><br>  v8 = uc_emu_start(uc, <span class="hljs-number">0x40016A</span>LL, &amp;qword_4000D8, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>  uc_close(uc, <span class="hljs-number">0x40016A</span>LL, v3);<br>  maze((__int64)asc_18D7180, (__int64)input, len);<br>  <span class="hljs-keyword">if</span> ( check1 &amp;&amp; check2 )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>((__int64)<span class="hljs-string">&quot;GrandFather Dao, I&#x27;ve made it!(ohhhhh. The flag is RCTF&#123;(md5(your input))&#125;.&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( check1 || check2 )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>((__int64)<span class="hljs-string">&quot;Mom, I really can&#x27;t tell the difference!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>((__int64)<span class="hljs-string">&quot;CTF is fun! Jie Jie Jie&quot;</span>);<br>  &#125;<br>  result = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( __readfsqword(<span class="hljs-number">0x28</span>u) != v13 )<br>    sub_1404EA0();<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要的迷宫还是在maze函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">maze</span><span class="hljs-params">(__int64 a1, __int64 a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+24h] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+2Ch] [rbp-4h]</span><br><br>  v4 = <span class="hljs-number">0</span>;<br>  v5 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    result = i;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)i &gt;= a3 )<br>      <span class="hljs-keyword">break</span>;<br>    result = *(<span class="hljs-type">unsigned</span> __int8 *)((<span class="hljs-type">int</span>)i + a2);<br>    <span class="hljs-keyword">if</span> ( (_DWORD)result == <span class="hljs-string">&#x27;w&#x27;</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( !v4 )<br>        <span class="hljs-keyword">return</span> result;<br>      result = *(<span class="hljs-type">unsigned</span> __int8 *)(a1 + <span class="hljs-number">24LL</span> * v4 - <span class="hljs-number">24</span> + v5);<br>      <span class="hljs-keyword">if</span> ( (_BYTE)result != <span class="hljs-string">&#x27; &#x27;</span> )<br>        <span class="hljs-keyword">return</span> result;<br>      --v4;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *(<span class="hljs-type">unsigned</span> __int8 *)((<span class="hljs-type">int</span>)i + a2) &gt; <span class="hljs-number">0x77</span>u )<br>        <span class="hljs-keyword">goto</span> LABEL_20;<br>      <span class="hljs-keyword">if</span> ( (_DWORD)result == <span class="hljs-string">&#x27;s&#x27;</span> )<br>      &#123;<br>        result = *(<span class="hljs-type">unsigned</span> __int8 *)(a1 + <span class="hljs-number">24</span> * (v4 + <span class="hljs-number">1LL</span>) + v5);<br>        <span class="hljs-keyword">if</span> ( (_BYTE)result != <span class="hljs-string">&#x27; &#x27;</span> )<br>          <span class="hljs-keyword">return</span> result;<br>        ++v4;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( *(<span class="hljs-type">unsigned</span> __int8 *)((<span class="hljs-type">int</span>)i + a2) &gt; <span class="hljs-number">0x73</span>u )<br>          <span class="hljs-keyword">goto</span> LABEL_20;<br>        <span class="hljs-keyword">if</span> ( (_DWORD)result == <span class="hljs-string">&#x27;a&#x27;</span> )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( !v5 )<br>            <span class="hljs-keyword">return</span> result;<br>          result = *(<span class="hljs-type">unsigned</span> __int8 *)(a1 + <span class="hljs-number">24LL</span> * v4 + v5 - <span class="hljs-number">1</span>);<br>          <span class="hljs-keyword">if</span> ( (_BYTE)result != <span class="hljs-string">&#x27; &#x27;</span> )<br>            <span class="hljs-keyword">return</span> result;<br>          --v5;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          <span class="hljs-keyword">if</span> ( (_DWORD)result != <span class="hljs-string">&#x27;d&#x27;</span> )<br>LABEL_20:<br>            sub_13AF360(<span class="hljs-number">-1</span>);<br>          result = *(<span class="hljs-type">unsigned</span> __int8 *)(a1 + <span class="hljs-number">24LL</span> * v4 + v5 + <span class="hljs-number">1</span>);<br>          <span class="hljs-keyword">if</span> ( (_BYTE)result != <span class="hljs-string">&#x27; &#x27;</span> )<br>            <span class="hljs-keyword">return</span> result;<br>          ++v5;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">22</span> &amp;&amp; v5 == <span class="hljs-number">21</span> )<br>    check1 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中a1是</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216202743853.png" alt="image-20221216202743853"></p><p>可以得知我们要做的就是从左上角走到右下角，wsad分别对应上下左右，需要找到最短路径</p><p>主要方法还是遍历破解，来自Arr3stY0u战队的wp(orz)</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&mid=2247485849&idx=1&sn=9ff68fe0ca9ec87ae2523e76c4319f97&chksm=cf53c92ff8244039e74dd7e0401eb58863c3422eef6aa7fca8c73b0083181baf38f6d34cacea&mpshare=1&scene=23&srcid=1213kObhYPASQ8zQbQQYPZp3&sharer_sharetime=1670919679709&sharer_shareid=6eea79ff6da57fc6752ab0bc570bf392#rd">2022 RCTF writeup by Arr3stY0u (qq.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>maze_map = [<br> <span class="hljs-string">&quot;0S000000000000000000000&quot;</span>,<br> <span class="hljs-string">&quot;01011111011111110111110&quot;</span>,<br> <span class="hljs-string">&quot;01010101000101000101010&quot;</span>,<br> <span class="hljs-string">&quot;01110101111101011101010&quot;</span>,<br> <span class="hljs-string">&quot;01010100000000010100010&quot;</span>,<br> <span class="hljs-string">&quot;01010111110111110101110&quot;</span>,<br> <span class="hljs-string">&quot;01010000010101000001010&quot;</span>,<br> <span class="hljs-string">&quot;01110101110111111111010&quot;</span>,<br> <span class="hljs-string">&quot;00010101000101000100010&quot;</span>,<br> <span class="hljs-string">&quot;01110101110101011101110&quot;</span>,<br> <span class="hljs-string">&quot;01000100010101011100010&quot;</span>,<br> <span class="hljs-string">&quot;01110101110101011111010&quot;</span>,<br> <span class="hljs-string">&quot;01010101000101000001010&quot;</span>,<br> <span class="hljs-string">&quot;01011101111111110111010&quot;</span>,<br> <span class="hljs-string">&quot;01000000000001000101010&quot;</span>,<br> <span class="hljs-string">&quot;01110111110111111101010&quot;</span>,<br> <span class="hljs-string">&quot;01000000000100000000010&quot;</span>,<br> <span class="hljs-string">&quot;01110010001101111111010&quot;</span>,<br> <span class="hljs-string">&quot;01110100001001000001010&quot;</span>,<br> <span class="hljs-string">&quot;01110101101111011111010&quot;</span>,<br> <span class="hljs-string">&quot;01010101010000010000010&quot;</span>,<br> <span class="hljs-string">&quot;01111111011111011111110&quot;</span>,<br> <span class="hljs-string">&quot;000000000000000000000E0&quot;</span><br>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs_solve_maze</span>(<span class="hljs-params"><span class="hljs-built_in">map</span>, x, y, walks, path, allpath</span>):<br>    <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> x &gt;= <span class="hljs-number">23</span>:<br>        <span class="hljs-keyword">return</span> allpath<br>    <span class="hljs-keyword">if</span> y &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> y &gt;= <span class="hljs-number">23</span>:<br>        <span class="hljs-keyword">return</span> allpath<br>    <span class="hljs-keyword">if</span> (x, y) <span class="hljs-keyword">in</span> walks:<br>        <span class="hljs-keyword">return</span> allpath<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">map</span>[y][x] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;S1E&#x27;</span>:<br>        <span class="hljs-keyword">return</span> allpath<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">map</span>[y][x] == <span class="hljs-string">&#x27;E&#x27;</span>:<br>        allpath.add(path)<br>        <span class="hljs-keyword">return</span> allpath<br>    new_walks = walks.copy()<br>    new_walks.add((x, y))<br>    dfs_solve_maze(<span class="hljs-built_in">map</span>, x-<span class="hljs-number">1</span>, y, new_walks, path+<span class="hljs-string">&#x27;a&#x27;</span>, allpath)<br>    dfs_solve_maze(<span class="hljs-built_in">map</span>, x+<span class="hljs-number">1</span>, y, new_walks, path+<span class="hljs-string">&#x27;d&#x27;</span>, allpath)<br>    dfs_solve_maze(<span class="hljs-built_in">map</span>, x, y-<span class="hljs-number">1</span>, new_walks, path+<span class="hljs-string">&#x27;w&#x27;</span>, allpath)<br>    dfs_solve_maze(<span class="hljs-built_in">map</span>, x, y+<span class="hljs-number">1</span>, new_walks, path+<span class="hljs-string">&#x27;s&#x27;</span>, allpath)<br>    <span class="hljs-keyword">return</span> allpath<br>allpath = dfs_solve_maze(maze_map, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">set</span>(), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-built_in">set</span>())<br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> allpath:<br>    io=process(<span class="hljs-string">&quot;./HuoWang&quot;</span>)<br>    io.sendline(p)<br>    out=io.recvall()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;flag&quot;</span> <span class="hljs-keyword">in</span> out:<br>        <span class="hljs-built_in">print</span>(p)<br>    io.close()<br></code></pre></td></tr></table></figure><p>通过dfs遍历所有的情况</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216204341992.png" alt="image-20221216204341992"></p><p>然后md5加密得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>a = <span class="hljs-string">&quot;sssddwwddssssddddssaassddssaassddddwwwwwwwwddddwwddwwddddssssaassaassaassddddssaassaaaaaassassdddwwddddddssaaaassdddddds&quot;</span><br>enc = hashlib.md5()<br>enc.update(a.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(enc.hexdigest(),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-comment">#flag&#123;e1f9e3d166dcec5ecff3a2c5fbdeab3b&#125;</span><br></code></pre></td></tr></table></figure><h2 id="RTTT"><a href="#RTTT" class="headerlink" title="RTTT"></a>RTTT</h2><p>一道有点抽象的rust逆向(rust都抽象)</p><p>首先静态分析一下</p><p>找到了五个很可疑的数组</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216210957006.png" alt="image-20221216210957006"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216211008109.png" alt="image-20221216211008109"></p><p>看到他们后续的操作是异或，直接上手，发现结果就是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Welc0me</span> to RCTF <span class="hljs-number">2</span>O22<br><span class="hljs-attribute">Congratulations</span><br></code></pre></td></tr></table></figure><p>所以猜测congratulations前面的那个数组大概率是密文</p><p>直接在左侧搜索memcmp函数，x找交叉引用定位到最后密文做比较的地方</p><p>直接开始动调，F8到输入处开始跟踪，然后发现第一个操作是打乱输入顺序</p><p>input:<strong>RCTF{abcdefghijklmnopqrstuvwxyz0123456789}</strong></p><p>打乱后<strong>t4u6f2rysRxvoin}dkh3wacgeF1C{9l58Tz7pbq0jm</strong></p><p>看F61d大佬们的wp</p><p><a href="https://www.ctfiot.com/85535.html">RCTF 2022 WriteUp By F61d | CTF导航 (ctfiot.com)</a></p><p>得知第二步加密居然是RC4，我是看了两个多小时没看出来，居然只凭借这点信息就能判断出来是RC4，真厉害</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20221216214645661.png" alt="image-20221216214645661"></p><p>借用一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br>rc4 = ARC4.new(<span class="hljs-string">b&#x27;Welc0me to RCTF 2O22&#x27;</span>)<br>t1 = [<span class="hljs-number">52</span>, <span class="hljs-number">194</span>, <span class="hljs-number">101</span>, <span class="hljs-number">45</span>, <span class="hljs-number">218</span>, <span class="hljs-number">198</span>, <span class="hljs-number">177</span>, <span class="hljs-number">173</span>, <span class="hljs-number">71</span>, <span class="hljs-number">186</span>, <span class="hljs-number">6</span>, <span class="hljs-number">169</span>, <span class="hljs-number">59</span>, <span class="hljs-number">193</span>, <span class="hljs-number">204</span>, <span class="hljs-number">215</span>, <span class="hljs-number">241</span>, <span class="hljs-number">41</span>, <span class="hljs-number">36</span>, <span class="hljs-number">57</span>, <span class="hljs-number">42</span>, <span class="hljs-number">192</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">126</span>, <span class="hljs-number">16</span>, <span class="hljs-number">102</span>, <span class="hljs-number">123</span>, <span class="hljs-number">94</span>, <span class="hljs-number">234</span>, <span class="hljs-number">94</span>, <span class="hljs-number">208</span>, <span class="hljs-number">89</span>, <span class="hljs-number">70</span>, <span class="hljs-number">225</span>, <span class="hljs-number">214</span>, <span class="hljs-number">110</span>, <span class="hljs-number">94</span>, <span class="hljs-number">178</span>, <span class="hljs-number">70</span>, <span class="hljs-number">107</span>, <span class="hljs-number">49</span>]<br>f = rc4.decrypt(<span class="hljs-built_in">bytes</span>(t1)).decode()<br><span class="hljs-built_in">print</span>(f)<br>s1 = <span class="hljs-string">&#x27;RCTF&#123;abcdefghijklmnopqrstuvwxyz0123456789&#125;&#x27;</span><br><span class="hljs-comment">#s1 = &#x27;qwertyuiopasdfghjklzxcvbnm1234567890QWERTY&#x27;</span><br><span class="hljs-comment">#s2 = &#x27;n0mWa8v4bq31zflYohd92yispr7wtTjQRe5Exuc6gk&#x27;</span><br>s2 = <span class="hljs-string">&#x27;t4u6f2rysRxvoin&#125;dkh3wacgeF1C&#123;9l58Tz7pbq0jm&#x27;</span><br><br>dic = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s2)):<br>    dic[i] = s1.index(s2[i])<br><br>f1 = [<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(f)):<br>    f1[dic[i]] = f[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(f1))<br><span class="hljs-comment">#RCTF&#123;03C3E9B2-E37F-2FD6-CD7E-57C91D77DD61&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Web-run"><a href="#Web-run" class="headerlink" title="Web_run"></a>Web_run</h2><p>wasm逆向， ez_wasm.2  改为 ez_ca.wasm ，ez_wasm.1 改为 ez_wasm.html</p><p>然后直接用jeb打开.wasm</p><h3 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415131758752.png" alt="image-20230415131758752"></p><h3 id="f11"><a href="#f11" class="headerlink" title="f11()"></a>f11()</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415131834660.png" alt="image-20230415131834660"></p><p>关键函数主要是f10(), f6(),f9()这三个</p><h3 id="f10"><a href="#f10" class="headerlink" title="f10()"></a>f10()</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415142301789.png" alt="image-20230415142301789"></p><p>主要是输入data，格式为xxxx&#x2F;xx&#x2F;xx xx:xx，解析成为一个整数</p><p>要留意的是202211110054这个数</p><h3 id="f6"><a href="#f6" class="headerlink" title="f6()"></a>f6()</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415142439751.png" alt="image-20230415142439751"></p><p>主要功能就是把f10()返回的result值赋给全局变量</p><h3 id="f30"><a href="#f30" class="headerlink" title="f30()"></a>f30()</h3><p>其中有对0xA30处值的初始化</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415143147404.png" alt="image-20230415143147404"></p><h3 id="f9"><a href="#f9" class="headerlink" title="f9()"></a>f9()</h3><p>分情况对这个整数进行加密</p><p>具体是”xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx”</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415132916761.png" alt="image-20230415132916761"></p><p>红框部分就是主要的加密过程</p><h3 id="f7"><a href="#f7" class="headerlink" title="f7()"></a>f7()</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415142729078.png" alt="image-20230415142729078"></p><h3 id="f31"><a href="#f31" class="headerlink" title="f31()"></a>f31()</h3><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20230415142742289.png" alt="image-20230415142742289"></p><p>主要的加密就是f31()的返回值模16，然后按照对应规则转换为16进制</p><p>写脚本</p><p>由于是复现，所以直接与已知的官方flag进行比较</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> magic = <span class="hljs-number">6364136223846793005</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> data = <span class="hljs-number">202211110054</span>;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> A30 = (<span class="hljs-type">int</span>)data - <span class="hljs-number">1</span>;<br>string test = <span class="hljs-string">&quot;RCTF&#123;40959ea7-26e0-4c9d-8f4a-62faf14ff392&#125;&quot;</span>;<br>string flag = <span class="hljs-string">&quot;RCTF&#123;&quot;</span>;<br><span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str); i++) &#123;<br><span class="hljs-keyword">if</span> (str[i] != <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp; str[i] != <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res = A30 * magic + <span class="hljs-number">1</span>;<br>A30 = res;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v0 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(res &gt;&gt; <span class="hljs-number">33</span>);<br><span class="hljs-type">int</span> num = v0 % <span class="hljs-number">16</span>;<br><span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;y&#x27;</span>) &#123;<br>num = ((num &amp; <span class="hljs-number">3</span>) | <span class="hljs-number">8</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (num &gt;= <span class="hljs-number">0</span> &amp;&amp; num &lt;= <span class="hljs-number">9</span>) &#123;<br>flag += num + <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>flag += num - <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;a&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>flag += str[i];<br>&#125;<br>&#125;<br>flag += <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>std::cout &lt;&lt; flag &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (flag == test) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;correct!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022网鼎杯 re693</title>
    <link href="/2022/10/09/2022%E7%BD%91%E9%BC%8E%E6%9D%AF-re693/"/>
    <url>/2022/10/09/2022%E7%BD%91%E9%BC%8E%E6%9D%AF-re693/</url>
    
    <content type="html"><![CDATA[<h1 id="2022网鼎杯re693"><a href="#2022网鼎杯re693" class="headerlink" title="2022网鼎杯re693"></a>2022网鼎杯re693</h1><p>文件是go源码，直接在goland中打开，运行，根据输出提示来解题</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220829122400709.png" alt="image-20220829122400709"></p><h2 id="根据提示"><a href="#根据提示" class="headerlink" title="根据提示"></a>根据提示</h2><p>找到两个函数，第一个函数是有六个参数，并且第三个参数名为<code>gLIhR</code>的函数</p><p>是<code>ZlXDJkH3OZN4Mayd</code></p><p>第二个函数是有三个调用并且调用名为<code>cHZv5op8rOmlAkb6</code></p><p>一个一个找，找到满足只有六处引用的函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220829122655568.png" alt="image-20220829122655568"></p><p>就是<code>UhnCm82SDGE0zLYO</code></p><h2 id="然后查看主函数"><a href="#然后查看主函数" class="headerlink" title="然后查看主函数"></a>然后查看主函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> nFAzj, CuSkl <span class="hljs-type">string</span><br>    jjxXf := []<span class="hljs-type">byte</span>&#123;<br>        <span class="hljs-number">37</span>, <span class="hljs-number">73</span>, <span class="hljs-number">151</span>, <span class="hljs-number">135</span>, <span class="hljs-number">65</span>, <span class="hljs-number">58</span>, <span class="hljs-number">241</span>, <span class="hljs-number">90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">86</span>, <span class="hljs-number">71</span>, <span class="hljs-number">41</span>, <span class="hljs-number">102</span>, <span class="hljs-number">241</span>, <span class="hljs-number">213</span>, <span class="hljs-number">234</span>, <span class="hljs-number">67</span>, <span class="hljs-number">144</span>, <span class="hljs-number">139</span>, <span class="hljs-number">20</span>, <span class="hljs-number">112</span>, <span class="hljs-number">150</span>, <span class="hljs-number">41</span>, <span class="hljs-number">7</span>, <span class="hljs-number">158</span>, <span class="hljs-number">251</span>, <span class="hljs-number">167</span>, <span class="hljs-number">249</span>, <span class="hljs-number">24</span>, <span class="hljs-number">129</span>, <span class="hljs-number">72</span>, <span class="hljs-number">64</span>, <span class="hljs-number">83</span>, <span class="hljs-number">142</span>, <span class="hljs-number">166</span>, <span class="hljs-number">236</span>, <span class="hljs-number">67</span>, <span class="hljs-number">18</span>, <span class="hljs-number">211</span>, <span class="hljs-number">100</span>, <span class="hljs-number">91</span>, <span class="hljs-number">38</span>, <span class="hljs-number">83</span>, <span class="hljs-number">147</span>, <span class="hljs-number">40</span>, <span class="hljs-number">78</span>, <span class="hljs-number">239</span>, <span class="hljs-number">113</span>, <span class="hljs-number">232</span>, <span class="hljs-number">83</span>, <span class="hljs-number">227</span>, <span class="hljs-number">47</span>, <span class="hljs-number">192</span>, <span class="hljs-number">227</span>, <span class="hljs-number">70</span>, <span class="hljs-number">167</span>, <span class="hljs-number">201</span>, <span class="hljs-number">249</span>, <span class="hljs-number">156</span>, <span class="hljs-number">101</span>, <span class="hljs-number">216</span>, <span class="hljs-number">159</span>, <span class="hljs-number">116</span>, <span class="hljs-number">210</span>, <span class="hljs-number">152</span>, <span class="hljs-number">234</span>, <span class="hljs-number">38</span>, <span class="hljs-number">145</span>, <span class="hljs-number">198</span>, <span class="hljs-number">58</span>, <span class="hljs-number">24</span>, <span class="hljs-number">183</span>, <span class="hljs-number">72</span>, <span class="hljs-number">143</span>, <span class="hljs-number">136</span>, <span class="hljs-number">234</span>, <span class="hljs-number">246</span>&#125;<br>    KdlaH := []<span class="hljs-type">byte</span>&#123;<br>        <span class="hljs-number">191</span>, <span class="hljs-number">140</span>, <span class="hljs-number">114</span>, <span class="hljs-number">245</span>, <span class="hljs-number">142</span>, <span class="hljs-number">55</span>, <span class="hljs-number">190</span>, <span class="hljs-number">30</span>, <span class="hljs-number">161</span>, <span class="hljs-number">18</span>, <span class="hljs-number">200</span>, <span class="hljs-number">7</span>, <span class="hljs-number">21</span>, <span class="hljs-number">59</span>, <span class="hljs-number">17</span>, <span class="hljs-number">44</span>, <span class="hljs-number">34</span>, <span class="hljs-number">181</span>, <span class="hljs-number">109</span>, <span class="hljs-number">116</span>, <span class="hljs-number">146</span>, <span class="hljs-number">145</span>, <span class="hljs-number">189</span>, <span class="hljs-number">68</span>, <span class="hljs-number">142</span>, <span class="hljs-number">113</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">46</span>, <span class="hljs-number">184</span>, <span class="hljs-number">21</span>, <span class="hljs-number">33</span>, <span class="hljs-number">66</span>, <span class="hljs-number">99</span>, <span class="hljs-number">124</span>, <span class="hljs-number">167</span>, <span class="hljs-number">201</span>, <span class="hljs-number">88</span>, <span class="hljs-number">133</span>, <span class="hljs-number">20</span>, <span class="hljs-number">211</span>, <span class="hljs-number">67</span>, <span class="hljs-number">133</span>, <span class="hljs-number">250</span>, <span class="hljs-number">62</span>, <span class="hljs-number">28</span>, <span class="hljs-number">138</span>, <span class="hljs-number">229</span>, <span class="hljs-number">105</span>, <span class="hljs-number">102</span>, <span class="hljs-number">125</span>, <span class="hljs-number">124</span>, <span class="hljs-number">208</span>, <span class="hljs-number">180</span>, <span class="hljs-number">50</span>, <span class="hljs-number">146</span>, <span class="hljs-number">67</span>, <span class="hljs-number">39</span>, <span class="hljs-number">55</span>, <span class="hljs-number">240</span>, <span class="hljs-number">239</span>, <span class="hljs-number">203</span>, <span class="hljs-number">230</span>, <span class="hljs-number">142</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>, <span class="hljs-number">205</span>, <span class="hljs-number">27</span>, <span class="hljs-number">128</span>, <span class="hljs-number">136</span>, <span class="hljs-number">151</span>, <span class="hljs-number">140</span>, <span class="hljs-number">222</span>, <span class="hljs-number">92</span>, <span class="hljs-number">152</span>, <span class="hljs-number">1</span>, <span class="hljs-number">222</span>, <span class="hljs-number">138</span>, <span class="hljs-number">254</span>, <span class="hljs-number">246</span>, <span class="hljs-number">223</span>, <span class="hljs-number">224</span>, <span class="hljs-number">236</span>, <span class="hljs-number">33</span>, <span class="hljs-number">60</span>, <span class="hljs-number">170</span>, <span class="hljs-number">189</span>, <span class="hljs-number">77</span>, <span class="hljs-number">124</span>, <span class="hljs-number">72</span>, <span class="hljs-number">135</span>, <span class="hljs-number">46</span>, <span class="hljs-number">235</span>, <span class="hljs-number">17</span>, <span class="hljs-number">32</span>, <span class="hljs-number">28</span>, <span class="hljs-number">245</span>&#125;<br>    fmt.Print(MPyt9GWTRfAFNvb1(jjxXf))<br>    fmt.Scanf(<span class="hljs-string">&quot;%20s&quot;</span>, &amp;nFAzj)<br>    fmt.Print(kZ2BFvOxepd5ALDR(KdlaH))<br>    fmt.Scanf(<span class="hljs-string">&quot;%20s&quot;</span>, &amp;CuSkl)<br>    vNvUO := GwSqNHQ7dPXpIG64(nFAzj)<br>    YJCya := <span class="hljs-string">&quot;&quot;</span><br>    mvOxK := YI3z8ZxOKhfLmTPC(CuSkl)<br>    <span class="hljs-keyword">if</span> mvOxK != <span class="hljs-literal">nil</span> &#123;<br>        YJCya = mvOxK()<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> YJCya != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; vNvUO != <span class="hljs-string">&quot;&quot;</span> &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;flag&#123;%s%s&#125;\n&quot;</span>, vNvUO, YJCya)<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>flag分为两段，第一段是<code>vNvUO</code>，第二段是<code>YJCya</code></p><h2 id="第一段"><a href="#第一段" class="headerlink" title="第一段"></a>第一段</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GwSqNHQ7dPXpIG64</span><span class="hljs-params">(cJPTR <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    YrXQd := hex.EncodeToString([]<span class="hljs-type">byte</span>(cJPTR))<br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c&quot;</span>, YrXQd[<span class="hljs-number">22</span>], YrXQd[<span class="hljs-number">19</span>], YrXQd[<span class="hljs-number">20</span>], YrXQd[<span class="hljs-number">21</span>], YrXQd[<span class="hljs-number">28</span>], YrXQd[<span class="hljs-number">10</span>], YrXQd[<span class="hljs-number">20</span>], YrXQd[<span class="hljs-number">7</span>], YrXQd[<span class="hljs-number">29</span>], YrXQd[<span class="hljs-number">14</span>], YrXQd[<span class="hljs-number">0</span>], YrXQd[<span class="hljs-number">18</span>], YrXQd[<span class="hljs-number">3</span>], YrXQd[<span class="hljs-number">24</span>], YrXQd[<span class="hljs-number">27</span>], YrXQd[<span class="hljs-number">31</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>根据输入提示，第一个函数的函数名<code>ZlXDJkH3OZN4Mayd</code>转换为hex后就是<code>YrXQd</code>了</p><h2 id="第二段"><a href="#第二段" class="headerlink" title="第二段"></a>第二段</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UhnCm82SDGE0zLYO</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br>SythK := []<span class="hljs-type">byte</span>&#123;<br><span class="hljs-number">159</span>, <span class="hljs-number">141</span>, <span class="hljs-number">72</span>, <span class="hljs-number">106</span>, <span class="hljs-number">196</span>, <span class="hljs-number">62</span>, <span class="hljs-number">16</span>, <span class="hljs-number">205</span>, <span class="hljs-number">170</span>, <span class="hljs-number">159</span>, <span class="hljs-number">36</span>, <span class="hljs-number">232</span>, <span class="hljs-number">125</span>, <span class="hljs-number">239</span>, <span class="hljs-number">208</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">var</span> Vw2mJ, Nij87, zVclR <span class="hljs-type">string</span><br><span class="hljs-keyword">return</span> cHZv5op8rOmlAkb6(SythK, Vw2mJ, Nij87, zVclR)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cHZv5op8rOmlAkb6</span><span class="hljs-params">(HIGXt []<span class="hljs-type">byte</span>, VGvny <span class="hljs-type">string</span>, ZOkKV <span class="hljs-type">string</span>, eU0uD <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>QTk4l := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">20</span>)<br>Ek08m := [<span class="hljs-number">16</span>]<span class="hljs-type">byte</span>&#123;<br><span class="hljs-number">167</span>, <span class="hljs-number">238</span>, <span class="hljs-number">45</span>, <span class="hljs-number">89</span>, <span class="hljs-number">160</span>, <span class="hljs-number">95</span>, <span class="hljs-number">34</span>, <span class="hljs-number">175</span>, <span class="hljs-number">158</span>, <span class="hljs-number">169</span>, <span class="hljs-number">20</span>, <span class="hljs-number">217</span>, <span class="hljs-number">68</span>, <span class="hljs-number">137</span>, <span class="hljs-number">231</span>, <span class="hljs-number">54</span>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++ &#123;<br>QTk4l[i] += Ek08m[i] ^ HIGXt[i]<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(QTk4l)<br>&#125;<br></code></pre></td></tr></table></figure><p>找到<code>UhnCm82SDGE0zLYO</code>函数，然后找到它的调用，写解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    byte flag1[<span class="hljs-number">16</span>] = &#123;<br>        <span class="hljs-number">167</span>, <span class="hljs-number">238</span>, <span class="hljs-number">45</span>, <span class="hljs-number">89</span>, <span class="hljs-number">160</span>, <span class="hljs-number">95</span>, <span class="hljs-number">34</span>, <span class="hljs-number">175</span>, <span class="hljs-number">158</span>, <span class="hljs-number">169</span>, <span class="hljs-number">20</span>, <span class="hljs-number">217</span>, <span class="hljs-number">68</span>, <span class="hljs-number">137</span>, <span class="hljs-number">231</span>, <span class="hljs-number">54</span><br>    &#125;;<br>    byte flag2[<span class="hljs-number">16</span>] = &#123;<br>        <span class="hljs-number">159</span>, <span class="hljs-number">141</span>, <span class="hljs-number">72</span>, <span class="hljs-number">106</span>, <span class="hljs-number">196</span>, <span class="hljs-number">62</span>, <span class="hljs-number">16</span>, <span class="hljs-number">205</span>, <span class="hljs-number">170</span>, <span class="hljs-number">159</span>, <span class="hljs-number">36</span>, <span class="hljs-number">232</span>, <span class="hljs-number">125</span>, <span class="hljs-number">239</span>, <span class="hljs-number">208</span>, <span class="hljs-number">3</span><br>    &#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, flag1[i] ^ flag2[i]);<br>    &#125;<br>    <span class="hljs-type">char</span> YrXQd[] = <span class="hljs-string">&quot;5a6c58444a6b48334f5a4e344d617964&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n&quot;</span>, YrXQd[<span class="hljs-number">22</span>], YrXQd[<span class="hljs-number">19</span>], YrXQd[<span class="hljs-number">20</span>], YrXQd[<span class="hljs-number">21</span>], YrXQd[<span class="hljs-number">28</span>], YrXQd[<span class="hljs-number">10</span>], YrXQd[<span class="hljs-number">20</span>], YrXQd[<span class="hljs-number">7</span>], YrXQd[<span class="hljs-number">29</span>], YrXQd[<span class="hljs-number">14</span>], YrXQd[<span class="hljs-number">0</span>], YrXQd[<span class="hljs-number">18</span>], YrXQd[<span class="hljs-number">3</span>], YrXQd[<span class="hljs-number">24</span>], YrXQd[<span class="hljs-number">27</span>], YrXQd[<span class="hljs-number">31</span>]);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220829130350114.png" alt="image-20220829130350114"></p><p>所以最后flag就是</p><p>flag{3a4e76449355c4148ce3da2b46019f75}</p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网鼎杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>美团CTF RE small</title>
    <link href="/2022/10/09/2022%E7%BE%8E%E5%9B%A2CTF-RE-small/"/>
    <url>/2022/10/09/2022%E7%BE%8E%E5%9B%A2CTF-RE-small/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-美团-MT-CTF"><a href="#2022-美团-MT-CTF" class="headerlink" title="2022 美团 MT-CTF"></a>2022 美团 MT-CTF</h1><h2 id="Small"><a href="#Small" class="headerlink" title="Small"></a>Small</h2><p>借鉴：[<a href="https://bbs.pediy.com/thread-274448.htm">原创]2022MT-CTF Re-茶余饭后-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p><p>在做题的时候看到是ELF文件，直接尝试在Ubuntu上面运行，但是提示段错误。然后用IDA64打开，一直报错。想怎么修复ELF头，让他能直接运行，也有大佬提示试试看是不是shellcode，但是都失败了，看到了wp人都傻了。</p><p>首先用IDA64, 二进制模式打开</p><p>然后在0x68处按C反汇编，</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220920194825703.png" alt="image-20220920194825703"></p><p>经典的三个数两次异或运算，左移4，右移5</p><p>看cutter的反编译更清楚，可以得知这是一个TEA加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br> <br><span class="hljs-type">int64_t</span> <span class="hljs-title function_">entry0</span> <span class="hljs-params">(<span class="hljs-type">int64_t</span> arg_10h, <span class="hljs-type">int64_t</span> arg4, <span class="hljs-type">int64_t</span> arg1)</span> &#123;<br>    rcx = arg4;<br>    rdi = arg1;<br>    rsi = arg_10h;<br>label_0:<br>    ebx = <span class="hljs-number">0</span>;<br>    edx = ebx;<br>    eax = <span class="hljs-number">0x3e0002</span>;<br>    eax = *(rsi);<br>    rsi += <span class="hljs-number">4</span>;<br>    tmp_0 = eax;<br>    eax = ebp;<br>    ebp = tmp_0;<br>    eax = entry0;<br>    *(rax) += al;<br>    *(rax) += al;<br>    *(rax) += al;<br>    *(rax) += al;<br>    *(rax) += al;<br>    <span class="hljs-keyword">if</span> (*(rsp) != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">goto</span> label_1;<br>    &#125;<br>    eax = *(rsi);<br>    rsi += <span class="hljs-number">4</span>;<br>    tmp_1 = eax;<br>    eax = edi;<br>    edi = tmp_1;<br>    <span class="hljs-keyword">do</span> &#123;<br>        ecx = edi;<br>        eax = edi;<br>        ebx += <span class="hljs-number">0x67452301</span>;<span class="hljs-comment">//DELTA == 0x67452301</span><br>        ecx &lt;&lt;= <span class="hljs-number">4</span>;<span class="hljs-comment">//左移4</span><br>        ecx++;<br>        eax &gt;&gt;= <span class="hljs-number">5</span>;<span class="hljs-comment">//右移5</span><br>        eax += <span class="hljs-number">0x23</span>;<br>        ecx ^= eax;<span class="hljs-comment">//异或</span><br>        eax = edi;<br>        eax += ebx;<br>        ecx ^= eax;<span class="hljs-comment">//异或</span><br>        ebp += ecx;<br>        ecx = ebp;<br>        ecx &gt;&gt;= <span class="hljs-number">5</span>;<span class="hljs-comment">//右移5</span><br>        ecx += <span class="hljs-number">0x67</span>;<br>        eax = ebp;<br>        eax &lt;&lt;= <span class="hljs-number">4</span>;<span class="hljs-comment">//左移4</span><br>        eax += <span class="hljs-number">0x45</span>;<br>        ecx ^= eax;<br>        eax = ebp;<br>        eax += ebx;<br>        ecx ^= eax;<br>        edi += ecx;<br>        edx++;<br>    &#125; <span class="hljs-keyword">while</span> (edx &lt; <span class="hljs-number">0x23</span>);<span class="hljs-comment">//加密轮数为0x23次</span><br>    *((rsi - <span class="hljs-number">8</span>)) = ebp;<br>    *((rsi - <span class="hljs-number">4</span>)) = edi;<br>    ecx = arg_10h;<br>    ecx += <span class="hljs-number">0x20</span>;<br>    <span class="hljs-keyword">if</span> (esi &lt; ecx) &#123;<br>        <span class="hljs-keyword">goto</span> label_0;<br>    &#125;<br>    tmp_2 = rax;<br>    rax = rsi;<br>    rsi = tmp_2;<br>    esi = <span class="hljs-number">0x20</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        cl = *(rax);<br>        <span class="hljs-keyword">if</span> (*((esi + <span class="hljs-number">0x100f7</span>)) != cl) &#123;<span class="hljs-comment">//加密结束后与预先保存的密文进行倒序对比</span><br>            <span class="hljs-keyword">goto</span> label_1;<br>        &#125;<br>        esi--;<br>        rax--;<br>    &#125; <span class="hljs-keyword">while</span> (esi != <span class="hljs-number">0</span>);<br>    edi = <span class="hljs-number">1</span>;<br>    esi = <span class="hljs-number">0x100f3</span>;<br>    eax = <span class="hljs-number">1</span>;<br>    dx = <span class="hljs-number">4</span>;<br>    rax = syscall_80h (rdi, rsi, rdx, r10, r8, r9);<br>label_1:<br>    eax = <span class="hljs-number">0x3c</span>;<br>    edi = esi;<br>    rax = syscall_80h (rdi, rsi, rdx, r10, r8, r9);<br>    __asm (<span class="hljs-string">&quot;outsd dx, dword [esi]&quot;</span>);<br>    __asm (<span class="hljs-string">&quot;outsd dx, dword [rsi]&quot;</span>);<br>    <span class="hljs-keyword">if</span> (esi overflow <span class="hljs-number">0</span>) &#123;<br>        fp_status = fp_compare(fp_stack[<span class="hljs-number">0</span>], fp_stack[<span class="hljs-number">0</span>]);<br>        fp_stack++;<br>        edi -= ecx;<br>    &#125;<br>    fp_stack[<span class="hljs-number">0</span>] *= *((rbp + rdx*<span class="hljs-number">8</span> - <span class="hljs-number">0x62</span>));<br>    __asm (<span class="hljs-string">&quot;insd dword [rdi], dx&quot;</span>);<br>    __asm (<span class="hljs-string">&quot;out 0x4e, eax&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">void</span> (*<span class="hljs-number">0x10180</span>)() ();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>直接定位到0x100f7，可以找到密文就是在0x100f7~0x100f7+0x20之间</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220920214933839.png" alt="image-20220920214933839"></p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">enc=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;437108ded21bf9c4dcdaf6da4cd59e6de74eeb7504dc1d5dd90f1b51fb88dc51&#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(enc),<span class="hljs-number">4</span>):<br>    num=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        num|=(enc[i+j]&lt;&lt;(<span class="hljs-number">8</span>*j))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(num),end=<span class="hljs-string">&#x27;,&#x27;</span>)<br><br>  <span class="hljs-comment">#0xde087143,0xc4f91bd2,0xdaf6dadc,0x6d9ed54c,0x75eb4ee7,0x5d1ddc04,0x511b0fd9,0x51dc88fb</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ut32 unsigned int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> delta 0x67452301</span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">Tea_Decrypt</span><span class="hljs-params">(ut32* enc)</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> sum = <span class="hljs-number">0x67452301</span> * <span class="hljs-number">0x23</span>;<span class="hljs-comment">//0x1e73c923;</span><br>    ut32 v0 = enc[<span class="hljs-number">0</span>];<br>    ut32 v1 = enc[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x23</span>; i++) &#123;<br>        v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">0x45</span>) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x67</span>);<br>        v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">1</span>) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x23</span>);<br>        sum -= <span class="hljs-number">0x67452301</span>;<br>    &#125;<br>    enc[<span class="hljs-number">0</span>] = v0;<br>    enc[<span class="hljs-number">1</span>] = v1;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">Tea_Encrypt</span><span class="hljs-params">(ut32* src)</span> &#123;<br>    ut32 sum = <span class="hljs-number">0</span>;<br>    ut32 v0 = src[<span class="hljs-number">0</span>];<br>    ut32 v1 = src[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x23</span>; i++) &#123;<br>        sum += <span class="hljs-number">0x67452301</span>;<br>        v0 += ((v1 &lt;&lt; <span class="hljs-number">4</span>) +<span class="hljs-number">1</span>) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x23</span>);<br>        v1 += ((v0 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">0x45</span>) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x67</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%08x\n&quot;</span>, sum);<br>    src[<span class="hljs-number">0</span>] = v0;<br>    src[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    ut32 enc[<span class="hljs-number">8</span>] = &#123; <span class="hljs-number">0xde087143</span>,<span class="hljs-number">0xc4f91bd2</span>,<span class="hljs-number">0xdaf6dadc</span>,<span class="hljs-number">0x6d9ed54c</span>,<span class="hljs-number">0x75eb4ee7</span>,<span class="hljs-number">0x5d1ddc04</span>,<span class="hljs-number">0x511b0fd9</span>,<span class="hljs-number">0x51dc88fb</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i += <span class="hljs-number">2</span>) &#123;<br>        Tea_Decrypt(enc+i);<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,*((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)enc+i));<br>    &#125;<br>        <span class="hljs-comment">//327a6c4304ad5938eaf0efb6cc3e53dc</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美团CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022QWB Re find basic</title>
    <link href="/2022/10/09/2022QWB-Re-find-basic/"/>
    <url>/2022/10/09/2022QWB-Re-find-basic/</url>
    
    <content type="html"><![CDATA[<h1 id="2022强网杯re——find-basic"><a href="#2022强网杯re——find-basic" class="headerlink" title="2022强网杯re——find_basic"></a>2022强网杯re——find_basic</h1><p>首先查壳，该程序是一个32位ELF文件</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220822163610119.png" alt="image-20220822163610119"></p><p>进入main函数，可以看到大量的混淆，每个都是由pushf, pusha, mov, call, pop五个指令为一组进行，与虚拟机混淆十分类似</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220822163721787.png" alt="image-20220822163721787"></p><p>然后在第一个pushf处下断点，直接动态调试（因为就算F5了也没什么用，根本看不懂）</p><p>在第一次混淆中每处都F7步入，分析</p><p>进入第一个函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220822164218587.png" alt="image-20220822164218587"></p><p>主要会有下面两个函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220822164536372.png" alt="image-20220822164536372"></p><p>继续F7分析，会发现第一个函数的功能就是将一个地址处的值压入EAX寄存器，再加一：</p><p>第二个函数</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220822164719689.png" alt="image-20220822164719689"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220822164845831.png" alt="image-20220822164845831"></p><p>可以看出这里有一个循环，但是每一次左边的操作只有加一，所以直接在右边第一条指令下断点，F9</p><p>然后F7直接返回上一个函数</p><p>所以这两个函数都是没用的混淆</p><p>返回之后继续单步步入，发现进行了一些比较后，进行了多次跳转，当c1 &#x3D;&#x3D; 3Fh时跳转到这里</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220822165249779.png" alt="image-20220822165249779"></p><p>单步步入到这里</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220822165430354.png" alt="image-20220822165430354"></p><p>然后步入，发现这些函数都是和前面那些函数形式上差不多的混淆操作，没什么用，只有最后一个函数是前面加一之后的值减一</p><p>然后执行jmp跳转</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220822165738927.png" alt="image-20220822165738927"></p><p>发现程序回到了原点，然后接下来可以继续再跟进下一个函数，发现进行的操作都是同样的，然后接下来不断按下F8步过，</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823105425373.png" alt="image-20220823105425373"></p><p>到这里不管怎么按F8都没用了，说明程序要求我们输入了</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220822170224743.png" alt="image-20220822170224743"></p><p>然后随便输入些什么，主要是方便接下来的跟踪，这里输入123456789，</p><p>然后开始F7单步步入，进入到第一个有用代码块</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823105734413.png" alt="image-20220823105734413"></p><p>在这里，先将输入的内容保存到了eax中，然后再把它压入堆栈</p><p>然后继续步入，到</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823110215865.png" alt="image-20220823110215865"></p><p>进入分析这个函数</p><p>内层有很多混淆，绝大多数都是没用的函数，但是跳转到有用的指令前都会进行一个cmp指令和jnz指令，成功跳转后的指令就是有用的指令</p><p>进入到这里</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823110633629.png" alt="image-20220823110633629"></p><p>这块的操作就是将我们输入的数据保存</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823110706916.png" alt="image-20220823110706916"></p><p>继续步入，到这里，是第一个关键部位</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823110742596.png" alt="image-20220823110742596"></p><p>将eax寄存器的内容乘以42B45h，而eax寄存器中保存的内容恰好就是输入的第一个值，在这里也可以看到，就是字符1对应的ASCII码</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823110914559.png" alt="image-20220823110914559"></p><p>再步入到下一个函数，这里的sub eax, 1A93D7Eh，也相当于是一种比较，如果两个数值相等，执行后ZF会被置为1，如果不相等会被置为0，运行后，ZF为0</p><p>至于为什么eax寄存器的值到这一步没有变，可以仔细看前面的push和pop指令，eax寄存器的值在eax被使用之前先被压入栈中，然后在使用完后再出栈，保证了值不会被改变</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823111245821.png" alt="image-20220823111245821"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823111459859.png" alt="image-20220823111459859"></p><p>就可以得到flag[0] * 42B45h &#x3D;&#x3D; 1A93D7Eh，</p><p>然后接下来为了避免复杂的动调，使用IDA的tracing功能</p><p>进入这个窗口，发现他什么都没有</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823111923566.png" alt="image-20220823111923566"></p><p>然后打开view——Toolbars——Tracing</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823112006254.png" alt="image-20220823112006254"></p><p>然后打开Tracing options</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823112055819.png" alt="image-20220823112055819"></p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823112126731.png" alt="image-20220823112126731"></p><p>不用修改数据，直接默认，点击OK</p><p>然后点亮右上角的这个</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823112310594.png" alt="image-20220823112310594"></p><p>然后下断点，F9运行即可，然后等待一会后，这里就会记录下来刚才所有的指令</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823112525811.png" alt="image-20220823112525811"></p><p>然后将它复制到VScode中，然后直接搜索</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823112930835.png" alt="image-20220823112930835"></p><p>因为之前说过，真正的有用代码执行前都会执行cmp和jnz指令，只有cmp的被操作数和在进入混淆前给的字符相同时才会进行</p><p>定位到这一块，然后分析</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823113140573.png" alt="image-20220823113140573"></p><p>根据之前的特征分析，这一步进行的是flag[1] * 3B10Fh</p><p>然后进行相同的方法，下端点，F9（切记要在重新记录前清空Tracing界面）</p><p>然后定位到这里</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823113444737.png" alt="image-20220823113444737"></p><p>分析出他的指令第一步是 flag[0] * 1E4E0h，然后add指令就是flag[0] * 1E4E0h + flag[1] * 3B10Fh</p><p>然后故技重施</p><p><img src="https://renovice-1311449499.cos.ap-chongqing.myqcloud.com/img/image-20220823113717462.png" alt="image-20220823113717462"></p><p>到这里发现，sub eax, 24FE394h，实际上就是flag[0] * 1E4E0h + flag[1] * 3B10Fh &#x3D;&#x3D; 24FE394h</p><p>已经可以想到了，肯定是用到z3的方程组求解，</p><p>接下来只需要重复这样的步骤，获取后面的数据，然后再用z3求解</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>flag = [BitVec(<span class="hljs-string">&#x27;flag[%d]&#x27;</span> % i, <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x1c</span>)]<br><br>solver = Solver()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x1c</span>):<br>    solver.add(flag[i] &gt;= <span class="hljs-number">32</span>)<br>    solver.add(flag[i] &lt;= <span class="hljs-number">127</span>)<br><br>solver.add(flag[<span class="hljs-number">0</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;f&#x27;</span>))<br>solver.add(flag[<span class="hljs-number">1</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;l&#x27;</span>))<br>solver.add(flag[<span class="hljs-number">2</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br>solver.add(flag[<span class="hljs-number">3</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;g&#x27;</span>))<br>solver.add(flag[<span class="hljs-number">4</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;&#123;&#x27;</span>))<br>solver.add(flag[-<span class="hljs-number">1</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>))<br><br>solver.add(flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x42b45</span> - <span class="hljs-number">0x1a93d7e</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x3b10f</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x1e4e0</span> - <span class="hljs-number">0x24fe394</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x31fc4</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffdb038</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x1390f</span> - <span class="hljs-number">0xbb9e67</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x32494</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xfffe5a07</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xa4e6</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x6ba7</span> - <span class="hljs-number">0x1052718</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffe0c3f</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x43e32</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x3f49d</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xc094</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffb7eff</span> - <span class="hljs-number">0x7fb225</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x33e5b</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x157f8</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xd4eb</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffc9ad6</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x9c95</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffd8c2e</span> - <span class="hljs-number">0x6a31d</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0x6d8c</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffedd66</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x46fd4</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffc79bb</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xfffbe7f5</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x14cde</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffc4acd</span> + <span class="hljs-number">0x3083b63</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0x129fd</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0x2a3cd</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x52a1</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0x87de</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x357c1</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffbe625</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffec17b</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x8039</span> - <span class="hljs-number">0xd3b6ed</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffe590f</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfffc6bb7</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x2aec8</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xfffd58b1</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xfffcf131</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0xfffc0fae</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffcf46a</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffbbb98</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xfffc9913</span> + <span class="hljs-number">0x7a4d9d3</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0x3cb6</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xfffc5201</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffdec99</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x195a8</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffbcea6</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xfffd4f63</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x3852e</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x36c09</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffdffc6</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xffffbb8f</span> + <span class="hljs-number">0x27b7033</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0xfffb7a1c</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xffff35fe</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffe5693</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xfffdb9f4</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xbd38</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x25b89</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x3074d</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xfffe5f6f</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0x1400e</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffcd14c</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0x4036d</span> + <span class="hljs-number">0xa8256</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0x2da7a</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffbfd56</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xffff0011</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffce077</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x34d5d</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xfffb8def</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xffff2d4e</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0x237a3</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x386e1</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfb89</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x2e485</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x42574</span> - <span class="hljs-number">0x24df62a</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0x21c5e</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x32144</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x420e3</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x3f6d0</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x1a459</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffc900e</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x3fd03</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0x43d16</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xfffe4105</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfffd400a</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xffffc29b</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0x2f9f0</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0x19432</span> - <span class="hljs-number">0x6f9b293</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffca694</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffce151</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0x30418</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x2f6aa</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0x1b619</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x22e4</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xfffe1384</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xffffa664</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x13e07</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffc46de</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x79d6</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0x4372b</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0x3d1d</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0x4d41</span> - <span class="hljs-number">0x176513c</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0x29b04</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xfffd2684</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffd9a2f</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xfffd79fc</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0x2594e</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0x41c45</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfffc9c57</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xfffc5f95</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0xfffec65c</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0xffffb642</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffcb527</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x2792e</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffe1bb7</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x445a1</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffd25cc</span> + <span class="hljs-number">0x5338cd6</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0xfffd399c</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xffff3edb</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x26b94</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0xfffcee81</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffefe93</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xfffcdfa4</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfffe2a42</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x10ba4</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0x38e1d</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0x14c1e</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xffffce4a</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0xfffd2a4b</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0x41fc</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffedbac</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffeab6a</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0xfffe4e59</span> + <span class="hljs-number">0x299ff72</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0xfffdc67b</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xffffb1fc</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0xffff59be</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x3684</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x202c2</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0x2e43</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xffff3a46</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0x6a23</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xebfb</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffbb78a</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0xd44a</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0x385eb</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0xfffee046</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffeb282</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffde639</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xfffd6738</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0xffff1aa3</span> + <span class="hljs-number">0x4728350</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x28c9c</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffdc4ae</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x278ad</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0x326ca</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xfffd423d</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0xfffc96fc</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xfffeeb1a</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffc2ee0</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x106be</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xffff5d67</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x27</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0xfffbc3b6</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0xfffd163c</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0xfffb9b47</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x1e6ed</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffc6c6f</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0x3b32b</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0x2feea</span> + <span class="hljs-number">0x48d1119</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xfffc2bb3</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffce76f</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffca692</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffdf4bc</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0x192f9</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0xfffe5a1e</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0xfffed4f3</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xffff94f8</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfffc717e</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffed29b</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xfffd28d9</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x218df</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x28e00</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0xfffdd0af</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0x25d22</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x42ebb</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xffff1382</span> + flag[<span class="hljs-number">18</span>] * <span class="hljs-number">0x7404</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0xfffe2dff</span> + <span class="hljs-number">0x60245a5</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x21061</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffbcb01</span> + flag[<span class="hljs-number">19</span>] * <span class="hljs-number">0xffff7442</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x24568</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0x1b201</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0x2d232</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0x13777</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xfffee013</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0xfffc7505</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x264ed</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x33b4f</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x286d8</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0x33e8b</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0x21529</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0xfffb7c1a</span> + flag[<span class="hljs-number">18</span>] * <span class="hljs-number">0xfffd07a3</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xffff8453</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0x9754</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffd603d</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0xfffdd85b</span> - <span class="hljs-number">0x254e142</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffe206e</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0x2f048</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0xfffc19fa</span> + flag[<span class="hljs-number">4</span>] &lt;&lt; <span class="hljs-number">6</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0x370d</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0xfffd9c2f</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfffdb413</span> + flag[<span class="hljs-number">20</span>] * <span class="hljs-number">0x30e0a</span> + flag[<span class="hljs-number">18</span>] * <span class="hljs-number">0xfffe07f8</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffedfd5</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xfffee6f6</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x46247</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x2b8ed</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0x2d291</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xfffdc54d</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0xfffc5b55</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0xfffb8061</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x43913</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xffffe191</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0xfffd276e</span> + flag[<span class="hljs-number">19</span>] * <span class="hljs-number">0xfffe5841</span> + <span class="hljs-number">0xce53e7</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">20</span>] * <span class="hljs-number">0xfffed971</span> + flag[<span class="hljs-number">21</span>] * <span class="hljs-number">0x46741</span> + flag[<span class="hljs-number">18</span>] * <span class="hljs-number">0xfffbac8c</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffeb4e7</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0x1026b</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0xfffe7d86</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfffd5fec</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x48ddb</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0xfffc6bc1</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0x37ece</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x41105</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffe6667</span> + flag[<span class="hljs-number">19</span>] * <span class="hljs-number">0xfffe75b2</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0x61b0</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0xffffd602</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0xfffbce29</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xffff07d7</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x34c8e</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0x32996</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0x49530</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0x33822</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffce161</span> + <span class="hljs-number">0x42666b</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0xfffe06e8</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0xfffd0441</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x16357</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x1d95f</span> + flag[<span class="hljs-number">22</span>] * <span class="hljs-number">0xffff89d3</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffba022</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0x46180</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xffff4240</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x199c5</span> + flag[<span class="hljs-number">21</span>] * <span class="hljs-number">0xffff442c</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0xfffc2fac</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0x32600</span> + flag[<span class="hljs-number">19</span>] * <span class="hljs-number">0x1d03a</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0x19435</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0xfffd1667</span> + flag[<span class="hljs-number">18</span>] * <span class="hljs-number">0x35d1d</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x96c4</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x2fa24</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xb20c</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xebee</span> + flag[<span class="hljs-number">20</span>] * <span class="hljs-number">0x428a6</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0xfffceb8a</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0x22784</span> - <span class="hljs-number">0x3604a63</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x1e3e2</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0x1cfb9</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xc3f7</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0x94cd</span> + flag[<span class="hljs-number">22</span>] * <span class="hljs-number">0xfffc7fd0</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x21165</span> + flag[<span class="hljs-number">23</span>] * <span class="hljs-number">0xfffcfb41</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0xffff819d</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xfffbeb76</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x16751</span> + flag[<span class="hljs-number">19</span>] * <span class="hljs-number">0xe1a</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0x238a0</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0x28f99</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x45bc</span> + flag[<span class="hljs-number">20</span>] * <span class="hljs-number">0xffffcb18</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0x32d58</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0xffffe4bc</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0xfffeea95</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0x44f3a</span> + flag[<span class="hljs-number">18</span>] * <span class="hljs-number">0xb047</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xfffcfc36</span> + flag[<span class="hljs-number">21</span>] * <span class="hljs-number">0x1719</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0x1b011</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xfffea265</span> - <span class="hljs-number">0x2918269</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0xfffbf307</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0xffff2847</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfffcfd31</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x40f96</span> + flag[<span class="hljs-number">22</span>] * <span class="hljs-number">0x2b265</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xfffc7802</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x1b103</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0x42452</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0x3c5d</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x15b55</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffeb722</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0x1d9a9</span> + flag[<span class="hljs-number">23</span>] * <span class="hljs-number">0x28df</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0xfffc89eb</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xfffe1221</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0x4462a</span> + flag[<span class="hljs-number">19</span>] * <span class="hljs-number">0x23353</span> + flag[<span class="hljs-number">21</span>] * <span class="hljs-number">0x3c514</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x316a4</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x176e1</span> + flag[<span class="hljs-number">20</span>] * <span class="hljs-number">0xcf0e</span> + flag[<span class="hljs-number">18</span>] * <span class="hljs-number">0x46b55</span> + flag[<span class="hljs-number">24</span>] * <span class="hljs-number">0xffffbcc1</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0xf2a7</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0x1d33c</span> - <span class="hljs-number">0x5df35b6</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xfffbf624</span> + flag[<span class="hljs-number">22</span>] * <span class="hljs-number">0xfffec87a</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0x19aaa</span> + flag[<span class="hljs-number">23</span>] * <span class="hljs-number">0x5f14</span> + flag[<span class="hljs-number">20</span>] * <span class="hljs-number">0xfffcfc43</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0xfffbe879</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0xfffdfc92</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0xffffc258</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xfffd02fd</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x12560</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0xae46</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xfffeb6f5</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0x30c11</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0xfffcb4ae</span> + flag[<span class="hljs-number">24</span>] * <span class="hljs-number">0x2a00a</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfffc76de</span> + flag[<span class="hljs-number">21</span>] * <span class="hljs-number">0x4162</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xfffe95b2</span> + flag[<span class="hljs-number">25</span>] * <span class="hljs-number">0xfffe60e7</span> + flag[<span class="hljs-number">19</span>] * <span class="hljs-number">0xffff908d</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffb7f42</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x1c31</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xffff900c</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0x2ad6e</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffd7c6d</span> + flag[<span class="hljs-number">18</span>] * <span class="hljs-number">0xc499</span> + <span class="hljs-number">0x83646cd</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0x26b02</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0xfffb92e5</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0x30dd1</span> + flag[<span class="hljs-number">18</span>] * <span class="hljs-number">0xfffe4c7b</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0xffff0433</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0x276b1</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffc241e</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0xfffe3fdc</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0xfffee787</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0x230c</span> + flag[<span class="hljs-number">21</span>] * <span class="hljs-number">0xfffd53f8</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xfffc108c</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0xffffbac1</span> + flag[<span class="hljs-number">26</span>] * <span class="hljs-number">0xffff0bdb</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0xfffbc5e2</span> + flag[<span class="hljs-number">19</span>] * <span class="hljs-number">0xa1f6</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0x1e758</span> + flag[<span class="hljs-number">22</span>] * <span class="hljs-number">0x1725f</span> + flag[<span class="hljs-number">23</span>] * <span class="hljs-number">0x3387e</span> + flag[<span class="hljs-number">20</span>] * <span class="hljs-number">0x87b</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffd8475</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0x3776a</span> + flag[<span class="hljs-number">24</span>] * <span class="hljs-number">0xffff4515</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0x1a454</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0xfffbf3a1</span> + flag[<span class="hljs-number">25</span>] * <span class="hljs-number">0x25174</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0xfffbccc2</span> + <span class="hljs-number">0x52dfb3f</span> == <span class="hljs-number">0</span>)<br>solver.add(flag[<span class="hljs-number">25</span>] * <span class="hljs-number">0x2f139</span> + flag[<span class="hljs-number">20</span>] * <span class="hljs-number">0x21b53</span> + flag[<span class="hljs-number">15</span>] * <span class="hljs-number">0x2ad74</span> + flag[<span class="hljs-number">9</span>] * <span class="hljs-number">0xfffba19b</span> + flag[<span class="hljs-number">16</span>] * <span class="hljs-number">0x1ac4e</span> + flag[<span class="hljs-number">27</span>] * <span class="hljs-number">0x2208e</span> + flag[<span class="hljs-number">13</span>] * <span class="hljs-number">0xfffdd738</span> + flag[<span class="hljs-number">11</span>] * <span class="hljs-number">0xfffdfb9f</span> + flag[<span class="hljs-number">8</span>] * <span class="hljs-number">0xfffe4b65</span> + flag[<span class="hljs-number">5</span>] * <span class="hljs-number">0x10937</span> + flag[<span class="hljs-number">10</span>] * <span class="hljs-number">0xfffbfdf3</span> + flag[<span class="hljs-number">12</span>] * <span class="hljs-number">0x3cc1a</span> + flag[<span class="hljs-number">23</span>] * <span class="hljs-number">0xfffe93ee</span> + flag[<span class="hljs-number">2</span>] * <span class="hljs-number">0xfffe3b8a</span> + flag[<span class="hljs-number">14</span>] * <span class="hljs-number">0xfffe792c</span> + flag[<span class="hljs-number">6</span>] * <span class="hljs-number">0x3e9ff</span> + flag[<span class="hljs-number">21</span>] * <span class="hljs-number">0x128e6</span> + flag[<span class="hljs-number">3</span>] * <span class="hljs-number">0x574b</span> + flag[<span class="hljs-number">24</span>] * <span class="hljs-number">0x16707</span> + flag[<span class="hljs-number">19</span>] * <span class="hljs-number">0x3fe4c</span> + flag[<span class="hljs-number">17</span>] * <span class="hljs-number">0xfffed658</span> + flag[<span class="hljs-number">7</span>] * <span class="hljs-number">0x3cc8c</span> + flag[<span class="hljs-number">22</span>] * <span class="hljs-number">0x458b4</span> + flag[<span class="hljs-number">1</span>] * <span class="hljs-number">0xfffd74d0</span> + flag[<span class="hljs-number">18</span>] * <span class="hljs-number">0x22e02</span> + flag[<span class="hljs-number">4</span>] * <span class="hljs-number">0xffff098d</span> + flag[<span class="hljs-number">0</span>] * <span class="hljs-number">0x30b99</span> + flag[<span class="hljs-number">26</span>] * <span class="hljs-number">0xfffba5e9</span> - <span class="hljs-number">0x38186f4</span> == <span class="hljs-number">0</span>)<br><br>flag_str = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> solver.check() == sat:<br>    m = solver.model()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x1c</span>):<br>        flag_str += <span class="hljs-built_in">chr</span>(m[flag[i]].as_long())<br><br><span class="hljs-built_in">print</span>(flag_str)<br><br><span class="hljs-comment">#flag&#123;U_90t_th3_8451c_53cre7&#125;</span><br></code></pre></td></tr></table></figure><p>这种单步调试的方法很慢而且容易出错，后面看wp时看到了一个解决方法，直接写python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> idaapi <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ida_ua <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> keystone <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> capstone <span class="hljs-keyword">import</span> *<br>ks = Ks(KS_ARCH_X86, KS_MODE_32)<br>cs = Cs(CS_ARCH_X86, CS_MODE_32)<br>insn = insn_t()<br>b = <span class="hljs-built_in">bytearray</span>()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dis</span>(<span class="hljs-params">bytecode, address</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cs.disasm(bytecode, address):<br>        res = i.mnemonic + <span class="hljs-string">&#x27; &#x27;</span> + i.op_str<br>        <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_valid_code</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-keyword">global</span> b<br>    func_ea = addr<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        s = GetDisasm(func_ea) <span class="hljs-comment"># 获取当前指令</span><br>        <span class="hljs-keyword">if</span> s == <span class="hljs-string">&#x27;pushf&#x27;</span>: <span class="hljs-comment"># 获取dispatcher结果</span><br>            <span class="hljs-comment"># pushf -&gt; pusha -&gt; mov -&gt; call -&gt; pop</span><br>            l = decode_insn(insn, func_ea)<br>            func_ea += l <span class="hljs-comment"># jmp pushf</span><br>            l = decode_insn(insn, func_ea)<br>            func_ea += l <span class="hljs-comment"># jmp pusha</span><br>            <span class="hljs-comment"># mov</span><br>            opcode = get_operand_value(func_ea, <span class="hljs-number">1</span>)<br>            reg = get_operand_value(func_ea, <span class="hljs-number">0</span>)<br>            l = decode_insn(insn, func_ea)<br>            func_ea += l <span class="hljs-comment"># jmp mov</span><br>            call_func_ea = get_operand_value(func_ea, <span class="hljs-number">0</span>)<br>            l = decode_insn(insn, func_ea)<br>            func_ea += l <span class="hljs-comment"># jmp call</span><br>            l = decode_insn(insn, func_ea)<br>            func_ea += l <span class="hljs-comment"># jmp pop</span><br>            <span class="hljs-comment">#print(hex(call_func_ea))</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>: <span class="hljs-comment"># 找到对应分支</span><br>               s = GetDisasm(call_func_ea)<br>               <span class="hljs-keyword">if</span> s[:<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;cmp&#x27;</span>:<br>                   cmp_opcode = get_operand_value(call_func_ea, <span class="hljs-number">1</span>)<br>                   cmp_reg = get_operand_value(call_func_ea, <span class="hljs-number">0</span>)<br>                   <span class="hljs-keyword">if</span> cmp_opcode == opcode <span class="hljs-keyword">and</span> cmp_reg == reg: <span class="hljs-comment"># find!</span><br>                       l = decode_insn(insn, call_func_ea)<br>                       call_func_ea += l <span class="hljs-comment"># jmp cmp</span><br>                       <span class="hljs-keyword">break</span><br>               length = decode_insn(insn, call_func_ea) <span class="hljs-comment"># 获取指令长度</span><br>               call_func_ea += length<br>            <span class="hljs-comment"># cmp -&gt; jnz -&gt; popa -&gt; popf -&gt; valid code</span><br>            <span class="hljs-comment">#print(hex(opcode))</span><br>            l = decode_insn(insn, call_func_ea)<br>            call_func_ea += l <span class="hljs-comment"># jmp jnz</span><br>            l = decode_insn(insn, call_func_ea)<br>            call_func_ea += l <span class="hljs-comment"># jmp popa</span><br>            l = decode_insn(insn, call_func_ea)<br>            call_func_ea += l <span class="hljs-comment"># jmp popf</span><br>            <span class="hljs-comment"># jump to valid code</span><br>            s = GetDisasm(call_func_ea)<br>            <span class="hljs-keyword">if</span> s == <span class="hljs-string">&#x27;pushf&#x27;</span>:<br>                <span class="hljs-comment"># retn</span><br>                b += <span class="hljs-string">b&#x27;\xC3&#x27;</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                s = GetDisasm(call_func_ea)<br>                <span class="hljs-comment">#print(s)</span><br>                <span class="hljs-keyword">if</span> s[:<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;jmp&#x27;</span>:<br>                   <span class="hljs-comment"># retn</span><br>                   <span class="hljs-keyword">break</span><br>                <span class="hljs-comment"># get valid code</span><br>                length = decode_insn(insn, call_func_ea) <span class="hljs-comment"># 获取指令长度</span><br>                <span class="hljs-comment">#print(length,hex(call_func_ea))</span><br>                disas = dis(get_bytes(call_func_ea, length), call_func_ea)<br>                b += <span class="hljs-built_in">bytes</span>(ks.asm(disas, call_func_ea)[<span class="hljs-number">0</span>])<br>                call_func_ea += length<br>        <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 正常代码</span><br>            length = decode_insn(insn, func_ea) <span class="hljs-comment"># 获取指令长度</span><br>            disas = dis(get_bytes(func_ea, length), func_ea)<br>            b += <span class="hljs-built_in">bytes</span>(ks.asm(disas, func_ea)[<span class="hljs-number">0</span>])<br>            func_ea += length<br>            <span class="hljs-keyword">if</span> s == <span class="hljs-string">&#x27;retn&#x27;</span>:<br>                <span class="hljs-keyword">break</span><br>valic_code_addr = <span class="hljs-number">0x8C100</span><br>get_valid_code(<span class="hljs-number">0x48F4</span>)<br>get_valid_code(<span class="hljs-number">0x48C8</span>)<br>get_valid_code(<span class="hljs-number">0x3FBF</span>)<br>get_valid_code(<span class="hljs-number">0x3F1B</span>)<br>get_valid_code(<span class="hljs-number">0x4148</span>)<br>get_valid_code(<span class="hljs-number">0x750A9</span>)<br>get_valid_code(<span class="hljs-number">0x33EC</span>)<br>patch_bytes(valic_code_addr, <span class="hljs-built_in">bytes</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;done!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>具体可以参考<a href="https://www.bilibili.com/video/BV1Wt4y137qG?spm_id_from=333.999.0.0&vd_source=a6399ceb541c152f6fdd163573a7e845">【CTF&amp;WP】2022强网杯Reverse——find_basic_哔哩哔哩_bilibili</a></p><p><a href="https://www.xl-bit.cn/index.php/archives/839/">2022–第六届“强网杯”全国网络安全挑战赛—WriteUp - Bit’s Blog (xl-bit.cn)</a></p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>强网杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
